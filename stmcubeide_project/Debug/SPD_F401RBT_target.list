
SPD_F401RBT_target.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a8  080093a8  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093b0  080093b0  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093b0  080093b0  000193b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093b4  080093b4  000193b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  080093b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000168  08009520  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08009520  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cb6  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b4  00000000  00000000  00032e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00035f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00036f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199c8  00000000  00000000  00037e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d46  00000000  00000000  00051820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa18  00000000  00000000  00067566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005074  00000000  00000000  000f6fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c70 	.word	0x08008c70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	08008c70 	.word	0x08008c70

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FPEC_SectorErase>:

#include "FPEC_interface.h"

/* There are 7 Flash mem sectors */
void FPEC_SectorErase(u8 Copy_u8SectorNumber)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  FLASH_Erase_Sector(Copy_u8SectorNumber, 0x00000002U);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2102      	movs	r1, #2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 faca 	bl	8003b3c <FLASH_Erase_Sector>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <FPEC_Program>:

/* Writes a word in Flash memory */
void FPEC_Program(uint32* Copy_u32Address, uint32 Copy_u32Data, u16 use_trigger, uint32 span)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4613      	mov	r3, r2
 80005be:	80fb      	strh	r3, [r7, #6]
  SET1_BIT(FPEC->CR,31); // set lock bit
 80005c0:	4b38      	ldr	r3, [pc, #224]	; (80006a4 <FPEC_Program+0xf4>)
 80005c2:	691b      	ldr	r3, [r3, #16]
 80005c4:	4a37      	ldr	r2, [pc, #220]	; (80006a4 <FPEC_Program+0xf4>)
 80005c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005ca:	6113      	str	r3, [r2, #16]

  // Wait busy flag
  while (GET_BIT(FPEC->SR,16) == 1);
 80005cc:	bf00      	nop
 80005ce:	4b35      	ldr	r3, [pc, #212]	; (80006a4 <FPEC_Program+0xf4>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d0f8      	beq.n	80005ce <FPEC_Program+0x1e>

  // Check if FPEC is locked or not
  if ( /* FPEC_CR->BitAccess.LOCK == 1 */ GET_BIT(FPEC->CR,31) == 1 )
 80005dc:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <FPEC_Program+0xf4>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	0fdb      	lsrs	r3, r3, #31
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d105      	bne.n	80005f6 <FPEC_Program+0x46>
  {
    FPEC -> KEYR = 0x45670123;
 80005ea:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <FPEC_Program+0xf4>)
 80005ec:	4a2e      	ldr	r2, [pc, #184]	; (80006a8 <FPEC_Program+0xf8>)
 80005ee:	605a      	str	r2, [r3, #4]
    FPEC -> KEYR = 0xCDEF89AB;
 80005f0:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <FPEC_Program+0xf4>)
 80005f2:	4a2e      	ldr	r2, [pc, #184]	; (80006ac <FPEC_Program+0xfc>)
 80005f4:	605a      	str	r2, [r3, #4]
  }

  // Wait Busy Flag
  while (GET_BIT(FPEC->SR,16) == 1);
 80005f6:	bf00      	nop
 80005f8:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <FPEC_Program+0xf4>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0c1b      	lsrs	r3, r3, #16
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	2b01      	cmp	r3, #1
 8000604:	d0f8      	beq.n	80005f8 <FPEC_Program+0x48>

  // Write Flash Programming
  SET1_BIT(FPEC->CR,9); // Word write operation mode
 8000606:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <FPEC_Program+0xf4>)
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	4a26      	ldr	r2, [pc, #152]	; (80006a4 <FPEC_Program+0xf4>)
 800060c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000610:	6113      	str	r3, [r2, #16]
  CLR_BIT(FPEC->CR,8); //
 8000612:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <FPEC_Program+0xf4>)
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	4a23      	ldr	r2, [pc, #140]	; (80006a4 <FPEC_Program+0xf4>)
 8000618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800061c:	6113      	str	r3, [r2, #16]
  SET1_BIT(FPEC->CR,0); // set PG flag before write operation
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <FPEC_Program+0xf4>)
 8000620:	691b      	ldr	r3, [r3, #16]
 8000622:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <FPEC_Program+0xf4>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6113      	str	r3, [r2, #16]

  // Use output trigger signal or not
  if(use_trigger == 1)
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d116      	bne.n	800065e <FPEC_Program+0xae>
    __asm("NOP");
    __asm("NOP");
    __asm("NOP");
    __asm("NOP");
    __asm("NOP");*/
    trigger_high(5);
 8000630:	2005      	movs	r0, #5
 8000632:	f001 fe43 	bl	80022bc <trigger_high>

    uint32_t i;
    for (i = 0; i < span; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	e008      	b.n	800064e <FPEC_Program+0x9e>
      *((volatile uint32_t*) (Copy_u32Address + 4 * i)) = Copy_u32Data;  // Write word in Flash
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	011b      	lsls	r3, r3, #4
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	4413      	add	r3, r2
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	601a      	str	r2, [r3, #0]
    for (i = 0; i < span; i++)
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	d3f2      	bcc.n	800063c <FPEC_Program+0x8c>

    /*__asm("NOP");
    ASM_TRIGGER_LOW();*/
    trigger_low(1);
 8000656:	2001      	movs	r0, #1
 8000658:	f001 fe42 	bl	80022e0 <trigger_low>
 800065c:	e00f      	b.n	800067e <FPEC_Program+0xce>
  }
  else
  {
    uint32_t i;
    for (i = 0; i < span; i++)
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	e008      	b.n	8000676 <FPEC_Program+0xc6>
      *((volatile uint32_t*) (Copy_u32Address + 4 * i)) = Copy_u32Data;  // Write word in Flash
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	011b      	lsls	r3, r3, #4
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	4413      	add	r3, r2
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < span; i++)
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	3301      	adds	r3, #1
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	429a      	cmp	r2, r3
 800067c:	d3f2      	bcc.n	8000664 <FPEC_Program+0xb4>
  }

  // Wait Busy Flag
  while (GET_BIT(FPEC->SR,16) == 1);
 800067e:	bf00      	nop
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <FPEC_Program+0xf4>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	0c1b      	lsrs	r3, r3, #16
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	2b01      	cmp	r3, #1
 800068c:	d0f8      	beq.n	8000680 <FPEC_Program+0xd0>

  // EOP
  //SET_BIT(FPEC->SR,5);
  CLR_BIT(FPEC->CR,0); // disable PG bit if operation successful
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <FPEC_Program+0xf4>)
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <FPEC_Program+0xf4>)
 8000694:	f023 0301 	bic.w	r3, r3, #1
 8000698:	6113      	str	r3, [r2, #16]
}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023c00 	.word	0x40023c00
 80006a8:	45670123 	.word	0x45670123
 80006ac:	cdef89ab 	.word	0xcdef89ab

080006b0 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	e030      	b.n	8000722 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	441a      	add	r2, r3
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	440b      	add	r3, r1
 80006d0:	7812      	ldrb	r2, [r2, #0]
 80006d2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	3301      	adds	r3, #1
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	441a      	add	r2, r3
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	3301      	adds	r3, #1
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	440b      	add	r3, r1
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	3302      	adds	r3, #2
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	441a      	add	r2, r3
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	3302      	adds	r3, #2
 80006fc:	6879      	ldr	r1, [r7, #4]
 80006fe:	440b      	add	r3, r1
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	3303      	adds	r3, #3
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	441a      	add	r2, r3
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	3303      	adds	r3, #3
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	440b      	add	r3, r1
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	3301      	adds	r3, #1
 8000720:	61fb      	str	r3, [r7, #28]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d9cb      	bls.n	80006c0 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000728:	2304      	movs	r3, #4
 800072a:	61fb      	str	r3, [r7, #28]
 800072c:	e081      	b.n	8000832 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3b01      	subs	r3, #1
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	4413      	add	r3, r2
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	3301      	adds	r3, #1
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	3302      	adds	r3, #2
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	3303      	adds	r3, #3
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d125      	bne.n	80007ba <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 800076e:	7b3b      	ldrb	r3, [r7, #12]
 8000770:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8000772:	7b7b      	ldrb	r3, [r7, #13]
 8000774:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8000776:	7bbb      	ldrb	r3, [r7, #14]
 8000778:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 800077e:	7dfb      	ldrb	r3, [r7, #23]
 8000780:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8000782:	7b3b      	ldrb	r3, [r7, #12]
 8000784:	461a      	mov	r2, r3
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <KeyExpansion+0x198>)
 8000788:	5c9b      	ldrb	r3, [r3, r2]
 800078a:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 800078c:	7b7b      	ldrb	r3, [r7, #13]
 800078e:	461a      	mov	r2, r3
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <KeyExpansion+0x198>)
 8000792:	5c9b      	ldrb	r3, [r3, r2]
 8000794:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8000796:	7bbb      	ldrb	r3, [r7, #14]
 8000798:	461a      	mov	r2, r3
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <KeyExpansion+0x198>)
 800079c:	5c9b      	ldrb	r3, [r3, r2]
 800079e:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <KeyExpansion+0x198>)
 80007a6:	5c9b      	ldrb	r3, [r3, r2]
 80007a8:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 80007aa:	7b3a      	ldrb	r2, [r7, #12]
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	089b      	lsrs	r3, r3, #2
 80007b0:	4926      	ldr	r1, [pc, #152]	; (800084c <KeyExpansion+0x19c>)
 80007b2:	5ccb      	ldrb	r3, [r1, r3]
 80007b4:	4053      	eors	r3, r2
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3b04      	subs	r3, #4
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	4413      	add	r3, r2
 80007ce:	7819      	ldrb	r1, [r3, #0]
 80007d0:	7b3a      	ldrb	r2, [r7, #12]
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	4403      	add	r3, r0
 80007d8:	404a      	eors	r2, r1
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	3301      	adds	r3, #1
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	7819      	ldrb	r1, [r3, #0]
 80007e8:	7b7a      	ldrb	r2, [r7, #13]
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	3301      	adds	r3, #1
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	4403      	add	r3, r0
 80007f2:	404a      	eors	r2, r1
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	3302      	adds	r3, #2
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	7819      	ldrb	r1, [r3, #0]
 8000802:	7bba      	ldrb	r2, [r7, #14]
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3302      	adds	r3, #2
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	4403      	add	r3, r0
 800080c:	404a      	eors	r2, r1
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	3303      	adds	r3, #3
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	7819      	ldrb	r1, [r3, #0]
 800081c:	7bfa      	ldrb	r2, [r7, #15]
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	3303      	adds	r3, #3
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	4403      	add	r3, r0
 8000826:	404a      	eors	r2, r1
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	3301      	adds	r3, #1
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	2b2b      	cmp	r3, #43	; 0x2b
 8000836:	f67f af7a 	bls.w	800072e <KeyExpansion+0x7e>
  }
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	3724      	adds	r7, #36	; 0x24
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	08008f18 	.word	0x08008f18
 800084c:	08009118 	.word	0x08009118

08000850 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6839      	ldr	r1, [r7, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff26 	bl	80006b0 <KeyExpansion>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 800087a:	2300      	movs	r3, #0
 800087c:	75fb      	strb	r3, [r7, #23]
 800087e:	e027      	b.n	80008d0 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8000880:	2300      	movs	r3, #0
 8000882:	75bb      	strb	r3, [r7, #22]
 8000884:	e01e      	b.n	80008c4 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8000886:	7dfa      	ldrb	r2, [r7, #23]
 8000888:	7dbb      	ldrb	r3, [r7, #22]
 800088a:	68b9      	ldr	r1, [r7, #8]
 800088c:	0092      	lsls	r2, r2, #2
 800088e:	440a      	add	r2, r1
 8000890:	4413      	add	r3, r2
 8000892:	7818      	ldrb	r0, [r3, #0]
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	009a      	lsls	r2, r3, #2
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	4413      	add	r3, r2
 800089c:	009a      	lsls	r2, r3, #2
 800089e:	7dbb      	ldrb	r3, [r7, #22]
 80008a0:	4413      	add	r3, r2
 80008a2:	461a      	mov	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	7819      	ldrb	r1, [r3, #0]
 80008aa:	7dfa      	ldrb	r2, [r7, #23]
 80008ac:	7dbb      	ldrb	r3, [r7, #22]
 80008ae:	4041      	eors	r1, r0
 80008b0:	b2c8      	uxtb	r0, r1
 80008b2:	68b9      	ldr	r1, [r7, #8]
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	440a      	add	r2, r1
 80008b8:	4413      	add	r3, r2
 80008ba:	4602      	mov	r2, r0
 80008bc:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80008be:	7dbb      	ldrb	r3, [r7, #22]
 80008c0:	3301      	adds	r3, #1
 80008c2:	75bb      	strb	r3, [r7, #22]
 80008c4:	7dbb      	ldrb	r3, [r7, #22]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d9dd      	bls.n	8000886 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 80008ca:	7dfb      	ldrb	r3, [r7, #23]
 80008cc:	3301      	adds	r3, #1
 80008ce:	75fb      	strb	r3, [r7, #23]
 80008d0:	7dfb      	ldrb	r3, [r7, #23]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d9d4      	bls.n	8000880 <AddRoundKey+0x14>
    }
  }
}
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
 80008da:	371c      	adds	r7, #28
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
 80008f0:	e01d      	b.n	800092e <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 80008f2:	2300      	movs	r3, #0
 80008f4:	73bb      	strb	r3, [r7, #14]
 80008f6:	e014      	b.n	8000922 <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 80008f8:	7bba      	ldrb	r2, [r7, #14]
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	0092      	lsls	r2, r2, #2
 8000900:	440a      	add	r2, r1
 8000902:	4413      	add	r3, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	7bba      	ldrb	r2, [r7, #14]
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	490d      	ldr	r1, [pc, #52]	; (8000944 <SubBytes+0x60>)
 800090e:	5c08      	ldrb	r0, [r1, r0]
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	440a      	add	r2, r1
 8000916:	4413      	add	r3, r2
 8000918:	4602      	mov	r2, r0
 800091a:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 800091c:	7bbb      	ldrb	r3, [r7, #14]
 800091e:	3301      	adds	r3, #1
 8000920:	73bb      	strb	r3, [r7, #14]
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	2b03      	cmp	r3, #3
 8000926:	d9e7      	bls.n	80008f8 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	3301      	adds	r3, #1
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	2b03      	cmp	r3, #3
 8000932:	d9de      	bls.n	80008f2 <SubBytes+0xe>
    }
  }
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	08008f18 	.word	0x08008f18

08000948 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	785b      	ldrb	r3, [r3, #1]
 8000954:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	795a      	ldrb	r2, [r3, #5]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7a5a      	ldrb	r2, [r3, #9]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7b5a      	ldrb	r2, [r3, #13]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7bfa      	ldrb	r2, [r7, #15]
 8000972:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	789b      	ldrb	r3, [r3, #2]
 8000978:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7a9a      	ldrb	r2, [r3, #10]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7bfa      	ldrb	r2, [r7, #15]
 8000986:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	799b      	ldrb	r3, [r3, #6]
 800098c:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7b9a      	ldrb	r2, [r3, #14]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	7bfa      	ldrb	r2, [r7, #15]
 800099a:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	78db      	ldrb	r3, [r3, #3]
 80009a0:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7bda      	ldrb	r2, [r3, #15]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7ada      	ldrb	r2, [r3, #11]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	79da      	ldrb	r2, [r3, #7]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7bfa      	ldrb	r2, [r7, #15]
 80009be:	71da      	strb	r2, [r3, #7]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <xtime>:

static uint8_t xtime(uint8_t x)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	b25a      	sxtb	r2, r3
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	09db      	lsrs	r3, r3, #7
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4619      	mov	r1, r3
 80009e4:	0049      	lsls	r1, r1, #1
 80009e6:	440b      	add	r3, r1
 80009e8:	4619      	mov	r1, r3
 80009ea:	00c8      	lsls	r0, r1, #3
 80009ec:	4619      	mov	r1, r3
 80009ee:	4603      	mov	r3, r0
 80009f0:	440b      	add	r3, r1
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	4053      	eors	r3, r2
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	b2db      	uxtb	r3, r3
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]
 8000a14:	e0a4      	b.n	8000b60 <MixColumns+0x158>
  {  
    t   = (*state)[i][0];
 8000a16:	7bfa      	ldrb	r2, [r7, #15]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000a1e:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8000a20:	7bfa      	ldrb	r2, [r7, #15]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	440b      	add	r3, r1
 8000a30:	785b      	ldrb	r3, [r3, #1]
 8000a32:	4053      	eors	r3, r2
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	6879      	ldr	r1, [r7, #4]
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	789b      	ldrb	r3, [r3, #2]
 8000a40:	4053      	eors	r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	78db      	ldrb	r3, [r3, #3]
 8000a4e:	4053      	eors	r3, r2
 8000a50:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8000a52:	7bfa      	ldrb	r2, [r7, #15]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	440b      	add	r3, r1
 8000a62:	785b      	ldrb	r3, [r3, #1]
 8000a64:	4053      	eors	r3, r2
 8000a66:	733b      	strb	r3, [r7, #12]
 8000a68:	7b3b      	ldrb	r3, [r7, #12]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ffae 	bl	80009cc <xtime>
 8000a70:	4603      	mov	r3, r0
 8000a72:	733b      	strb	r3, [r7, #12]
 8000a74:	7bfa      	ldrb	r2, [r7, #15]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8000a7c:	7b3a      	ldrb	r2, [r7, #12]
 8000a7e:	7b7b      	ldrb	r3, [r7, #13]
 8000a80:	4053      	eors	r3, r2
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	7bfa      	ldrb	r2, [r7, #15]
 8000a86:	404b      	eors	r3, r1
 8000a88:	b2d9      	uxtb	r1, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	785a      	ldrb	r2, [r3, #1]
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	789b      	ldrb	r3, [r3, #2]
 8000aa4:	4053      	eors	r3, r2
 8000aa6:	733b      	strb	r3, [r7, #12]
 8000aa8:	7b3b      	ldrb	r3, [r7, #12]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff8e 	bl	80009cc <xtime>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	733b      	strb	r3, [r7, #12]
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	7859      	ldrb	r1, [r3, #1]
 8000abe:	7b3a      	ldrb	r2, [r7, #12]
 8000ac0:	7b7b      	ldrb	r3, [r7, #13]
 8000ac2:	4053      	eors	r3, r2
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	404a      	eors	r2, r1
 8000aca:	b2d1      	uxtb	r1, r2
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	460a      	mov	r2, r1
 8000ad4:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	789a      	ldrb	r2, [r3, #2]
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	78db      	ldrb	r3, [r3, #3]
 8000aea:	4053      	eors	r3, r2
 8000aec:	733b      	strb	r3, [r7, #12]
 8000aee:	7b3b      	ldrb	r3, [r7, #12]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff6b 	bl	80009cc <xtime>
 8000af6:	4603      	mov	r3, r0
 8000af8:	733b      	strb	r3, [r7, #12]
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	7899      	ldrb	r1, [r3, #2]
 8000b04:	7b3a      	ldrb	r2, [r7, #12]
 8000b06:	7b7b      	ldrb	r3, [r7, #13]
 8000b08:	4053      	eors	r3, r2
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	404a      	eors	r2, r1
 8000b10:	b2d1      	uxtb	r1, r2
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	460a      	mov	r2, r1
 8000b1a:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	78da      	ldrb	r2, [r3, #3]
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	4053      	eors	r3, r2
 8000b2a:	733b      	strb	r3, [r7, #12]
 8000b2c:	7b3b      	ldrb	r3, [r7, #12]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff4c 	bl	80009cc <xtime>
 8000b34:	4603      	mov	r3, r0
 8000b36:	733b      	strb	r3, [r7, #12]
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	78d9      	ldrb	r1, [r3, #3]
 8000b42:	7b3a      	ldrb	r2, [r7, #12]
 8000b44:	7b7b      	ldrb	r3, [r7, #13]
 8000b46:	4053      	eors	r3, r2
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	404a      	eors	r2, r1
 8000b4e:	b2d1      	uxtb	r1, r2
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	460a      	mov	r2, r1
 8000b58:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	f67f af57 	bls.w	8000a16 <MixColumns+0xe>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 8000b72:	b5b0      	push	{r4, r5, r7, lr}
 8000b74:	b084      	sub	sp, #16
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	e33b      	b.n	80011f8 <InvMixColumns+0x686>
  { 
    a = (*state)[i][0];
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000b88:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	785b      	ldrb	r3, [r3, #1]
 8000b94:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	789b      	ldrb	r3, [r3, #2]
 8000ba0:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	78db      	ldrb	r3, [r3, #3]
 8000bac:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8000bae:	7afb      	ldrb	r3, [r7, #11]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff0b 	bl	80009cc <xtime>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff07 	bl	80009cc <xtime>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff03 	bl	80009cc <xtime>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff feff 	bl	80009cc <xtime>
 8000bce:	7abb      	ldrb	r3, [r7, #10]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fefb 	bl	80009cc <xtime>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fef7 	bl	80009cc <xtime>
 8000bde:	7abb      	ldrb	r3, [r7, #10]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fef3 	bl	80009cc <xtime>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff feef 	bl	80009cc <xtime>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff feeb 	bl	80009cc <xtime>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fee7 	bl	80009cc <xtime>
 8000bfe:	7a7b      	ldrb	r3, [r7, #9]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fee3 	bl	80009cc <xtime>
 8000c06:	7a7b      	ldrb	r3, [r7, #9]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fedf 	bl	80009cc <xtime>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fedb 	bl	80009cc <xtime>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fed7 	bl	80009cc <xtime>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fed3 	bl	80009cc <xtime>
 8000c26:	7a3b      	ldrb	r3, [r7, #8]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fecf 	bl	80009cc <xtime>
 8000c2e:	7a3b      	ldrb	r3, [r7, #8]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fecb 	bl	80009cc <xtime>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fec7 	bl	80009cc <xtime>
 8000c3e:	7a3b      	ldrb	r3, [r7, #8]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fec3 	bl	80009cc <xtime>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff febf 	bl	80009cc <xtime>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff febb 	bl	80009cc <xtime>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff feb7 	bl	80009cc <xtime>
 8000c5e:	7afb      	ldrb	r3, [r7, #11]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff feb3 	bl	80009cc <xtime>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461c      	mov	r4, r3
 8000c6a:	7afb      	ldrb	r3, [r7, #11]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fead 	bl	80009cc <xtime>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fea9 	bl	80009cc <xtime>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4063      	eors	r3, r4
 8000c7e:	b2dc      	uxtb	r4, r3
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fea2 	bl	80009cc <xtime>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fe9e 	bl	80009cc <xtime>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fe9a 	bl	80009cc <xtime>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4063      	eors	r3, r4
 8000c9c:	b2dc      	uxtb	r4, r3
 8000c9e:	7abb      	ldrb	r3, [r7, #10]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fe93 	bl	80009cc <xtime>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	461a      	mov	r2, r3
 8000caa:	7abb      	ldrb	r3, [r7, #10]
 8000cac:	4053      	eors	r3, r2
 8000cae:	b2dd      	uxtb	r5, r3
 8000cb0:	7abb      	ldrb	r3, [r7, #10]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fe8a 	bl	80009cc <xtime>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fe86 	bl	80009cc <xtime>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fe82 	bl	80009cc <xtime>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	406b      	eors	r3, r5
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4063      	eors	r3, r4
 8000cd0:	b2dc      	uxtb	r4, r3
 8000cd2:	7a7b      	ldrb	r3, [r7, #9]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fe79 	bl	80009cc <xtime>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fe75 	bl	80009cc <xtime>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	7a7b      	ldrb	r3, [r7, #9]
 8000ce8:	4053      	eors	r3, r2
 8000cea:	b2dd      	uxtb	r5, r3
 8000cec:	7a7b      	ldrb	r3, [r7, #9]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fe6c 	bl	80009cc <xtime>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fe68 	bl	80009cc <xtime>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fe64 	bl	80009cc <xtime>
 8000d04:	4603      	mov	r3, r0
 8000d06:	406b      	eors	r3, r5
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4063      	eors	r3, r4
 8000d0c:	b2dc      	uxtb	r4, r3
 8000d0e:	7a3b      	ldrb	r3, [r7, #8]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fe5b 	bl	80009cc <xtime>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fe57 	bl	80009cc <xtime>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe53 	bl	80009cc <xtime>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	7a3b      	ldrb	r3, [r7, #8]
 8000d2c:	4053      	eors	r3, r2
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4063      	eors	r3, r4
 8000d32:	b2d9      	uxtb	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8000d3c:	7afb      	ldrb	r3, [r7, #11]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fe44 	bl	80009cc <xtime>
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fe40 	bl	80009cc <xtime>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fe3c 	bl	80009cc <xtime>
 8000d54:	7afb      	ldrb	r3, [r7, #11]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fe38 	bl	80009cc <xtime>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fe34 	bl	80009cc <xtime>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fe30 	bl	80009cc <xtime>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fe2c 	bl	80009cc <xtime>
 8000d74:	7abb      	ldrb	r3, [r7, #10]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fe28 	bl	80009cc <xtime>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fe24 	bl	80009cc <xtime>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe20 	bl	80009cc <xtime>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fe1c 	bl	80009cc <xtime>
 8000d94:	7a7b      	ldrb	r3, [r7, #9]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fe18 	bl	80009cc <xtime>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fe14 	bl	80009cc <xtime>
 8000da4:	7a7b      	ldrb	r3, [r7, #9]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fe10 	bl	80009cc <xtime>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fe0c 	bl	80009cc <xtime>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fe08 	bl	80009cc <xtime>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fe04 	bl	80009cc <xtime>
 8000dc4:	7a3b      	ldrb	r3, [r7, #8]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fe00 	bl	80009cc <xtime>
 8000dcc:	7a3b      	ldrb	r3, [r7, #8]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fdfc 	bl	80009cc <xtime>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fdf8 	bl	80009cc <xtime>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fdf4 	bl	80009cc <xtime>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fdf0 	bl	80009cc <xtime>
 8000dec:	7afb      	ldrb	r3, [r7, #11]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fdec 	bl	80009cc <xtime>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fde8 	bl	80009cc <xtime>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fde4 	bl	80009cc <xtime>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	7afb      	ldrb	r3, [r7, #11]
 8000e0a:	4053      	eors	r3, r2
 8000e0c:	b2dc      	uxtb	r4, r3
 8000e0e:	7abb      	ldrb	r3, [r7, #10]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fddb 	bl	80009cc <xtime>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461d      	mov	r5, r3
 8000e1a:	7abb      	ldrb	r3, [r7, #10]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fdd5 	bl	80009cc <xtime>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fdd1 	bl	80009cc <xtime>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	406b      	eors	r3, r5
 8000e2e:	b2dd      	uxtb	r5, r3
 8000e30:	7abb      	ldrb	r3, [r7, #10]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fdca 	bl	80009cc <xtime>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fdc6 	bl	80009cc <xtime>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fdc2 	bl	80009cc <xtime>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	406b      	eors	r3, r5
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4063      	eors	r3, r4
 8000e50:	b2dc      	uxtb	r4, r3
 8000e52:	7a7b      	ldrb	r3, [r7, #9]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fdb9 	bl	80009cc <xtime>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	7a7b      	ldrb	r3, [r7, #9]
 8000e60:	4053      	eors	r3, r2
 8000e62:	b2dd      	uxtb	r5, r3
 8000e64:	7a7b      	ldrb	r3, [r7, #9]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fdb0 	bl	80009cc <xtime>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fdac 	bl	80009cc <xtime>
 8000e74:	4603      	mov	r3, r0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fda8 	bl	80009cc <xtime>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	406b      	eors	r3, r5
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4063      	eors	r3, r4
 8000e84:	b2dc      	uxtb	r4, r3
 8000e86:	7a3b      	ldrb	r3, [r7, #8]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fd9f 	bl	80009cc <xtime>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fd9b 	bl	80009cc <xtime>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	7a3b      	ldrb	r3, [r7, #8]
 8000e9c:	4053      	eors	r3, r2
 8000e9e:	b2dd      	uxtb	r5, r3
 8000ea0:	7a3b      	ldrb	r3, [r7, #8]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fd92 	bl	80009cc <xtime>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fd8e 	bl	80009cc <xtime>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fd8a 	bl	80009cc <xtime>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	406b      	eors	r3, r5
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4063      	eors	r3, r4
 8000ec0:	b2d9      	uxtb	r1, r3
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	460a      	mov	r2, r1
 8000ecc:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000ece:	7afb      	ldrb	r3, [r7, #11]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fd7b 	bl	80009cc <xtime>
 8000ed6:	7afb      	ldrb	r3, [r7, #11]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fd77 	bl	80009cc <xtime>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fd73 	bl	80009cc <xtime>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fd6f 	bl	80009cc <xtime>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fd6b 	bl	80009cc <xtime>
 8000ef6:	7abb      	ldrb	r3, [r7, #10]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fd67 	bl	80009cc <xtime>
 8000efe:	7abb      	ldrb	r3, [r7, #10]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fd63 	bl	80009cc <xtime>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fd5f 	bl	80009cc <xtime>
 8000f0e:	7abb      	ldrb	r3, [r7, #10]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fd5b 	bl	80009cc <xtime>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fd57 	bl	80009cc <xtime>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fd53 	bl	80009cc <xtime>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fd4f 	bl	80009cc <xtime>
 8000f2e:	7a7b      	ldrb	r3, [r7, #9]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fd4b 	bl	80009cc <xtime>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fd47 	bl	80009cc <xtime>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fd43 	bl	80009cc <xtime>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fd3f 	bl	80009cc <xtime>
 8000f4e:	7a3b      	ldrb	r3, [r7, #8]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fd3b 	bl	80009cc <xtime>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fd37 	bl	80009cc <xtime>
 8000f5e:	7a3b      	ldrb	r3, [r7, #8]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fd33 	bl	80009cc <xtime>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fd2f 	bl	80009cc <xtime>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fd2b 	bl	80009cc <xtime>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fd27 	bl	80009cc <xtime>
 8000f7e:	7afb      	ldrb	r3, [r7, #11]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fd23 	bl	80009cc <xtime>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fd1f 	bl	80009cc <xtime>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	7afb      	ldrb	r3, [r7, #11]
 8000f94:	4053      	eors	r3, r2
 8000f96:	b2dc      	uxtb	r4, r3
 8000f98:	7afb      	ldrb	r3, [r7, #11]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fd16 	bl	80009cc <xtime>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fd12 	bl	80009cc <xtime>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fd0e 	bl	80009cc <xtime>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4063      	eors	r3, r4
 8000fb4:	b2dc      	uxtb	r4, r3
 8000fb6:	7abb      	ldrb	r3, [r7, #10]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fd07 	bl	80009cc <xtime>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fd03 	bl	80009cc <xtime>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fcff 	bl	80009cc <xtime>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	7abb      	ldrb	r3, [r7, #10]
 8000fd4:	4053      	eors	r3, r2
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4063      	eors	r3, r4
 8000fda:	b2dc      	uxtb	r4, r3
 8000fdc:	7a7b      	ldrb	r3, [r7, #9]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fcf4 	bl	80009cc <xtime>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461d      	mov	r5, r3
 8000fe8:	7a7b      	ldrb	r3, [r7, #9]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fcee 	bl	80009cc <xtime>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fcea 	bl	80009cc <xtime>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	406b      	eors	r3, r5
 8000ffc:	b2dd      	uxtb	r5, r3
 8000ffe:	7a7b      	ldrb	r3, [r7, #9]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fce3 	bl	80009cc <xtime>
 8001006:	4603      	mov	r3, r0
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fcdf 	bl	80009cc <xtime>
 800100e:	4603      	mov	r3, r0
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fcdb 	bl	80009cc <xtime>
 8001016:	4603      	mov	r3, r0
 8001018:	406b      	eors	r3, r5
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4063      	eors	r3, r4
 800101e:	b2dc      	uxtb	r4, r3
 8001020:	7a3b      	ldrb	r3, [r7, #8]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fcd2 	bl	80009cc <xtime>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	7a3b      	ldrb	r3, [r7, #8]
 800102e:	4053      	eors	r3, r2
 8001030:	b2dd      	uxtb	r5, r3
 8001032:	7a3b      	ldrb	r3, [r7, #8]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fcc9 	bl	80009cc <xtime>
 800103a:	4603      	mov	r3, r0
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fcc5 	bl	80009cc <xtime>
 8001042:	4603      	mov	r3, r0
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fcc1 	bl	80009cc <xtime>
 800104a:	4603      	mov	r3, r0
 800104c:	406b      	eors	r3, r5
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4063      	eors	r3, r4
 8001052:	b2d9      	uxtb	r1, r3
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	460a      	mov	r2, r1
 800105e:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fcb2 	bl	80009cc <xtime>
 8001068:	4603      	mov	r3, r0
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fcae 	bl	80009cc <xtime>
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fcaa 	bl	80009cc <xtime>
 8001078:	4603      	mov	r3, r0
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fca6 	bl	80009cc <xtime>
 8001080:	4603      	mov	r3, r0
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fca2 	bl	80009cc <xtime>
 8001088:	4603      	mov	r3, r0
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fc9e 	bl	80009cc <xtime>
 8001090:	7abb      	ldrb	r3, [r7, #10]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fc9a 	bl	80009cc <xtime>
 8001098:	7abb      	ldrb	r3, [r7, #10]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fc96 	bl	80009cc <xtime>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fc92 	bl	80009cc <xtime>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fc8e 	bl	80009cc <xtime>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fc8a 	bl	80009cc <xtime>
 80010b8:	7a7b      	ldrb	r3, [r7, #9]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fc86 	bl	80009cc <xtime>
 80010c0:	7a7b      	ldrb	r3, [r7, #9]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fc82 	bl	80009cc <xtime>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fc7e 	bl	80009cc <xtime>
 80010d0:	7a7b      	ldrb	r3, [r7, #9]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fc7a 	bl	80009cc <xtime>
 80010d8:	4603      	mov	r3, r0
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fc76 	bl	80009cc <xtime>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fc72 	bl	80009cc <xtime>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fc6e 	bl	80009cc <xtime>
 80010f0:	7a3b      	ldrb	r3, [r7, #8]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fc6a 	bl	80009cc <xtime>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc66 	bl	80009cc <xtime>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fc62 	bl	80009cc <xtime>
 8001108:	4603      	mov	r3, r0
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fc5e 	bl	80009cc <xtime>
 8001110:	7afb      	ldrb	r3, [r7, #11]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fc5a 	bl	80009cc <xtime>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	7afb      	ldrb	r3, [r7, #11]
 800111e:	4053      	eors	r3, r2
 8001120:	b2dc      	uxtb	r4, r3
 8001122:	7afb      	ldrb	r3, [r7, #11]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fc51 	bl	80009cc <xtime>
 800112a:	4603      	mov	r3, r0
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fc4d 	bl	80009cc <xtime>
 8001132:	4603      	mov	r3, r0
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fc49 	bl	80009cc <xtime>
 800113a:	4603      	mov	r3, r0
 800113c:	4063      	eors	r3, r4
 800113e:	b2dc      	uxtb	r4, r3
 8001140:	7abb      	ldrb	r3, [r7, #10]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fc42 	bl	80009cc <xtime>
 8001148:	4603      	mov	r3, r0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fc3e 	bl	80009cc <xtime>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	7abb      	ldrb	r3, [r7, #10]
 8001156:	4053      	eors	r3, r2
 8001158:	b2dd      	uxtb	r5, r3
 800115a:	7abb      	ldrb	r3, [r7, #10]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fc35 	bl	80009cc <xtime>
 8001162:	4603      	mov	r3, r0
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fc31 	bl	80009cc <xtime>
 800116a:	4603      	mov	r3, r0
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fc2d 	bl	80009cc <xtime>
 8001172:	4603      	mov	r3, r0
 8001174:	406b      	eors	r3, r5
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4063      	eors	r3, r4
 800117a:	b2dc      	uxtb	r4, r3
 800117c:	7a7b      	ldrb	r3, [r7, #9]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fc24 	bl	80009cc <xtime>
 8001184:	4603      	mov	r3, r0
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fc20 	bl	80009cc <xtime>
 800118c:	4603      	mov	r3, r0
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fc1c 	bl	80009cc <xtime>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	7a7b      	ldrb	r3, [r7, #9]
 800119a:	4053      	eors	r3, r2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4063      	eors	r3, r4
 80011a0:	b2dc      	uxtb	r4, r3
 80011a2:	7a3b      	ldrb	r3, [r7, #8]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fc11 	bl	80009cc <xtime>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461d      	mov	r5, r3
 80011ae:	7a3b      	ldrb	r3, [r7, #8]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fc0b 	bl	80009cc <xtime>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fc07 	bl	80009cc <xtime>
 80011be:	4603      	mov	r3, r0
 80011c0:	406b      	eors	r3, r5
 80011c2:	b2dd      	uxtb	r5, r3
 80011c4:	7a3b      	ldrb	r3, [r7, #8]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fc00 	bl	80009cc <xtime>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fbfc 	bl	80009cc <xtime>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fbf8 	bl	80009cc <xtime>
 80011dc:	4603      	mov	r3, r0
 80011de:	406b      	eors	r3, r5
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4063      	eors	r3, r4
 80011e4:	b2d9      	uxtb	r1, r3
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	460a      	mov	r2, r1
 80011f0:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	f77f acc0 	ble.w	8000b80 <InvMixColumns+0xe>
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800120c <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e01d      	b.n	8001256 <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 800121a:	2300      	movs	r3, #0
 800121c:	73bb      	strb	r3, [r7, #14]
 800121e:	e014      	b.n	800124a <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8001220:	7bba      	ldrb	r2, [r7, #14]
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	440a      	add	r2, r1
 800122a:	4413      	add	r3, r2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	7bba      	ldrb	r2, [r7, #14]
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	490d      	ldr	r1, [pc, #52]	; (800126c <InvSubBytes+0x60>)
 8001236:	5c08      	ldrb	r0, [r1, r0]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	440a      	add	r2, r1
 800123e:	4413      	add	r3, r2
 8001240:	4602      	mov	r2, r0
 8001242:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	3301      	adds	r3, #1
 8001248:	73bb      	strb	r3, [r7, #14]
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d9e7      	bls.n	8001220 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	3301      	adds	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d9de      	bls.n	800121a <InvSubBytes+0xe>
    }
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	08009018 	.word	0x08009018

08001270 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7b5b      	ldrb	r3, [r3, #13]
 800127c:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7a5a      	ldrb	r2, [r3, #9]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	795a      	ldrb	r2, [r3, #5]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	785a      	ldrb	r2, [r3, #1]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	789b      	ldrb	r3, [r3, #2]
 80012a0:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7a9a      	ldrb	r2, [r3, #10]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	799b      	ldrb	r3, [r3, #6]
 80012b4:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7b9a      	ldrb	r2, [r3, #14]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	78db      	ldrb	r3, [r3, #3]
 80012c8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	79da      	ldrb	r2, [r3, #7]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7ada      	ldrb	r2, [r3, #11]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7bda      	ldrb	r2, [r3, #15]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	73da      	strb	r2, [r3, #15]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff fab0 	bl	800086c <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fae7 	bl	80008e4 <SubBytes>
    ShiftRows(state);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fb16 	bl	8000948 <ShiftRows>
    if (round == Nr) {
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2b0a      	cmp	r3, #10
 8001320:	d00c      	beq.n	800133c <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fb70 	bl	8000a08 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fa9c 	bl	800086c <AddRoundKey>
  for (round = 1; ; ++round)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	3301      	adds	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 800133a:	e7e9      	b.n	8001310 <Cipher+0x1c>
      break;
 800133c:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	200a      	movs	r0, #10
 8001344:	f7ff fa92 	bl	800086c <AddRoundKey>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	200a      	movs	r0, #10
 8001364:	f7ff fa82 	bl	800086c <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8001368:	2309      	movs	r3, #9
 800136a:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff7f 	bl	8001270 <InvShiftRows>
    InvSubBytes(state);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff4a 	bl	800120c <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fa74 	bl	800086c <AddRoundKey>
    if (round == 0) {
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fbf1 	bl	8000b72 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	3b01      	subs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8001396:	e7e9      	b.n	800136c <InvCipher+0x1c>
      break;
 8001398:	bf00      	nop
  }

}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4619      	mov	r1, r3
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f7ff ff9f 	bl	80012f4 <Cipher>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <AES_ECB_decrypt>:

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4619      	mov	r1, r3
 80013cc:	6838      	ldr	r0, [r7, #0]
 80013ce:	f7ff ffbf 	bl	8001350 <InvCipher>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <AES_setup>:
    0
};



void AES_setup(enum AES_data_type data_type) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  switch(data_type) {
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d056      	beq.n	800149a <AES_setup+0xbe>
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	f300 8084 	bgt.w	80014fa <AES_setup+0x11e>
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <AES_setup+0x20>
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d01f      	beq.n	800143a <AES_setup+0x5e>
      aes_op_context.encrypt_configured = 0; // for continuous op detection
      send_ok();
    }
    break;
  }
}
 80013fa:	e07e      	b.n	80014fa <AES_setup+0x11e>
    if (strlen(cmds[2]) != 32) {
 80013fc:	4b41      	ldr	r3, [pc, #260]	; (8001504 <AES_setup+0x128>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe feed 	bl	80001e0 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	2b20      	cmp	r3, #32
 800140a:	d004      	beq.n	8001416 <AES_setup+0x3a>
      send_answer("Error: wrong key size\r\n", 23);
 800140c:	2117      	movs	r1, #23
 800140e:	483e      	ldr	r0, [pc, #248]	; (8001508 <AES_setup+0x12c>)
 8001410:	f000 fcda 	bl	8001dc8 <send_answer>
    break;
 8001414:	e071      	b.n	80014fa <AES_setup+0x11e>
      hex2bytes((const uint8_t *) cmds[2], 32, aes_op_context.key, 16);
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <AES_setup+0x128>)
 8001418:	6898      	ldr	r0, [r3, #8]
 800141a:	2310      	movs	r3, #16
 800141c:	4a3b      	ldr	r2, [pc, #236]	; (800150c <AES_setup+0x130>)
 800141e:	2120      	movs	r1, #32
 8001420:	f001 f992 	bl	8002748 <hex2bytes>
      AES_init_ctx(&(aes_op_context.aes_ctx_struct), aes_op_context.key);
 8001424:	4939      	ldr	r1, [pc, #228]	; (800150c <AES_setup+0x130>)
 8001426:	483a      	ldr	r0, [pc, #232]	; (8001510 <AES_setup+0x134>)
 8001428:	f7ff fa12 	bl	8000850 <AES_init_ctx>
      aes_op_context.key_configured = 1;
 800142c:	4b38      	ldr	r3, [pc, #224]	; (8001510 <AES_setup+0x134>)
 800142e:	2201      	movs	r2, #1
 8001430:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      send_ok();
 8001434:	f000 fd12 	bl	8001e5c <send_ok>
    break;
 8001438:	e05f      	b.n	80014fa <AES_setup+0x11e>
    if (cmd_is(3, "trig", 4)) {
 800143a:	2204      	movs	r2, #4
 800143c:	4935      	ldr	r1, [pc, #212]	; (8001514 <AES_setup+0x138>)
 800143e:	2003      	movs	r0, #3
 8001440:	f000 fc00 	bl	8001c44 <cmd_is>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <AES_setup+0x78>
      aes_op_context.do_trig = 1;
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <AES_setup+0x134>)
 800144c:	2201      	movs	r2, #1
 800144e:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8001452:	e003      	b.n	800145c <AES_setup+0x80>
      aes_op_context.do_trig = 0;
 8001454:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <AES_setup+0x134>)
 8001456:	2200      	movs	r2, #0
 8001458:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    if (strlen(cmds[2]) != 32) {
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <AES_setup+0x128>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe febd 	bl	80001e0 <strlen>
 8001466:	4603      	mov	r3, r0
 8001468:	2b20      	cmp	r3, #32
 800146a:	d004      	beq.n	8001476 <AES_setup+0x9a>
      send_answer("Error: wrong plaintext size\r\n", 29);
 800146c:	211d      	movs	r1, #29
 800146e:	482a      	ldr	r0, [pc, #168]	; (8001518 <AES_setup+0x13c>)
 8001470:	f000 fcaa 	bl	8001dc8 <send_answer>
    break;
 8001474:	e041      	b.n	80014fa <AES_setup+0x11e>
      hex2bytes((const uint8_t *) cmds[2], 32, aes_op_context.plain, 16);
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <AES_setup+0x128>)
 8001478:	6898      	ldr	r0, [r3, #8]
 800147a:	2310      	movs	r3, #16
 800147c:	4a27      	ldr	r2, [pc, #156]	; (800151c <AES_setup+0x140>)
 800147e:	2120      	movs	r1, #32
 8001480:	f001 f962 	bl	8002748 <hex2bytes>
      aes_op_context.encrypt_configured = 1;
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <AES_setup+0x134>)
 8001486:	2201      	movs	r2, #1
 8001488:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
      aes_op_context.decrypt_configured = 0; // for continuous op detection
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <AES_setup+0x134>)
 800148e:	2200      	movs	r2, #0
 8001490:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
      send_ok();
 8001494:	f000 fce2 	bl	8001e5c <send_ok>
    break;
 8001498:	e02f      	b.n	80014fa <AES_setup+0x11e>
    if (cmd_is(3, "trig", 4)) {
 800149a:	2204      	movs	r2, #4
 800149c:	491d      	ldr	r1, [pc, #116]	; (8001514 <AES_setup+0x138>)
 800149e:	2003      	movs	r0, #3
 80014a0:	f000 fbd0 	bl	8001c44 <cmd_is>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d004      	beq.n	80014b4 <AES_setup+0xd8>
      aes_op_context.do_trig = 1;
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <AES_setup+0x134>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 80014b2:	e003      	b.n	80014bc <AES_setup+0xe0>
      aes_op_context.do_trig = 0;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <AES_setup+0x134>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    if (strlen(cmds[2]) != 32) {
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <AES_setup+0x128>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe fe8d 	bl	80001e0 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b20      	cmp	r3, #32
 80014ca:	d004      	beq.n	80014d6 <AES_setup+0xfa>
      send_answer("Error: wrong ciphertext size\r\n", 30);
 80014cc:	211e      	movs	r1, #30
 80014ce:	4814      	ldr	r0, [pc, #80]	; (8001520 <AES_setup+0x144>)
 80014d0:	f000 fc7a 	bl	8001dc8 <send_answer>
    break;
 80014d4:	e010      	b.n	80014f8 <AES_setup+0x11c>
      hex2bytes((const uint8_t *) cmds[2], 32, aes_op_context.cipher, 16);
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <AES_setup+0x128>)
 80014d8:	6898      	ldr	r0, [r3, #8]
 80014da:	2310      	movs	r3, #16
 80014dc:	4a11      	ldr	r2, [pc, #68]	; (8001524 <AES_setup+0x148>)
 80014de:	2120      	movs	r1, #32
 80014e0:	f001 f932 	bl	8002748 <hex2bytes>
      aes_op_context.decrypt_configured = 1;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <AES_setup+0x134>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
      aes_op_context.encrypt_configured = 0; // for continuous op detection
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <AES_setup+0x134>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
      send_ok();
 80014f4:	f000 fcb2 	bl	8001e5c <send_ok>
    break;
 80014f8:	bf00      	nop
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000208 	.word	0x20000208
 8001508:	08008c88 	.word	0x08008c88
 800150c:	200000c3 	.word	0x200000c3
 8001510:	20000000 	.word	0x20000000
 8001514:	08008ca0 	.word	0x08008ca0
 8001518:	08008ca8 	.word	0x08008ca8
 800151c:	200000d3 	.word	0x200000d3
 8001520:	08008cc8 	.word	0x08008cc8
 8001524:	200000e3 	.word	0x200000e3

08001528 <AES_continuous_start>:

uint8_t AES_continuous_start(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  // configure context structure
  if (cmd_is(2, "trig", 4)) {
 800152c:	2204      	movs	r2, #4
 800152e:	4931      	ldr	r1, [pc, #196]	; (80015f4 <AES_continuous_start+0xcc>)
 8001530:	2002      	movs	r0, #2
 8001532:	f000 fb87 	bl	8001c44 <cmd_is>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <AES_continuous_start+0x1e>
    aes_op_context.do_trig = 1;
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <AES_continuous_start+0xd0>)
 800153e:	2201      	movs	r2, #1
 8001540:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8001544:	e003      	b.n	800154e <AES_continuous_start+0x26>
  }
  else {
    aes_op_context.do_trig = 0;
 8001546:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <AES_continuous_start+0xd0>)
 8001548:	2200      	movs	r2, #0
 800154a:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
  }

  if (aes_op_context.key_configured) {
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <AES_continuous_start+0xd0>)
 8001550:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d049      	beq.n	80015ec <AES_continuous_start+0xc4>
    if (aes_op_context.encrypt_configured) {
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <AES_continuous_start+0xd0>)
 800155a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d01f      	beq.n	80015a2 <AES_continuous_start+0x7a>
      aes_op_context.is_encrypt = 1;
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <AES_continuous_start+0xd0>)
 8001564:	2201      	movs	r2, #1
 8001566:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
      aes_op_context.configured = 1;
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <AES_continuous_start+0xd0>)
 800156c:	2201      	movs	r2, #1
 800156e:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5

      // start timer ITs
      HAL_TIM_PWM_Init(timer);
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <AES_continuous_start+0xd4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f003 f9ff 	bl	800497a <HAL_TIM_PWM_Init>
      HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_1);
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <AES_continuous_start+0xd4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fa52 	bl	8004a2c <HAL_TIM_PWM_Start_IT>
      HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_2);
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <AES_continuous_start+0xd4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2104      	movs	r1, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f003 fa4c 	bl	8004a2c <HAL_TIM_PWM_Start_IT>
      HAL_TIM_Base_Start_IT(timer);
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <AES_continuous_start+0xd4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f003 f95d 	bl	8004858 <HAL_TIM_Base_Start_IT>
      return 1;
 800159e:	2301      	movs	r3, #1
 80015a0:	e025      	b.n	80015ee <AES_continuous_start+0xc6>
    }
    else if (aes_op_context.decrypt_configured) {
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <AES_continuous_start+0xd0>)
 80015a4:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01f      	beq.n	80015ec <AES_continuous_start+0xc4>
      aes_op_context.is_encrypt = 0;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <AES_continuous_start+0xd0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
      aes_op_context.configured = 1;
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <AES_continuous_start+0xd0>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5

      // start timer ITs
      HAL_TIM_PWM_Init(timer);
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <AES_continuous_start+0xd4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 f9da 	bl	800497a <HAL_TIM_PWM_Init>
      HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_1);
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <AES_continuous_start+0xd4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 fa2d 	bl	8004a2c <HAL_TIM_PWM_Start_IT>
      HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_2);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <AES_continuous_start+0xd4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2104      	movs	r1, #4
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 fa27 	bl	8004a2c <HAL_TIM_PWM_Start_IT>
      HAL_TIM_Base_Start_IT(timer);
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <AES_continuous_start+0xd4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 f938 	bl	8004858 <HAL_TIM_Base_Start_IT>
      return 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <AES_continuous_start+0xc6>
    }
  }
  return 0; // Wrong configuration sequence
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08008ca0 	.word	0x08008ca0
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000230 	.word	0x20000230

08001600 <AES_encrypt>:

void AES_encrypt(uint8_t verbose) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b090      	sub	sp, #64	; 0x40
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  uint8_t buf[17];

  if (aes_op_context.key_configured == 0) {
 800160a:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <AES_encrypt+0xf4>)
 800160c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d107      	bne.n	8001624 <AES_encrypt+0x24>
    if (verbose)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d068      	beq.n	80016ec <AES_encrypt+0xec>
      send_answer("Error: unknown key\r\n", 20);
 800161a:	2114      	movs	r1, #20
 800161c:	4836      	ldr	r0, [pc, #216]	; (80016f8 <AES_encrypt+0xf8>)
 800161e:	f000 fbd3 	bl	8001dc8 <send_answer>
      send_answer(answer, 16);
      send_answer(answer+16, 16);
      send_answer(answer+32, 2);
    }
  }
}
 8001622:	e063      	b.n	80016ec <AES_encrypt+0xec>
    for(i = 0; i < 16;++i)
 8001624:	2300      	movs	r3, #0
 8001626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800162a:	e010      	b.n	800164e <AES_encrypt+0x4e>
      buf[i] = aes_op_context.plain[i];
 800162c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001630:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001634:	492f      	ldr	r1, [pc, #188]	; (80016f4 <AES_encrypt+0xf4>)
 8001636:	440a      	add	r2, r1
 8001638:	f892 20d3 	ldrb.w	r2, [r2, #211]	; 0xd3
 800163c:	3340      	adds	r3, #64	; 0x40
 800163e:	443b      	add	r3, r7
 8001640:	f803 2c14 	strb.w	r2, [r3, #-20]
    for(i = 0; i < 16;++i)
 8001644:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001648:	3301      	adds	r3, #1
 800164a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800164e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001652:	2b0f      	cmp	r3, #15
 8001654:	d9ea      	bls.n	800162c <AES_encrypt+0x2c>
    trigger_high(5);
 8001656:	2005      	movs	r0, #5
 8001658:	f000 fe30 	bl	80022bc <trigger_high>
    AES_ECB_encrypt(&(aes_op_context.aes_ctx_struct), buf);
 800165c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001660:	4619      	mov	r1, r3
 8001662:	4824      	ldr	r0, [pc, #144]	; (80016f4 <AES_encrypt+0xf4>)
 8001664:	f7ff fe9d 	bl	80013a2 <AES_ECB_encrypt>
    trigger_low(1);
 8001668:	2001      	movs	r0, #1
 800166a:	f000 fe39 	bl	80022e0 <trigger_low>
    for(i = 0; i < 16; ++i)
 800166e:	2300      	movs	r3, #0
 8001670:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001674:	e011      	b.n	800169a <AES_encrypt+0x9a>
        aes_op_context.cipher[i] = buf[i];
 8001676:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800167a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800167e:	3240      	adds	r2, #64	; 0x40
 8001680:	443a      	add	r2, r7
 8001682:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8001686:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <AES_encrypt+0xf4>)
 8001688:	4413      	add	r3, r2
 800168a:	460a      	mov	r2, r1
 800168c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
    for(i = 0; i < 16; ++i)
 8001690:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001694:	3301      	adds	r3, #1
 8001696:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800169a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	d9e9      	bls.n	8001676 <AES_encrypt+0x76>
    if (verbose) {
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d021      	beq.n	80016ec <AES_encrypt+0xec>
      bytes2hex(buf, 16, (uint8_t *) answer, 32);
 80016a8:	f107 0208 	add.w	r2, r7, #8
 80016ac:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80016b0:	2320      	movs	r3, #32
 80016b2:	2110      	movs	r1, #16
 80016b4:	f001 f88a 	bl	80027cc <bytes2hex>
      answer[32] = '\r';
 80016b8:	230d      	movs	r3, #13
 80016ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      answer[33] = '\n';
 80016be:	230a      	movs	r3, #10
 80016c0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      send_answer(answer, 16);
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	2110      	movs	r1, #16
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fb7c 	bl	8001dc8 <send_answer>
      send_answer(answer+16, 16);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	3310      	adds	r3, #16
 80016d6:	2110      	movs	r1, #16
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fb75 	bl	8001dc8 <send_answer>
      send_answer(answer+32, 2);
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	3320      	adds	r3, #32
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fb6e 	bl	8001dc8 <send_answer>
}
 80016ec:	bf00      	nop
 80016ee:	3740      	adds	r7, #64	; 0x40
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000000 	.word	0x20000000
 80016f8:	08008ce8 	.word	0x08008ce8

080016fc <AES_decrypt>:

void AES_decrypt(uint8_t verbose) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b090      	sub	sp, #64	; 0x40
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  uint8_t buf[16];

  if (aes_op_context.key_configured == 0) {
 8001706:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <AES_decrypt+0xf4>)
 8001708:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d107      	bne.n	8001720 <AES_decrypt+0x24>
    if (verbose)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d068      	beq.n	80017e8 <AES_decrypt+0xec>
      send_answer("Error: unknown key\r\n", 20);
 8001716:	2114      	movs	r1, #20
 8001718:	4836      	ldr	r0, [pc, #216]	; (80017f4 <AES_decrypt+0xf8>)
 800171a:	f000 fb55 	bl	8001dc8 <send_answer>
      send_answer(answer, 16);
      send_answer(answer+16, 16);
      send_answer(answer+32, 2);
    }
  }
}
 800171e:	e063      	b.n	80017e8 <AES_decrypt+0xec>
    for(i = 0; i < 16;++i)
 8001720:	2300      	movs	r3, #0
 8001722:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001726:	e010      	b.n	800174a <AES_decrypt+0x4e>
      buf[i] = aes_op_context.cipher[i];
 8001728:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800172c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001730:	492f      	ldr	r1, [pc, #188]	; (80017f0 <AES_decrypt+0xf4>)
 8001732:	440a      	add	r2, r1
 8001734:	f892 20e3 	ldrb.w	r2, [r2, #227]	; 0xe3
 8001738:	3340      	adds	r3, #64	; 0x40
 800173a:	443b      	add	r3, r7
 800173c:	f803 2c14 	strb.w	r2, [r3, #-20]
    for(i = 0; i < 16;++i)
 8001740:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001744:	3301      	adds	r3, #1
 8001746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800174a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800174e:	2b0f      	cmp	r3, #15
 8001750:	d9ea      	bls.n	8001728 <AES_decrypt+0x2c>
    trigger_high(5);
 8001752:	2005      	movs	r0, #5
 8001754:	f000 fdb2 	bl	80022bc <trigger_high>
    AES_ECB_decrypt(&(aes_op_context.aes_ctx_struct), buf);
 8001758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175c:	4619      	mov	r1, r3
 800175e:	4824      	ldr	r0, [pc, #144]	; (80017f0 <AES_decrypt+0xf4>)
 8001760:	f7ff fe2d 	bl	80013be <AES_ECB_decrypt>
    trigger_low(1);
 8001764:	2001      	movs	r0, #1
 8001766:	f000 fdbb 	bl	80022e0 <trigger_low>
    for(i = 0; i < 16; ++i)
 800176a:	2300      	movs	r3, #0
 800176c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001770:	e011      	b.n	8001796 <AES_decrypt+0x9a>
      aes_op_context.plain[i] = buf[i];
 8001772:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001776:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800177a:	3240      	adds	r2, #64	; 0x40
 800177c:	443a      	add	r2, r7
 800177e:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8001782:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <AES_decrypt+0xf4>)
 8001784:	4413      	add	r3, r2
 8001786:	460a      	mov	r2, r1
 8001788:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
    for(i = 0; i < 16; ++i)
 800178c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001790:	3301      	adds	r3, #1
 8001792:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001796:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800179a:	2b0f      	cmp	r3, #15
 800179c:	d9e9      	bls.n	8001772 <AES_decrypt+0x76>
    if (verbose) {
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d021      	beq.n	80017e8 <AES_decrypt+0xec>
      bytes2hex(buf, 16, (uint8_t *) answer, 32);
 80017a4:	f107 0208 	add.w	r2, r7, #8
 80017a8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80017ac:	2320      	movs	r3, #32
 80017ae:	2110      	movs	r1, #16
 80017b0:	f001 f80c 	bl	80027cc <bytes2hex>
      answer[32] = '\r';
 80017b4:	230d      	movs	r3, #13
 80017b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      answer[33] = '\n';
 80017ba:	230a      	movs	r3, #10
 80017bc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      send_answer(answer, 16);
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	2110      	movs	r1, #16
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fafe 	bl	8001dc8 <send_answer>
      send_answer(answer+16, 16);
 80017cc:	f107 0308 	add.w	r3, r7, #8
 80017d0:	3310      	adds	r3, #16
 80017d2:	2110      	movs	r1, #16
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 faf7 	bl	8001dc8 <send_answer>
      send_answer(answer+32, 2);
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	3320      	adds	r3, #32
 80017e0:	2102      	movs	r1, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 faf0 	bl	8001dc8 <send_answer>
}
 80017e8:	bf00      	nop
 80017ea:	3740      	adds	r7, #64	; 0x40
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	08008ce8 	.word	0x08008ce8

080017f8 <Init_Cmd_Handling>:

/* It is mandatory to call this function in main before any other function of this file is called.
 * It will associate the timer, uart and dma tx channel to the right pointers (to make it easier to port code to
 * other STM microcontrollers or to change which timer/uart is being used).
 **/
void Init_Cmd_Handling(TIM_HandleTypeDef *p_timer, UART_HandleTypeDef *p_uart, DMA_HandleTypeDef *p_dma_uart_tx) {
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  timer = p_timer;
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <Init_Cmd_Handling+0x2c>)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6013      	str	r3, [r2, #0]
  uart = p_uart;
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <Init_Cmd_Handling+0x30>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	6013      	str	r3, [r2, #0]
  dma_uart_tx = p_dma_uart_tx;
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <Init_Cmd_Handling+0x34>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000230 	.word	0x20000230
 8001828:	20000234 	.word	0x20000234
 800182c:	20000238 	.word	0x20000238

08001830 <Start_Cmd_Reception>:

void Start_Cmd_Reception(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(uart, Rx_data, RX_LEN);
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <Start_Cmd_Reception+0x18>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2240      	movs	r2, #64	; 0x40
 800183a:	4904      	ldr	r1, [pc, #16]	; (800184c <Start_Cmd_Reception+0x1c>)
 800183c:	4618      	mov	r0, r3
 800183e:	f004 f98c 	bl	8005b5a <HAL_UART_Receive_DMA>
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000234 	.word	0x20000234
 800184c:	20000188 	.word	0x20000188

08001850 <HAL_UART_RxCpltCallback>:

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  // Verify that the huart that triggered the IT is the right one
  if (huart->Instance == uart->Instance) {
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4bae      	ldr	r3, [pc, #696]	; (8001b18 <HAL_UART_RxCpltCallback+0x2c8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	f040 8153 	bne.w	8001b0e <HAL_UART_RxCpltCallback+0x2be>

    // Split cmd string into an array of strings
    split_cmds();
 8001868:	f000 facc 	bl	8001e04 <split_cmds>

    if (state == CONTINUOUS_IN_PROGRESS) {
 800186c:	4bab      	ldr	r3, [pc, #684]	; (8001b1c <HAL_UART_RxCpltCallback+0x2cc>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d129      	bne.n	80018ca <HAL_UART_RxCpltCallback+0x7a>

      if (cmd_is(0, "STOP", 4)) {
 8001876:	2204      	movs	r2, #4
 8001878:	49a9      	ldr	r1, [pc, #676]	; (8001b20 <HAL_UART_RxCpltCallback+0x2d0>)
 800187a:	2000      	movs	r0, #0
 800187c:	f000 f9e2 	bl	8001c44 <cmd_is>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d01c      	beq.n	80018c0 <HAL_UART_RxCpltCallback+0x70>
        // Stop timer interrupts and PWM output
        HAL_TIM_PWM_Stop_IT(timer, TIM_CHANNEL_2);
 8001886:	4ba7      	ldr	r3, [pc, #668]	; (8001b24 <HAL_UART_RxCpltCallback+0x2d4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2104      	movs	r1, #4
 800188c:	4618      	mov	r0, r3
 800188e:	f003 f9cb 	bl	8004c28 <HAL_TIM_PWM_Stop_IT>
        HAL_TIM_Base_Stop_IT(timer);
 8001892:	4ba4      	ldr	r3, [pc, #656]	; (8001b24 <HAL_UART_RxCpltCallback+0x2d4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f003 f840 	bl	800491c <HAL_TIM_Base_Stop_IT>

        sram_op_context.configured = 0;
 800189c:	4ba2      	ldr	r3, [pc, #648]	; (8001b28 <HAL_UART_RxCpltCallback+0x2d8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	755a      	strb	r2, [r3, #21]
        flash_op_context.configured = 0;
 80018a2:	4ba2      	ldr	r3, [pc, #648]	; (8001b2c <HAL_UART_RxCpltCallback+0x2dc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	749a      	strb	r2, [r3, #18]
        aes_op_context.configured = 0;
 80018a8:	4ba1      	ldr	r3, [pc, #644]	; (8001b30 <HAL_UART_RxCpltCallback+0x2e0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5

        state = IDLE;
 80018b0:	4b9a      	ldr	r3, [pc, #616]	; (8001b1c <HAL_UART_RxCpltCallback+0x2cc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
        send_answer("Continuous was stopped\r\n", 24);
 80018b6:	2118      	movs	r1, #24
 80018b8:	489e      	ldr	r0, [pc, #632]	; (8001b34 <HAL_UART_RxCpltCallback+0x2e4>)
 80018ba:	f000 fa85 	bl	8001dc8 <send_answer>
 80018be:	e11f      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
      }
      else {
        send_answer("Error: Continuous in progress\r\n", 31);
 80018c0:	211f      	movs	r1, #31
 80018c2:	489d      	ldr	r0, [pc, #628]	; (8001b38 <HAL_UART_RxCpltCallback+0x2e8>)
 80018c4:	f000 fa80 	bl	8001dc8 <send_answer>
 80018c8:	e11a      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
      }
    }

    else if (state == IDLE) {
 80018ca:	4b94      	ldr	r3, [pc, #592]	; (8001b1c <HAL_UART_RxCpltCallback+0x2cc>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f040 8115 	bne.w	8001b00 <HAL_UART_RxCpltCallback+0x2b0>

      if (cmd_is(0, "TIMER_PSC", 9)) {
 80018d6:	2209      	movs	r2, #9
 80018d8:	4998      	ldr	r1, [pc, #608]	; (8001b3c <HAL_UART_RxCpltCallback+0x2ec>)
 80018da:	2000      	movs	r0, #0
 80018dc:	f000 f9b2 	bl	8001c44 <cmd_is>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00d      	beq.n	8001902 <HAL_UART_RxCpltCallback+0xb2>
        // TIMER_PSC>psc
        uint16_t psc = atoi(cmds[1]);
 80018e6:	4b96      	ldr	r3, [pc, #600]	; (8001b40 <HAL_UART_RxCpltCallback+0x2f0>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f005 fa76 	bl	8006ddc <atoi>
 80018f0:	4603      	mov	r3, r0
 80018f2:	817b      	strh	r3, [r7, #10]
        Update_Timer_Prescaler(psc);
 80018f4:	897b      	ldrh	r3, [r7, #10]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f9c0 	bl	8001c7c <Update_Timer_Prescaler>
        send_ok();
 80018fc:	f000 faae 	bl	8001e5c <send_ok>
 8001900:	e0fe      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
      }
      else if (cmd_is(0, "TIMER_PWM_WIDTH", 15)) {
 8001902:	220f      	movs	r2, #15
 8001904:	498f      	ldr	r1, [pc, #572]	; (8001b44 <HAL_UART_RxCpltCallback+0x2f4>)
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f99c 	bl	8001c44 <cmd_is>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00d      	beq.n	800192e <HAL_UART_RxCpltCallback+0xde>
        // TIMER_PWM_WIDTH>width
        uint16_t width = atoi(cmds[1]);
 8001912:	4b8b      	ldr	r3, [pc, #556]	; (8001b40 <HAL_UART_RxCpltCallback+0x2f0>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4618      	mov	r0, r3
 8001918:	f005 fa60 	bl	8006ddc <atoi>
 800191c:	4603      	mov	r3, r0
 800191e:	81bb      	strh	r3, [r7, #12]
        Update_Timer_PwmWidth(width);
 8001920:	89bb      	ldrh	r3, [r7, #12]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f9e2 	bl	8001cec <Update_Timer_PwmWidth>
        send_ok();
 8001928:	f000 fa98 	bl	8001e5c <send_ok>
 800192c:	e0e8      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
      }
      else if (cmd_is(0, "TIMER_ARR", 9)) {
 800192e:	2209      	movs	r2, #9
 8001930:	4985      	ldr	r1, [pc, #532]	; (8001b48 <HAL_UART_RxCpltCallback+0x2f8>)
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f986 	bl	8001c44 <cmd_is>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00d      	beq.n	800195a <HAL_UART_RxCpltCallback+0x10a>
        // TIMER_ARR>arr
        uint16_t arr = atoi(cmds[1]);
 800193e:	4b80      	ldr	r3, [pc, #512]	; (8001b40 <HAL_UART_RxCpltCallback+0x2f0>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	f005 fa4a 	bl	8006ddc <atoi>
 8001948:	4603      	mov	r3, r0
 800194a:	81fb      	strh	r3, [r7, #14]
        Update_Timer_Autoreload(arr);
 800194c:	89fb      	ldrh	r3, [r7, #14]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fa02 	bl	8001d58 <Update_Timer_Autoreload>
        send_ok();
 8001954:	f000 fa82 	bl	8001e5c <send_ok>
 8001958:	e0d2      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
      }
      else if (cmd_is(0, "START", 5)) {
 800195a:	2205      	movs	r2, #5
 800195c:	497b      	ldr	r1, [pc, #492]	; (8001b4c <HAL_UART_RxCpltCallback+0x2fc>)
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f970 	bl	8001c44 <cmd_is>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d03e      	beq.n	80019e8 <HAL_UART_RxCpltCallback+0x198>
        if (cmd_is(1, "SRAM", 4)) {
 800196a:	2204      	movs	r2, #4
 800196c:	4978      	ldr	r1, [pc, #480]	; (8001b50 <HAL_UART_RxCpltCallback+0x300>)
 800196e:	2001      	movs	r0, #1
 8001970:	f000 f968 	bl	8001c44 <cmd_is>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_UART_RxCpltCallback+0x13e>
          SRAM_continuous_start();
 800197a:	f000 fcc3 	bl	8002304 <SRAM_continuous_start>
          state = CONTINUOUS_IN_PROGRESS;
 800197e:	4b67      	ldr	r3, [pc, #412]	; (8001b1c <HAL_UART_RxCpltCallback+0x2cc>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
          send_answer("Continuous started\r\n", 20);
 8001984:	2114      	movs	r1, #20
 8001986:	4873      	ldr	r0, [pc, #460]	; (8001b54 <HAL_UART_RxCpltCallback+0x304>)
 8001988:	f000 fa1e 	bl	8001dc8 <send_answer>
 800198c:	e0b8      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
        }
        else if (cmd_is(1, "FLASH", 5)) {
 800198e:	2205      	movs	r2, #5
 8001990:	4971      	ldr	r1, [pc, #452]	; (8001b58 <HAL_UART_RxCpltCallback+0x308>)
 8001992:	2001      	movs	r0, #1
 8001994:	f000 f956 	bl	8001c44 <cmd_is>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_UART_RxCpltCallback+0x162>
          FLASH_continuous_start();
 800199e:	f000 fa67 	bl	8001e70 <FLASH_continuous_start>
          state = CONTINUOUS_IN_PROGRESS;
 80019a2:	4b5e      	ldr	r3, [pc, #376]	; (8001b1c <HAL_UART_RxCpltCallback+0x2cc>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
          send_answer("Continuous started\r\n", 20);
 80019a8:	2114      	movs	r1, #20
 80019aa:	486a      	ldr	r0, [pc, #424]	; (8001b54 <HAL_UART_RxCpltCallback+0x304>)
 80019ac:	f000 fa0c 	bl	8001dc8 <send_answer>
 80019b0:	e0a6      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
        }
        else if (cmd_is(1, "AES", 3)) {
 80019b2:	2203      	movs	r2, #3
 80019b4:	4969      	ldr	r1, [pc, #420]	; (8001b5c <HAL_UART_RxCpltCallback+0x30c>)
 80019b6:	2001      	movs	r0, #1
 80019b8:	f000 f944 	bl	8001c44 <cmd_is>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 809e 	beq.w	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
          if (AES_continuous_start()) {
 80019c4:	f7ff fdb0 	bl	8001528 <AES_continuous_start>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d007      	beq.n	80019de <HAL_UART_RxCpltCallback+0x18e>
            state = CONTINUOUS_IN_PROGRESS;
 80019ce:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_UART_RxCpltCallback+0x2cc>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
            send_answer("Continuous started\r\n", 20);
 80019d4:	2114      	movs	r1, #20
 80019d6:	485f      	ldr	r0, [pc, #380]	; (8001b54 <HAL_UART_RxCpltCallback+0x304>)
 80019d8:	f000 f9f6 	bl	8001dc8 <send_answer>
 80019dc:	e090      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
          }
          else {
            send_answer("Could not start continuous aes\r\n", 32);
 80019de:	2120      	movs	r1, #32
 80019e0:	485f      	ldr	r0, [pc, #380]	; (8001b60 <HAL_UART_RxCpltCallback+0x310>)
 80019e2:	f000 f9f1 	bl	8001dc8 <send_answer>
 80019e6:	e08b      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
          }
        }
      }
      else if (cmd_is(0, "STOP", 4)) {
 80019e8:	2204      	movs	r2, #4
 80019ea:	494d      	ldr	r1, [pc, #308]	; (8001b20 <HAL_UART_RxCpltCallback+0x2d0>)
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 f929 	bl	8001c44 <cmd_is>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <HAL_UART_RxCpltCallback+0x1b2>
        send_answer("Error: Nothing to stop\r\n", 24);
 80019f8:	2118      	movs	r1, #24
 80019fa:	485a      	ldr	r0, [pc, #360]	; (8001b64 <HAL_UART_RxCpltCallback+0x314>)
 80019fc:	f000 f9e4 	bl	8001dc8 <send_answer>
 8001a00:	e07e      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
      }
      else if (cmd_is(0, "HANDSHAKE", 4)) {
 8001a02:	2204      	movs	r2, #4
 8001a04:	4958      	ldr	r1, [pc, #352]	; (8001b68 <HAL_UART_RxCpltCallback+0x318>)
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f91c 	bl	8001c44 <cmd_is>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HAL_UART_RxCpltCallback+0x1c8>
        send_ok();
 8001a12:	f000 fa23 	bl	8001e5c <send_ok>
 8001a16:	e073      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
      }
      else if (cmd_is(0, "trig", 4)) {
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4954      	ldr	r1, [pc, #336]	; (8001b6c <HAL_UART_RxCpltCallback+0x31c>)
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f000 f911 	bl	8001c44 <cmd_is>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_UART_RxCpltCallback+0x1ea>
        trigger_high(0);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 fc47 	bl	80022bc <trigger_high>
        trigger_low(0);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 fc56 	bl	80022e0 <trigger_low>
        send_ok();
 8001a34:	f000 fa12 	bl	8001e5c <send_ok>
 8001a38:	e062      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
      }

      else if (cmd_is(0, "ONESHOT", 7)) {
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	494c      	ldr	r1, [pc, #304]	; (8001b70 <HAL_UART_RxCpltCallback+0x320>)
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f900 	bl	8001c44 <cmd_is>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d01a      	beq.n	8001a80 <HAL_UART_RxCpltCallback+0x230>
        if (cmd_is(1, "SRAM", 4)) {
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4940      	ldr	r1, [pc, #256]	; (8001b50 <HAL_UART_RxCpltCallback+0x300>)
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f000 f8f8 	bl	8001c44 <cmd_is>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
          SRAM_oneshot();
 8001a5a:	f000 fcd9 	bl	8002410 <SRAM_oneshot>
 8001a5e:	e04f      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
        }
        else if (cmd_is(1, "FLASH", 5)) {
 8001a60:	2205      	movs	r2, #5
 8001a62:	493d      	ldr	r1, [pc, #244]	; (8001b58 <HAL_UART_RxCpltCallback+0x308>)
 8001a64:	2001      	movs	r0, #1
 8001a66:	f000 f8ed 	bl	8001c44 <cmd_is>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_UART_RxCpltCallback+0x226>
          FLASH_oneshot();
 8001a70:	f000 fa98 	bl	8001fa4 <FLASH_oneshot>
 8001a74:	e044      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
        }
        else {
          send_answer("Error: Unknown cmd\r\n", 20);
 8001a76:	2114      	movs	r1, #20
 8001a78:	483e      	ldr	r0, [pc, #248]	; (8001b74 <HAL_UART_RxCpltCallback+0x324>)
 8001a7a:	f000 f9a5 	bl	8001dc8 <send_answer>
 8001a7e:	e03f      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
        }
      }
      else if (cmd_is(0, "AES_SETUP", 9)) {
 8001a80:	2209      	movs	r2, #9
 8001a82:	493d      	ldr	r1, [pc, #244]	; (8001b78 <HAL_UART_RxCpltCallback+0x328>)
 8001a84:	2000      	movs	r0, #0
 8001a86:	f000 f8dd 	bl	8001c44 <cmd_is>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01b      	beq.n	8001ac8 <HAL_UART_RxCpltCallback+0x278>
        if (cmd_is(1, "KEY", 3))
 8001a90:	2203      	movs	r2, #3
 8001a92:	493a      	ldr	r1, [pc, #232]	; (8001b7c <HAL_UART_RxCpltCallback+0x32c>)
 8001a94:	2001      	movs	r0, #1
 8001a96:	f000 f8d5 	bl	8001c44 <cmd_is>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_UART_RxCpltCallback+0x258>
          AES_setup(KEY);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fc9b 	bl	80013dc <AES_setup>
 8001aa6:	e02b      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
        else if (cmd_is(1, "PLAIN", 5))
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	4935      	ldr	r1, [pc, #212]	; (8001b80 <HAL_UART_RxCpltCallback+0x330>)
 8001aac:	2001      	movs	r0, #1
 8001aae:	f000 f8c9 	bl	8001c44 <cmd_is>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_UART_RxCpltCallback+0x270>
          AES_setup(PLAIN);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f7ff fc8f 	bl	80013dc <AES_setup>
 8001abe:	e01f      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
        else
          AES_setup(CIPHER);
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f7ff fc8b 	bl	80013dc <AES_setup>
 8001ac6:	e01b      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
      }
      else if (cmd_is(0, "AES_ENCRYPT", 11)) {
 8001ac8:	220b      	movs	r2, #11
 8001aca:	492e      	ldr	r1, [pc, #184]	; (8001b84 <HAL_UART_RxCpltCallback+0x334>)
 8001acc:	2000      	movs	r0, #0
 8001ace:	f000 f8b9 	bl	8001c44 <cmd_is>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_UART_RxCpltCallback+0x290>
        AES_encrypt(1);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff fd91 	bl	8001600 <AES_encrypt>
 8001ade:	e00f      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
      }
      else if (cmd_is(0, "AES_DECRYPT", 11)) {
 8001ae0:	220b      	movs	r2, #11
 8001ae2:	4929      	ldr	r1, [pc, #164]	; (8001b88 <HAL_UART_RxCpltCallback+0x338>)
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f000 f8ad 	bl	8001c44 <cmd_is>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_UART_RxCpltCallback+0x2a8>
        AES_decrypt(1);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff fe03 	bl	80016fc <AES_decrypt>
 8001af6:	e003      	b.n	8001b00 <HAL_UART_RxCpltCallback+0x2b0>
      }
      else {
        send_answer("Error: Unknown cmd\r\n", 20);
 8001af8:	2114      	movs	r1, #20
 8001afa:	481e      	ldr	r0, [pc, #120]	; (8001b74 <HAL_UART_RxCpltCallback+0x324>)
 8001afc:	f000 f964 	bl	8001dc8 <send_answer>
      }
    }

    HAL_UART_Receive_DMA(uart, Rx_data, RX_LEN);
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_UART_RxCpltCallback+0x2c8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	4921      	ldr	r1, [pc, #132]	; (8001b8c <HAL_UART_RxCpltCallback+0x33c>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f004 f826 	bl	8005b5a <HAL_UART_Receive_DMA>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000234 	.word	0x20000234
 8001b1c:	20000184 	.word	0x20000184
 8001b20:	08008d00 	.word	0x08008d00
 8001b24:	20000230 	.word	0x20000230
 8001b28:	20000250 	.word	0x20000250
 8001b2c:	2000023c 	.word	0x2000023c
 8001b30:	20000000 	.word	0x20000000
 8001b34:	08008d08 	.word	0x08008d08
 8001b38:	08008d24 	.word	0x08008d24
 8001b3c:	08008d44 	.word	0x08008d44
 8001b40:	20000208 	.word	0x20000208
 8001b44:	08008d50 	.word	0x08008d50
 8001b48:	08008d60 	.word	0x08008d60
 8001b4c:	08008d6c 	.word	0x08008d6c
 8001b50:	08008d74 	.word	0x08008d74
 8001b54:	08008d7c 	.word	0x08008d7c
 8001b58:	08008d94 	.word	0x08008d94
 8001b5c:	08008d9c 	.word	0x08008d9c
 8001b60:	08008da0 	.word	0x08008da0
 8001b64:	08008dc4 	.word	0x08008dc4
 8001b68:	08008de0 	.word	0x08008de0
 8001b6c:	08008dec 	.word	0x08008dec
 8001b70:	08008df4 	.word	0x08008df4
 8001b74:	08008dfc 	.word	0x08008dfc
 8001b78:	08008e14 	.word	0x08008e14
 8001b7c:	08008e20 	.word	0x08008e20
 8001b80:	08008e24 	.word	0x08008e24
 8001b84:	08008e2c 	.word	0x08008e2c
 8001b88:	08008e38 	.word	0x08008e38
 8001b8c:	20000188 	.word	0x20000188

08001b90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if (htim->Instance == timer->Instance) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d142      	bne.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x9c>

    LED_ON();
 8001ba6:	f000 fb7d 	bl	80022a4 <LED_ON>

    if (sram_op_context.configured) {
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bac:	7d5b      	ldrb	r3, [r3, #21]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x3a>
      if (sram_op_context.is_write) {
 8001bb2:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x32>
        SRAM_write(0);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 fc9c 	bl	80024f8 <SRAM_write>
 8001bc0:	e02c      	b.n	8001c1c <HAL_TIM_PeriodElapsedCallback+0x8c>
      }
      else {
        SRAM_read(0);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f000 fd30 	bl	8002628 <SRAM_read>
 8001bc8:	e028      	b.n	8001c1c <HAL_TIM_PeriodElapsedCallback+0x8c>
      }
    }
    else if (flash_op_context.configured) {
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bcc:	7c9b      	ldrb	r3, [r3, #18]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d013      	beq.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x6a>
      if (flash_op_context.is_erase) {
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x52>
        FLASH_erase(0);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 fb3a 	bl	8002254 <FLASH_erase>
 8001be0:	e01c      	b.n	8001c1c <HAL_TIM_PeriodElapsedCallback+0x8c>
      }
      else {
        if (flash_op_context.is_write) {
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_TIM_PeriodElapsedCallback+0x62>
          FLASH_write(0);
 8001bea:	2000      	movs	r0, #0
 8001bec:	f000 fa5c 	bl	80020a8 <FLASH_write>
 8001bf0:	e014      	b.n	8001c1c <HAL_TIM_PeriodElapsedCallback+0x8c>
        }
        else {
          FLASH_read(0);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 fad0 	bl	8002198 <FLASH_read>
 8001bf8:	e010      	b.n	8001c1c <HAL_TIM_PeriodElapsedCallback+0x8c>
        }
      }
    }
    else if (aes_op_context.configured) {
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bfc:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00b      	beq.n	8001c1c <HAL_TIM_PeriodElapsedCallback+0x8c>
      if (aes_op_context.is_encrypt) {
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c06:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_TIM_PeriodElapsedCallback+0x86>
        AES_encrypt(0);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fcf6 	bl	8001600 <AES_encrypt>
 8001c14:	e002      	b.n	8001c1c <HAL_TIM_PeriodElapsedCallback+0x8c>
      }
      else {
        AES_decrypt(0);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff fd70 	bl	80016fc <AES_decrypt>
      }
    }

    while (htim->Instance->CNT < 5) ;
 8001c1c:	bf00      	nop
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d9fa      	bls.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x8e>
    LED_OFF();
 8001c28:	f000 fb30 	bl	800228c <LED_OFF>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000230 	.word	0x20000230
 8001c38:	20000250 	.word	0x20000250
 8001c3c:	2000023c 	.word	0x2000023c
 8001c40:	20000000 	.word	0x20000000

08001c44 <cmd_is>:

/* Compares cmds_from_UART[cmd_index] with cmd_ref and returns result */
int cmd_is(uint8_t cmd_index, const char *cmd_ref, size_t len) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	73fb      	strb	r3, [r7, #15]
  return (0 == strncmp((const char*)cmds[cmd_index], cmd_ref, len));
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <cmd_is+0x34>)
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f005 f999 	bl	8006f96 <strncmp>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf0c      	ite	eq
 8001c6a:	2301      	moveq	r3, #1
 8001c6c:	2300      	movne	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000208 	.word	0x20000208

08001c7c <Update_Timer_Prescaler>:

/* Updates the prescaler of the timer used for continuous mode */
void Update_Timer_Prescaler(uint16_t prescaler) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	80fb      	strh	r3, [r7, #6]
  // Disables ITs in case they were still enabled
  HAL_TIM_PWM_Stop_IT(timer, TIM_CHANNEL_2);
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <Update_Timer_Prescaler+0x6c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 ffcb 	bl	8004c28 <HAL_TIM_PWM_Stop_IT>
  HAL_TIM_Base_Stop_IT(timer);
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <Update_Timer_Prescaler+0x6c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 fe40 	bl	800491c <HAL_TIM_Base_Stop_IT>

  timer->Init.Prescaler = prescaler;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <Update_Timer_Prescaler+0x6c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	88fa      	ldrh	r2, [r7, #6]
 8001ca2:	605a      	str	r2, [r3, #4]
  timer->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <Update_Timer_Prescaler+0x6c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  timer->Init.Period = timer->Instance->ARR;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <Update_Timer_Prescaler+0x6c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <Update_Timer_Prescaler+0x6c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cb8:	60da      	str	r2, [r3, #12]
  timer->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <Update_Timer_Prescaler+0x6c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  timer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <Update_Timer_Prescaler+0x6c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(timer) != HAL_OK)
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <Update_Timer_Prescaler+0x6c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fd72 	bl	80047b8 <HAL_TIM_Base_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <Update_Timer_Prescaler+0x62>
  {
    Error_Handler();
 8001cda:	f000 ff41 	bl	8002b60 <Error_Handler>
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000230 	.word	0x20000230

08001cec <Update_Timer_PwmWidth>:

void Update_Timer_PwmWidth(uint16_t pulsewidth) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
  // Disables ITs in case they were still enabled
  HAL_TIM_PWM_Stop_IT(timer, TIM_CHANNEL_2);
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <Update_Timer_PwmWidth+0x68>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 ff93 	bl	8004c28 <HAL_TIM_PWM_Stop_IT>
  HAL_TIM_Base_Stop_IT(timer);
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <Update_Timer_PwmWidth+0x68>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 fe08 	bl	800491c <HAL_TIM_Base_Stop_IT>

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
 8001d1c:	615a      	str	r2, [r3, #20]
 8001d1e:	619a      	str	r2, [r3, #24]

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d20:	2360      	movs	r3, #96	; 0x60
 8001d22:	60fb      	str	r3, [r7, #12]
  // timer counter value after which the pwm output falls to 0 (ex: if autoreload=10 and pulsewidth=5 -> 50% dutycycle)
  sConfigOC.Pulse = pulsewidth;
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) // Timer Channel 2
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <Update_Timer_PwmWidth+0x68>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f107 010c 	add.w	r1, r7, #12
 8001d38:	2204      	movs	r2, #4
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 f92e 	bl	8004f9c <HAL_TIM_PWM_ConfigChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <Update_Timer_PwmWidth+0x5e>
  {
    Error_Handler();
 8001d46:	f000 ff0b 	bl	8002b60 <Error_Handler>
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	; 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000230 	.word	0x20000230

08001d58 <Update_Timer_Autoreload>:

void Update_Timer_Autoreload(uint16_t autoreload) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
  // Disables ITs in case they were still enabled
  HAL_TIM_PWM_Stop_IT(timer, TIM_CHANNEL_2);
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <Update_Timer_Autoreload+0x6c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2104      	movs	r1, #4
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 ff5d 	bl	8004c28 <HAL_TIM_PWM_Stop_IT>
  HAL_TIM_Base_Stop_IT(timer);
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <Update_Timer_Autoreload+0x6c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f002 fdd2 	bl	800491c <HAL_TIM_Base_Stop_IT>

  timer->Init.Prescaler = timer->Instance->PSC;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <Update_Timer_Autoreload+0x6c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <Update_Timer_Autoreload+0x6c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d84:	605a      	str	r2, [r3, #4]
  timer->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <Update_Timer_Autoreload+0x6c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  timer->Init.Period = autoreload;
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <Update_Timer_Autoreload+0x6c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	60da      	str	r2, [r3, #12]
  timer->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <Update_Timer_Autoreload+0x6c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  timer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <Update_Timer_Autoreload+0x6c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(timer) != HAL_OK)
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <Update_Timer_Autoreload+0x6c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 fd04 	bl	80047b8 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <Update_Timer_Autoreload+0x62>
  {
    Error_Handler();
 8001db6:	f000 fed3 	bl	8002b60 <Error_Handler>
  }
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000230 	.word	0x20000230

08001dc8 <send_answer>:
  ******************************************************************************
*/

#include <com_utils.h>

void send_answer(const char* msg, size_t len) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  //while(HAL_DMA_GetState(&hdma_usart2_tx) != HAL_DMA_STATE_READY) ;
  while(HAL_UART_GetState(uart) != HAL_UART_STATE_READY) ;
 8001dd2:	bf00      	nop
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <send_answer+0x38>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 f9a7 	bl	800612c <HAL_UART_GetState>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d1f7      	bne.n	8001dd4 <send_answer+0xc>
  // Actually does not use DMA TX request as of now because of
  // errors when chaining DMA UART TX requests.
  HAL_UART_Transmit(uart, (const uint8_t *) msg, len, HAL_MAX_DELAY);
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <send_answer+0x38>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	f003 fe20 	bl	8005a36 <HAL_UART_Transmit>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000234 	.word	0x20000234

08001e04 <split_cmds>:

void split_cmds(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
	int i = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
	strcpy((char *) Rx_data_copy, (char *) Rx_data);  // leave RX_data intact
 8001e0e:	490f      	ldr	r1, [pc, #60]	; (8001e4c <split_cmds+0x48>)
 8001e10:	480f      	ldr	r0, [pc, #60]	; (8001e50 <split_cmds+0x4c>)
 8001e12:	f005 f8b8 	bl	8006f86 <strcpy>
	char *p = strtok ((char *) Rx_data_copy, ">");
 8001e16:	490f      	ldr	r1, [pc, #60]	; (8001e54 <split_cmds+0x50>)
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <split_cmds+0x4c>)
 8001e1a:	f005 f8d1 	bl	8006fc0 <strtok>
 8001e1e:	6038      	str	r0, [r7, #0]

	while (p != NULL)
 8001e20:	e00b      	b.n	8001e3a <split_cmds+0x36>
	{
		cmds[i++] = p;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	490b      	ldr	r1, [pc, #44]	; (8001e58 <split_cmds+0x54>)
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		p = strtok (NULL, ">");
 8001e30:	4908      	ldr	r1, [pc, #32]	; (8001e54 <split_cmds+0x50>)
 8001e32:	2000      	movs	r0, #0
 8001e34:	f005 f8c4 	bl	8006fc0 <strtok>
 8001e38:	6038      	str	r0, [r7, #0]
	while (p != NULL)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <split_cmds+0x1e>
	}
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000188 	.word	0x20000188
 8001e50:	200001c8 	.word	0x200001c8
 8001e54:	08008e44 	.word	0x08008e44
 8001e58:	20000208 	.word	0x20000208

08001e5c <send_ok>:

void send_ok(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  send_answer("OK\r\n", 4);
 8001e60:	2104      	movs	r1, #4
 8001e62:	4802      	ldr	r0, [pc, #8]	; (8001e6c <send_ok+0x10>)
 8001e64:	f7ff ffb0 	bl	8001dc8 <send_answer>
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	08008e48 	.word	0x08008e48

08001e70 <FLASH_continuous_start>:

#include "flash_operation.h"

struct FLASH_op_context flash_op_context = {0, 0, 0, 0, 0, 0, 0};

void FLASH_continuous_start(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  // configure context structure
  if (cmd_is(2, "erase", 5)) {
 8001e76:	2205      	movs	r2, #5
 8001e78:	4940      	ldr	r1, [pc, #256]	; (8001f7c <FLASH_continuous_start+0x10c>)
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	f7ff fee2 	bl	8001c44 <cmd_is>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <FLASH_continuous_start+0x30>
    // START>FLASH>erase>sector
    flash_op_context.is_erase = 1;
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	705a      	strb	r2, [r3, #1]

    flash_op_context.sector = atoi(cmds[3]);
 8001e8c:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <FLASH_continuous_start+0x114>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f004 ffa3 	bl	8006ddc <atoi>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001e9c:	741a      	strb	r2, [r3, #16]
 8001e9e:	e050      	b.n	8001f42 <FLASH_continuous_start+0xd2>
  }
  else {
    if (cmd_is(3, "trig", 4)) {
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	4939      	ldr	r1, [pc, #228]	; (8001f88 <FLASH_continuous_start+0x118>)
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f7ff fecd 	bl	8001c44 <cmd_is>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <FLASH_continuous_start+0x48>
      flash_op_context.do_trig = 1;
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	745a      	strb	r2, [r3, #17]
 8001eb6:	e002      	b.n	8001ebe <FLASH_continuous_start+0x4e>
    }
    else {
      flash_op_context.do_trig = 0;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	745a      	strb	r2, [r3, #17]
    }

    char *addr_str = cmds[4];
 8001ebe:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <FLASH_continuous_start+0x114>)
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	607b      	str	r3, [r7, #4]
    str2num(addr_str, (uint32_t *) &(flash_op_context.addr), "%8x");
 8001ec4:	4a31      	ldr	r2, [pc, #196]	; (8001f8c <FLASH_continuous_start+0x11c>)
 8001ec6:	4932      	ldr	r1, [pc, #200]	; (8001f90 <FLASH_continuous_start+0x120>)
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fc2d 	bl	8002728 <str2num>

    if (cmd_is(2, "write", 5)) {
 8001ece:	2205      	movs	r2, #5
 8001ed0:	4930      	ldr	r1, [pc, #192]	; (8001f94 <FLASH_continuous_start+0x124>)
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f7ff feb6 	bl	8001c44 <cmd_is>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d017      	beq.n	8001f0e <FLASH_continuous_start+0x9e>
      // START>FLASH>write>trig>0xaddr>0xdata>span
      flash_op_context.is_write = 1;
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
      flash_op_context.is_erase = 0;
 8001ee4:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	705a      	strb	r2, [r3, #1]

      char *data_str = cmds[5];
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <FLASH_continuous_start+0x114>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	603b      	str	r3, [r7, #0]
      str2num(data_str, &(flash_op_context.data), "%8x");
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <FLASH_continuous_start+0x11c>)
 8001ef2:	4929      	ldr	r1, [pc, #164]	; (8001f98 <FLASH_continuous_start+0x128>)
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f000 fc17 	bl	8002728 <str2num>
      flash_op_context.span = atoi(cmds[5]);
 8001efa:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <FLASH_continuous_start+0x114>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 ff6c 	bl	8006ddc <atoi>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	e019      	b.n	8001f42 <FLASH_continuous_start+0xd2>
    }
    else if (cmd_is(2, "read", 4)) {
 8001f0e:	2204      	movs	r2, #4
 8001f10:	4922      	ldr	r1, [pc, #136]	; (8001f9c <FLASH_continuous_start+0x12c>)
 8001f12:	2002      	movs	r0, #2
 8001f14:	f7ff fe96 	bl	8001c44 <cmd_is>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d011      	beq.n	8001f42 <FLASH_continuous_start+0xd2>
      // START>FLASH>read>trig>0xaddr>span
      flash_op_context.is_write = 0;
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
      flash_op_context.is_erase = 0;
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	705a      	strb	r2, [r3, #1]

      flash_op_context.data = 0;
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
      flash_op_context.span = atoi(cmds[5]);
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <FLASH_continuous_start+0x114>)
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f004 ff51 	bl	8006ddc <atoi>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001f40:	605a      	str	r2, [r3, #4]
    }
  }

  flash_op_context.configured = 1;
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <FLASH_continuous_start+0x110>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	749a      	strb	r2, [r3, #18]

  // start timer ITs
  HAL_TIM_PWM_Init(timer);
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <FLASH_continuous_start+0x130>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fd14 	bl	800497a <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_1);
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <FLASH_continuous_start+0x130>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 fd67 	bl	8004a2c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_2);
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <FLASH_continuous_start+0x130>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2104      	movs	r1, #4
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 fd61 	bl	8004a2c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(timer);
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <FLASH_continuous_start+0x130>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fc72 	bl	8004858 <HAL_TIM_Base_Start_IT>
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	08008e68 	.word	0x08008e68
 8001f80:	2000023c 	.word	0x2000023c
 8001f84:	20000208 	.word	0x20000208
 8001f88:	08008e70 	.word	0x08008e70
 8001f8c:	08008e78 	.word	0x08008e78
 8001f90:	20000248 	.word	0x20000248
 8001f94:	08008e7c 	.word	0x08008e7c
 8001f98:	20000244 	.word	0x20000244
 8001f9c:	08008e84 	.word	0x08008e84
 8001fa0:	20000230 	.word	0x20000230

08001fa4 <FLASH_oneshot>:

void FLASH_oneshot(void) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
  // configure context structure
  flash_op_context.configured = 1;
 8001faa:	4b36      	ldr	r3, [pc, #216]	; (8002084 <FLASH_oneshot+0xe0>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	749a      	strb	r2, [r3, #18]

  if (cmd_is(2, "erase", 5)) {
 8001fb0:	2205      	movs	r2, #5
 8001fb2:	4935      	ldr	r1, [pc, #212]	; (8002088 <FLASH_oneshot+0xe4>)
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f7ff fe45 	bl	8001c44 <cmd_is>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <FLASH_oneshot+0x36>
    // ONESHOT>FLASH>erase>sector
    flash_op_context.sector = atoi(cmds[3]);
 8001fc0:	4b32      	ldr	r3, [pc, #200]	; (800208c <FLASH_oneshot+0xe8>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f004 ff09 	bl	8006ddc <atoi>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <FLASH_oneshot+0xe0>)
 8001fd0:	741a      	strb	r2, [r3, #16]

    FLASH_erase(1);
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f000 f93e 	bl	8002254 <FLASH_erase>
      flash_op_context.span = atoi(cmds[5]);

      FLASH_read(1);
    }
  }
}
 8001fd8:	e050      	b.n	800207c <FLASH_oneshot+0xd8>
    if (cmd_is(3, "trig", 4)) {
 8001fda:	2204      	movs	r2, #4
 8001fdc:	492c      	ldr	r1, [pc, #176]	; (8002090 <FLASH_oneshot+0xec>)
 8001fde:	2003      	movs	r0, #3
 8001fe0:	f7ff fe30 	bl	8001c44 <cmd_is>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <FLASH_oneshot+0x4e>
      flash_op_context.do_trig = 1;
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <FLASH_oneshot+0xe0>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	745a      	strb	r2, [r3, #17]
 8001ff0:	e002      	b.n	8001ff8 <FLASH_oneshot+0x54>
      flash_op_context.do_trig = 0;
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <FLASH_oneshot+0xe0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	745a      	strb	r2, [r3, #17]
    char *addr_str = cmds[4];
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <FLASH_oneshot+0xe8>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	607b      	str	r3, [r7, #4]
    str2num(addr_str, (uint32_t *) &(flash_op_context.addr), "%8x");
 8001ffe:	4a25      	ldr	r2, [pc, #148]	; (8002094 <FLASH_oneshot+0xf0>)
 8002000:	4925      	ldr	r1, [pc, #148]	; (8002098 <FLASH_oneshot+0xf4>)
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fb90 	bl	8002728 <str2num>
    if (cmd_is(2, "write", 5)) {
 8002008:	2205      	movs	r2, #5
 800200a:	4924      	ldr	r1, [pc, #144]	; (800209c <FLASH_oneshot+0xf8>)
 800200c:	2002      	movs	r0, #2
 800200e:	f7ff fe19 	bl	8001c44 <cmd_is>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d017      	beq.n	8002048 <FLASH_oneshot+0xa4>
      flash_op_context.is_write = 1;
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <FLASH_oneshot+0xe0>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
      char *data_str = cmds[5];
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <FLASH_oneshot+0xe8>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	603b      	str	r3, [r7, #0]
      str2num(data_str, &(flash_op_context.data), "%8x");
 8002024:	4a1b      	ldr	r2, [pc, #108]	; (8002094 <FLASH_oneshot+0xf0>)
 8002026:	491e      	ldr	r1, [pc, #120]	; (80020a0 <FLASH_oneshot+0xfc>)
 8002028:	6838      	ldr	r0, [r7, #0]
 800202a:	f000 fb7d 	bl	8002728 <str2num>
      flash_op_context.span = atoi(cmds[6]);
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <FLASH_oneshot+0xe8>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fed2 	bl	8006ddc <atoi>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <FLASH_oneshot+0xe0>)
 800203e:	605a      	str	r2, [r3, #4]
      FLASH_write(1);
 8002040:	2001      	movs	r0, #1
 8002042:	f000 f831 	bl	80020a8 <FLASH_write>
}
 8002046:	e019      	b.n	800207c <FLASH_oneshot+0xd8>
    else if (cmd_is(2, "read", 4)) {
 8002048:	2204      	movs	r2, #4
 800204a:	4916      	ldr	r1, [pc, #88]	; (80020a4 <FLASH_oneshot+0x100>)
 800204c:	2002      	movs	r0, #2
 800204e:	f7ff fdf9 	bl	8001c44 <cmd_is>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d011      	beq.n	800207c <FLASH_oneshot+0xd8>
      flash_op_context.is_write = 0;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <FLASH_oneshot+0xe0>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
      flash_op_context.data = 0;
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <FLASH_oneshot+0xe0>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
      flash_op_context.span = atoi(cmds[5]);
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <FLASH_oneshot+0xe8>)
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	4618      	mov	r0, r3
 800206a:	f004 feb7 	bl	8006ddc <atoi>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <FLASH_oneshot+0xe0>)
 8002074:	605a      	str	r2, [r3, #4]
      FLASH_read(1);
 8002076:	2001      	movs	r0, #1
 8002078:	f000 f88e 	bl	8002198 <FLASH_read>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	2000023c 	.word	0x2000023c
 8002088:	08008e68 	.word	0x08008e68
 800208c:	20000208 	.word	0x20000208
 8002090:	08008e70 	.word	0x08008e70
 8002094:	08008e78 	.word	0x08008e78
 8002098:	20000248 	.word	0x20000248
 800209c:	08008e7c 	.word	0x08008e7c
 80020a0:	20000244 	.word	0x20000244
 80020a4:	08008e84 	.word	0x08008e84

080020a8 <FLASH_write>:

// ====================================================================

void FLASH_write(uint8_t verbose) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if (flash_op_context.configured == 0) {
 80020b2:	4b30      	ldr	r3, [pc, #192]	; (8002174 <FLASH_write+0xcc>)
 80020b4:	7c9b      	ldrb	r3, [r3, #18]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d107      	bne.n	80020ca <FLASH_write+0x22>
    if (verbose)
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d055      	beq.n	800216c <FLASH_write+0xc4>
      send_answer("Error: undefined flash op context\r\n", 34);
 80020c0:	2122      	movs	r1, #34	; 0x22
 80020c2:	482d      	ldr	r0, [pc, #180]	; (8002178 <FLASH_write+0xd0>)
 80020c4:	f7ff fe80 	bl	8001dc8 <send_answer>

    flash_op_context.configured = 0; // clear context //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (verbose)
      send_ok();
  }
}
 80020c8:	e050      	b.n	800216c <FLASH_write+0xc4>
    int sector = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
    if (flash_op_context.addr > (uint32_t *) SECTOR_7) {
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <FLASH_write+0xcc>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	4a2a      	ldr	r2, [pc, #168]	; (800217c <FLASH_write+0xd4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d902      	bls.n	80020de <FLASH_write+0x36>
      sector = 7;
 80020d8:	2307      	movs	r3, #7
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e02e      	b.n	800213c <FLASH_write+0x94>
    else if (flash_op_context.addr > (uint32_t *) SECTOR_6) {
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <FLASH_write+0xcc>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4a27      	ldr	r2, [pc, #156]	; (8002180 <FLASH_write+0xd8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d902      	bls.n	80020ee <FLASH_write+0x46>
      sector = 6;
 80020e8:	2306      	movs	r3, #6
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e026      	b.n	800213c <FLASH_write+0x94>
    else if (flash_op_context.addr > (uint32_t *) SECTOR_5) {
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <FLASH_write+0xcc>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4a24      	ldr	r2, [pc, #144]	; (8002184 <FLASH_write+0xdc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d902      	bls.n	80020fe <FLASH_write+0x56>
      sector = 5;
 80020f8:	2305      	movs	r3, #5
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e01e      	b.n	800213c <FLASH_write+0x94>
    else if (flash_op_context.addr > (uint32_t *) SECTOR_4) {
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <FLASH_write+0xcc>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a21      	ldr	r2, [pc, #132]	; (8002188 <FLASH_write+0xe0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d902      	bls.n	800210e <FLASH_write+0x66>
      sector = 4;
 8002108:	2304      	movs	r3, #4
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e016      	b.n	800213c <FLASH_write+0x94>
    else if (flash_op_context.addr > (uint32_t *) SECTOR_3) {
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <FLASH_write+0xcc>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	4a1e      	ldr	r2, [pc, #120]	; (800218c <FLASH_write+0xe4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d902      	bls.n	800211e <FLASH_write+0x76>
      sector = 3;
 8002118:	2303      	movs	r3, #3
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e00e      	b.n	800213c <FLASH_write+0x94>
    else if (flash_op_context.addr > (uint32_t *) SECTOR_2) {
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <FLASH_write+0xcc>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <FLASH_write+0xe8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d902      	bls.n	800212e <FLASH_write+0x86>
      sector = 2;
 8002128:	2302      	movs	r3, #2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e006      	b.n	800213c <FLASH_write+0x94>
    else if (flash_op_context.addr > (uint32_t *) SECTOR_1) {
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <FLASH_write+0xcc>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a18      	ldr	r2, [pc, #96]	; (8002194 <FLASH_write+0xec>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <FLASH_write+0x94>
      sector = 1;
 8002138:	2301      	movs	r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
    FPEC_SectorErase(sector);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fa27 	bl	8000594 <FPEC_SectorErase>
    FPEC_Program(flash_op_context.addr, (uint32_t) flash_op_context.data, flash_op_context.do_trig, flash_op_context.span);
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <FLASH_write+0xcc>)
 8002148:	68d8      	ldr	r0, [r3, #12]
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <FLASH_write+0xcc>)
 800214c:	6899      	ldr	r1, [r3, #8]
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <FLASH_write+0xcc>)
 8002150:	7c5b      	ldrb	r3, [r3, #17]
 8002152:	b29a      	uxth	r2, r3
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <FLASH_write+0xcc>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f7fe fa2a 	bl	80005b0 <FPEC_Program>
    flash_op_context.configured = 0; // clear context //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <FLASH_write+0xcc>)
 800215e:	2200      	movs	r2, #0
 8002160:	749a      	strb	r2, [r3, #18]
    if (verbose)
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <FLASH_write+0xc4>
      send_ok();
 8002168:	f7ff fe78 	bl	8001e5c <send_ok>
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000023c 	.word	0x2000023c
 8002178:	08008e8c 	.word	0x08008e8c
 800217c:	08060000 	.word	0x08060000
 8002180:	08040000 	.word	0x08040000
 8002184:	08020000 	.word	0x08020000
 8002188:	08010000 	.word	0x08010000
 800218c:	0800c000 	.word	0x0800c000
 8002190:	08008000 	.word	0x08008000
 8002194:	08004000 	.word	0x08004000

08002198 <FLASH_read>:

void FLASH_read(uint8_t verbose) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if (flash_op_context.configured == 0) {
 80021a2:	4b29      	ldr	r3, [pc, #164]	; (8002248 <FLASH_read+0xb0>)
 80021a4:	7c9b      	ldrb	r3, [r3, #18]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d107      	bne.n	80021ba <FLASH_read+0x22>
    if (verbose)
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d046      	beq.n	800223e <FLASH_read+0xa6>
      send_answer("Error: undefined flash op context\r\n", 34);
 80021b0:	2122      	movs	r1, #34	; 0x22
 80021b2:	4826      	ldr	r0, [pc, #152]	; (800224c <FLASH_read+0xb4>)
 80021b4:	f7ff fe08 	bl	8001dc8 <send_answer>

    // Send the value read back to UART
    if (verbose)
      send_answer(read_value_str, sizeof(read_value_str));
  }
}
 80021b8:	e041      	b.n	800223e <FLASH_read+0xa6>
    if (flash_op_context.do_trig)
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <FLASH_read+0xb0>)
 80021bc:	7c5b      	ldrb	r3, [r3, #17]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d019      	beq.n	80021f6 <FLASH_read+0x5e>
      trigger_high(2);
 80021c2:	2002      	movs	r0, #2
 80021c4:	f000 f87a 	bl	80022bc <trigger_high>
      for (i = 0; i < flash_op_context.span; i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	e00a      	b.n	80021e4 <FLASH_read+0x4c>
        flash_op_context.data = *((volatile uint32_t*) (flash_op_context.addr + 4 * i));
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <FLASH_read+0xb0>)
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	4413      	add	r3, r2
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <FLASH_read+0xb0>)
 80021dc:	6093      	str	r3, [r2, #8]
      for (i = 0; i < flash_op_context.span; i++)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3301      	adds	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <FLASH_read+0xb0>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3ef      	bcc.n	80021ce <FLASH_read+0x36>
      trigger_low(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 f876 	bl	80022e0 <trigger_low>
 80021f4:	e012      	b.n	800221c <FLASH_read+0x84>
      for (i = 0; i < flash_op_context.span; i++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	e00a      	b.n	8002212 <FLASH_read+0x7a>
        flash_op_context.data = *((volatile uint32_t*) (flash_op_context.addr + 4 * i));
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <FLASH_read+0xb0>)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	4413      	add	r3, r2
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <FLASH_read+0xb0>)
 800220a:	6093      	str	r3, [r2, #8]
      for (i = 0; i < flash_op_context.span; i++)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	3301      	adds	r3, #1
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <FLASH_read+0xb0>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	429a      	cmp	r2, r3
 800221a:	d3ef      	bcc.n	80021fc <FLASH_read+0x64>
    sprintf(read_value_str, "%08X\r\n", (unsigned int) flash_op_context.data);
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <FLASH_read+0xb0>)
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	490a      	ldr	r1, [pc, #40]	; (8002250 <FLASH_read+0xb8>)
 8002226:	4618      	mov	r0, r3
 8002228:	f004 fe1c 	bl	8006e64 <siprintf>
    if (verbose)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <FLASH_read+0xa6>
      send_answer(read_value_str, sizeof(read_value_str));
 8002232:	f107 030c 	add.w	r3, r7, #12
 8002236:	210b      	movs	r1, #11
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fdc5 	bl	8001dc8 <send_answer>
}
 800223e:	bf00      	nop
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000023c 	.word	0x2000023c
 800224c:	08008e8c 	.word	0x08008e8c
 8002250:	08008eb0 	.word	0x08008eb0

08002254 <FLASH_erase>:

void FLASH_erase(uint8_t verbose) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  // sector in [0; 7]
  if (7 < flash_op_context.sector) {
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <FLASH_erase+0x34>)
 8002260:	7c1b      	ldrb	r3, [r3, #16]
 8002262:	2b07      	cmp	r3, #7
 8002264:	d902      	bls.n	800226c <FLASH_erase+0x18>
    flash_op_context.sector = 7;
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <FLASH_erase+0x34>)
 8002268:	2207      	movs	r2, #7
 800226a:	741a      	strb	r2, [r3, #16]
  }

  FPEC_SectorErase(flash_op_context.sector);
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <FLASH_erase+0x34>)
 800226e:	7c1b      	ldrb	r3, [r3, #16]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f98f 	bl	8000594 <FPEC_SectorErase>

  if (verbose)
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <FLASH_erase+0x2c>
    send_ok();
 800227c:	f7ff fdee 	bl	8001e5c <send_ok>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000023c 	.word	0x2000023c

0800228c <LED_OFF>:
/**
  * @brief  This function is responsible for resetting PIN3 (LED).
  * @author Raphael Viera (raphael.viera@emse.fr)
  */
void LED_OFF(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002290:	2200      	movs	r2, #0
 8002292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002296:	4802      	ldr	r0, [pc, #8]	; (80022a0 <LED_OFF+0x14>)
 8002298:	f001 fe1c 	bl	8003ed4 <HAL_GPIO_WritePin>
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40020400 	.word	0x40020400

080022a4 <LED_ON>:
/**
  * @brief  This function is responsible for setting PIN3 (LED).
  * @author Raphael Viera (raphael.viera@emse.fr)
  */
void LED_ON(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80022a8:	2201      	movs	r2, #1
 80022aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ae:	4802      	ldr	r0, [pc, #8]	; (80022b8 <LED_ON+0x14>)
 80022b0:	f001 fe10 	bl	8003ed4 <HAL_GPIO_WritePin>
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40020400 	.word	0x40020400

080022bc <trigger_high>:
/**
  * @brief  This function is responsible for setting the trigger.
  * @author Raphael Viera (raphael.viera@emse.fr)
  */
void trigger_high(uint32_t n_nops)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TRIG_OUT0_GPIO_Port, TRIG_OUT0_Pin, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2120      	movs	r1, #32
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <trigger_high+0x20>)
 80022ca:	f001 fe03 	bl	8003ed4 <HAL_GPIO_WritePin>
    do_NOP(n_nops);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa14 	bl	80026fc <do_NOP>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40020400 	.word	0x40020400

080022e0 <trigger_low>:
/**
  * @brief  This function is responsible for resetting the trigger.
  * @author Raphael Viera (raphael.viera@emse.fr)
  */
void trigger_low(uint32_t n_nops)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    do_NOP(n_nops);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 fa07 	bl	80026fc <do_NOP>
    HAL_GPIO_WritePin(TRIG_OUT0_GPIO_Port, TRIG_OUT0_Pin, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2120      	movs	r1, #32
 80022f2:	4803      	ldr	r0, [pc, #12]	; (8002300 <trigger_low+0x20>)
 80022f4:	f001 fdee 	bl	8003ed4 <HAL_GPIO_WritePin>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40020400 	.word	0x40020400

08002304 <SRAM_continuous_start>:

#include "sram_operation.h"

struct SRAM_op_context sram_op_context = {0, 0, 0, 0, 0, 0, 0};

void SRAM_continuous_start(void) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
  // configure context structure
  if (cmd_is(3, "trig", 4)) {
 800230a:	2204      	movs	r2, #4
 800230c:	4937      	ldr	r1, [pc, #220]	; (80023ec <SRAM_continuous_start+0xe8>)
 800230e:	2003      	movs	r0, #3
 8002310:	f7ff fc98 	bl	8001c44 <cmd_is>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <SRAM_continuous_start+0x1e>
    sram_op_context.do_trig = 1;
 800231a:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <SRAM_continuous_start+0xec>)
 800231c:	2201      	movs	r2, #1
 800231e:	751a      	strb	r2, [r3, #20]
 8002320:	e002      	b.n	8002328 <SRAM_continuous_start+0x24>
  }
  else {
    sram_op_context.do_trig = 0;
 8002322:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <SRAM_continuous_start+0xec>)
 8002324:	2200      	movs	r2, #0
 8002326:	751a      	strb	r2, [r3, #20]
  }

  sram_op_context.span = atoi(cmds[4]);
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <SRAM_continuous_start+0xf0>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4618      	mov	r0, r3
 800232e:	f004 fd55 	bl	8006ddc <atoi>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <SRAM_continuous_start+0xec>)
 8002338:	605a      	str	r2, [r3, #4]
  sram_op_context.nb_nops = atoi(cmds[5]);
 800233a:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <SRAM_continuous_start+0xf0>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	4618      	mov	r0, r3
 8002340:	f004 fd4c 	bl	8006ddc <atoi>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <SRAM_continuous_start+0xec>)
 800234a:	611a      	str	r2, [r3, #16]

  char *addr_str = cmds[6];
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <SRAM_continuous_start+0xf0>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	60fb      	str	r3, [r7, #12]
  str2num(addr_str, (uint32_t *) &(sram_op_context.addr), "%8x");
 8002352:	4a29      	ldr	r2, [pc, #164]	; (80023f8 <SRAM_continuous_start+0xf4>)
 8002354:	4929      	ldr	r1, [pc, #164]	; (80023fc <SRAM_continuous_start+0xf8>)
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f9e6 	bl	8002728 <str2num>

  if (cmd_is(2, "write", 5)) {
 800235c:	2205      	movs	r2, #5
 800235e:	4928      	ldr	r1, [pc, #160]	; (8002400 <SRAM_continuous_start+0xfc>)
 8002360:	2002      	movs	r0, #2
 8002362:	f7ff fc6f 	bl	8001c44 <cmd_is>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00b      	beq.n	8002384 <SRAM_continuous_start+0x80>
    // START>SRAM>write>trig>span>nb_nops>0xaddr>0xdata
    sram_op_context.is_write = 1;
 800236c:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <SRAM_continuous_start+0xec>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]

    char *data_str = cmds[7];
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <SRAM_continuous_start+0xf0>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	607b      	str	r3, [r7, #4]
    str2num(data_str, &(sram_op_context.data), "%8x");
 8002378:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <SRAM_continuous_start+0xf4>)
 800237a:	4922      	ldr	r1, [pc, #136]	; (8002404 <SRAM_continuous_start+0x100>)
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f9d3 	bl	8002728 <str2num>
 8002382:	e015      	b.n	80023b0 <SRAM_continuous_start+0xac>
  }
  else if (cmd_is(2, "read", 4)) {
 8002384:	2204      	movs	r2, #4
 8002386:	4920      	ldr	r1, [pc, #128]	; (8002408 <SRAM_continuous_start+0x104>)
 8002388:	2002      	movs	r0, #2
 800238a:	f7ff fc5b 	bl	8001c44 <cmd_is>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00d      	beq.n	80023b0 <SRAM_continuous_start+0xac>
    // START>SRAM>read>trig>span>nb_nops>0xaddr
    sram_op_context.is_write = 0;
 8002394:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <SRAM_continuous_start+0xec>)
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]

    char *data_str = cmds[7];
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <SRAM_continuous_start+0xf0>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	60bb      	str	r3, [r7, #8]
    str2num(data_str, &(sram_op_context.data), "%8x");
 80023a0:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <SRAM_continuous_start+0xf4>)
 80023a2:	4918      	ldr	r1, [pc, #96]	; (8002404 <SRAM_continuous_start+0x100>)
 80023a4:	68b8      	ldr	r0, [r7, #8]
 80023a6:	f000 f9bf 	bl	8002728 <str2num>
    sram_op_context.data = 0;
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <SRAM_continuous_start+0xec>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  }
  sram_op_context.configured = 1;
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <SRAM_continuous_start+0xec>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	755a      	strb	r2, [r3, #21]

  // start timer ITs
  HAL_TIM_PWM_Init(timer);
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <SRAM_continuous_start+0x108>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fadd 	bl	800497a <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_1);
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <SRAM_continuous_start+0x108>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 fb30 	bl	8004a2c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(timer, TIM_CHANNEL_2);
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <SRAM_continuous_start+0x108>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2104      	movs	r1, #4
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 fb2a 	bl	8004a2c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(timer);
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <SRAM_continuous_start+0x108>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fa3b 	bl	8004858 <HAL_TIM_Base_Start_IT>
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	08008eb8 	.word	0x08008eb8
 80023f0:	20000250 	.word	0x20000250
 80023f4:	20000208 	.word	0x20000208
 80023f8:	08008ec0 	.word	0x08008ec0
 80023fc:	2000025c 	.word	0x2000025c
 8002400:	08008ec4 	.word	0x08008ec4
 8002404:	20000258 	.word	0x20000258
 8002408:	08008ecc 	.word	0x08008ecc
 800240c:	20000230 	.word	0x20000230

08002410 <SRAM_oneshot>:

void SRAM_oneshot(void) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
  // configure context structure
  if (cmd_is(3, "trig", 4)) {
 8002416:	2204      	movs	r2, #4
 8002418:	492f      	ldr	r1, [pc, #188]	; (80024d8 <SRAM_oneshot+0xc8>)
 800241a:	2003      	movs	r0, #3
 800241c:	f7ff fc12 	bl	8001c44 <cmd_is>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <SRAM_oneshot+0x1e>
    sram_op_context.do_trig = 1;
 8002426:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <SRAM_oneshot+0xcc>)
 8002428:	2201      	movs	r2, #1
 800242a:	751a      	strb	r2, [r3, #20]
 800242c:	e002      	b.n	8002434 <SRAM_oneshot+0x24>
  }
  else {
    sram_op_context.do_trig = 0;
 800242e:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <SRAM_oneshot+0xcc>)
 8002430:	2200      	movs	r2, #0
 8002432:	751a      	strb	r2, [r3, #20]
  }

  sram_op_context.span = atoi(cmds[4]);
 8002434:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <SRAM_oneshot+0xd0>)
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	4618      	mov	r0, r3
 800243a:	f004 fccf 	bl	8006ddc <atoi>
 800243e:	4603      	mov	r3, r0
 8002440:	461a      	mov	r2, r3
 8002442:	4b26      	ldr	r3, [pc, #152]	; (80024dc <SRAM_oneshot+0xcc>)
 8002444:	605a      	str	r2, [r3, #4]
  sram_op_context.nb_nops = atoi(cmds[5]);
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <SRAM_oneshot+0xd0>)
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	4618      	mov	r0, r3
 800244c:	f004 fcc6 	bl	8006ddc <atoi>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	4b21      	ldr	r3, [pc, #132]	; (80024dc <SRAM_oneshot+0xcc>)
 8002456:	611a      	str	r2, [r3, #16]

  char *addr_str = cmds[6];
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <SRAM_oneshot+0xd0>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	60fb      	str	r3, [r7, #12]
  str2num(addr_str, (uint32_t *) &(sram_op_context.addr), "%8x");
 800245e:	4a21      	ldr	r2, [pc, #132]	; (80024e4 <SRAM_oneshot+0xd4>)
 8002460:	4921      	ldr	r1, [pc, #132]	; (80024e8 <SRAM_oneshot+0xd8>)
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f960 	bl	8002728 <str2num>

  sram_op_context.configured = 1;
 8002468:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <SRAM_oneshot+0xcc>)
 800246a:	2201      	movs	r2, #1
 800246c:	755a      	strb	r2, [r3, #21]

  if (cmd_is(2, "write", 5)) {
 800246e:	2205      	movs	r2, #5
 8002470:	491e      	ldr	r1, [pc, #120]	; (80024ec <SRAM_oneshot+0xdc>)
 8002472:	2002      	movs	r0, #2
 8002474:	f7ff fbe6 	bl	8001c44 <cmd_is>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00e      	beq.n	800249c <SRAM_oneshot+0x8c>
    // ONESHOT>SRAM>write>trig>span>nb_nops>0xaddr>0xdata
    sram_op_context.is_write = 1;
 800247e:	4b17      	ldr	r3, [pc, #92]	; (80024dc <SRAM_oneshot+0xcc>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]

    char *data_str = cmds[7];
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <SRAM_oneshot+0xd0>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	607b      	str	r3, [r7, #4]
    str2num(data_str, &(sram_op_context.data), "%8x");
 800248a:	4a16      	ldr	r2, [pc, #88]	; (80024e4 <SRAM_oneshot+0xd4>)
 800248c:	4918      	ldr	r1, [pc, #96]	; (80024f0 <SRAM_oneshot+0xe0>)
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f94a 	bl	8002728 <str2num>

    SRAM_write(1);
 8002494:	2001      	movs	r0, #1
 8002496:	f000 f82f 	bl	80024f8 <SRAM_write>
    str2num(data_str, &(sram_op_context.data), "%8x");
    sram_op_context.data = 0;

    SRAM_read(1);
  }
}
 800249a:	e018      	b.n	80024ce <SRAM_oneshot+0xbe>
  else if (cmd_is(2, "read", 4)) {
 800249c:	2204      	movs	r2, #4
 800249e:	4915      	ldr	r1, [pc, #84]	; (80024f4 <SRAM_oneshot+0xe4>)
 80024a0:	2002      	movs	r0, #2
 80024a2:	f7ff fbcf 	bl	8001c44 <cmd_is>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d010      	beq.n	80024ce <SRAM_oneshot+0xbe>
    sram_op_context.is_write = 0;
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <SRAM_oneshot+0xcc>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
    char *data_str = cmds[7];
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <SRAM_oneshot+0xd0>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	60bb      	str	r3, [r7, #8]
    str2num(data_str, &(sram_op_context.data), "%8x");
 80024b8:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <SRAM_oneshot+0xd4>)
 80024ba:	490d      	ldr	r1, [pc, #52]	; (80024f0 <SRAM_oneshot+0xe0>)
 80024bc:	68b8      	ldr	r0, [r7, #8]
 80024be:	f000 f933 	bl	8002728 <str2num>
    sram_op_context.data = 0;
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <SRAM_oneshot+0xcc>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
    SRAM_read(1);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f000 f8ad 	bl	8002628 <SRAM_read>
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	08008eb8 	.word	0x08008eb8
 80024dc:	20000250 	.word	0x20000250
 80024e0:	20000208 	.word	0x20000208
 80024e4:	08008ec0 	.word	0x08008ec0
 80024e8:	2000025c 	.word	0x2000025c
 80024ec:	08008ec4 	.word	0x08008ec4
 80024f0:	20000258 	.word	0x20000258
 80024f4:	08008ecc 	.word	0x08008ecc

080024f8 <SRAM_write>:

// ====================================================================

void SRAM_write(uint8_t verbose) {
 80024f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024fc:	b08c      	sub	sp, #48	; 0x30
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	77fb      	strb	r3, [r7, #31]
  uint64_t i;
  uint64_t j;
  if (sram_op_context.configured == 0) {
 8002504:	4b46      	ldr	r3, [pc, #280]	; (8002620 <SRAM_write+0x128>)
 8002506:	7d5b      	ldrb	r3, [r3, #21]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d108      	bne.n	800251e <SRAM_write+0x26>
    if (verbose)
 800250c:	7ffb      	ldrb	r3, [r7, #31]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8081 	beq.w	8002616 <SRAM_write+0x11e>
      send_answer("Error: undefined sram op context\r\n", 34);
 8002514:	2122      	movs	r1, #34	; 0x22
 8002516:	4843      	ldr	r0, [pc, #268]	; (8002624 <SRAM_write+0x12c>)
 8002518:	f7ff fc56 	bl	8001dc8 <send_answer>
    //sram_op_context.configured = 0; // clear context
    if (verbose) {
      send_ok();
    }
  }
}
 800251c:	e07b      	b.n	8002616 <SRAM_write+0x11e>
    if (sram_op_context.do_trig)
 800251e:	4b40      	ldr	r3, [pc, #256]	; (8002620 <SRAM_write+0x128>)
 8002520:	7d1b      	ldrb	r3, [r3, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d04e      	beq.n	80025c4 <SRAM_write+0xcc>
      for(i = 0; i < sram_op_context.span; ++i) {
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002532:	e03b      	b.n	80025ac <SRAM_write+0xb4>
        trigger_high(1);
 8002534:	2001      	movs	r0, #1
 8002536:	f7ff fec1 	bl	80022bc <trigger_high>
        for(j = 0; j < sram_op_context.nb_nops; ++j) {
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002546:	e00b      	b.n	8002560 <SRAM_write+0x68>
          __asm("NOP");
 8002548:	bf00      	nop
        for(j = 0; j < sram_op_context.nb_nops; ++j) {
 800254a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800254e:	1c51      	adds	r1, r2, #1
 8002550:	6139      	str	r1, [r7, #16]
 8002552:	f143 0300 	adc.w	r3, r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800255c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <SRAM_write+0x128>)
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2200      	movs	r2, #0
 8002566:	469a      	mov	sl, r3
 8002568:	4693      	mov	fp, r2
 800256a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800256e:	4552      	cmp	r2, sl
 8002570:	eb73 030b 	sbcs.w	r3, r3, fp
 8002574:	d3e8      	bcc.n	8002548 <SRAM_write+0x50>
        *(sram_op_context.addr + i) = *(sram_op_context.addr + i); // TODO: *i or *4*i ?????
 8002576:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <SRAM_write+0x128>)
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	441a      	add	r2, r3
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <SRAM_write+0x128>)
 8002582:	68d9      	ldr	r1, [r3, #12]
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	601a      	str	r2, [r3, #0]
        __asm("NOP");
 800258e:	bf00      	nop
        trigger_low(1);
 8002590:	2001      	movs	r0, #1
 8002592:	f7ff fea5 	bl	80022e0 <trigger_low>
      for(i = 0; i < sram_op_context.span; ++i) {
 8002596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800259a:	1c51      	adds	r1, r2, #1
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	f143 0300 	adc.w	r3, r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80025a8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <SRAM_write+0x128>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	4698      	mov	r8, r3
 80025b4:	4691      	mov	r9, r2
 80025b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025ba:	4542      	cmp	r2, r8
 80025bc:	eb73 0309 	sbcs.w	r3, r3, r9
 80025c0:	d3b8      	bcc.n	8002534 <SRAM_write+0x3c>
 80025c2:	e023      	b.n	800260c <SRAM_write+0x114>
      for(i = 0; i < sram_op_context.span; ++i) {
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80025d0:	e012      	b.n	80025f8 <SRAM_write+0x100>
        *(sram_op_context.addr + i) = sram_op_context.data;
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <SRAM_write+0x128>)
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	4a10      	ldr	r2, [pc, #64]	; (8002620 <SRAM_write+0x128>)
 80025de:	6892      	ldr	r2, [r2, #8]
 80025e0:	601a      	str	r2, [r3, #0]
      for(i = 0; i < sram_op_context.span; ++i) {
 80025e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025e6:	1c51      	adds	r1, r2, #1
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	f143 0300 	adc.w	r3, r3, #0
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <SRAM_write+0x128>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	461c      	mov	r4, r3
 8002600:	4615      	mov	r5, r2
 8002602:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002606:	42a2      	cmp	r2, r4
 8002608:	41ab      	sbcs	r3, r5
 800260a:	d3e2      	bcc.n	80025d2 <SRAM_write+0xda>
    if (verbose) {
 800260c:	7ffb      	ldrb	r3, [r7, #31]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SRAM_write+0x11e>
      send_ok();
 8002612:	f7ff fc23 	bl	8001e5c <send_ok>
}
 8002616:	bf00      	nop
 8002618:	3730      	adds	r7, #48	; 0x30
 800261a:	46bd      	mov	sp, r7
 800261c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002620:	20000250 	.word	0x20000250
 8002624:	08008ed4 	.word	0x08008ed4

08002628 <SRAM_read>:

void SRAM_read(uint8_t verbose) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  int i, j;
  if (sram_op_context.configured == 0) {
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <SRAM_read+0xc8>)
 8002634:	7d5b      	ldrb	r3, [r3, #21]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d107      	bne.n	800264a <SRAM_read+0x22>
    if (verbose)
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d053      	beq.n	80026e8 <SRAM_read+0xc0>
      send_answer("Error: undefined sram op context\r\n", 34);
 8002640:	2122      	movs	r1, #34	; 0x22
 8002642:	482c      	ldr	r0, [pc, #176]	; (80026f4 <SRAM_read+0xcc>)
 8002644:	f7ff fbc0 	bl	8001dc8 <send_answer>
    if (verbose) {
      send_answer(read_value_str, sizeof(read_value_str));
    }

  }
}
 8002648:	e04e      	b.n	80026e8 <SRAM_read+0xc0>
    if (sram_op_context.do_trig)
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <SRAM_read+0xc8>)
 800264c:	7d1b      	ldrb	r3, [r3, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d026      	beq.n	80026a0 <SRAM_read+0x78>
      for(i = 0; i < sram_op_context.span; ++i) {
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	e01d      	b.n	8002694 <SRAM_read+0x6c>
        trigger_high(1);
 8002658:	2001      	movs	r0, #1
 800265a:	f7ff fe2f 	bl	80022bc <trigger_high>
        for(j = 0; j < sram_op_context.nb_nops; ++j) {
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	e003      	b.n	800266c <SRAM_read+0x44>
          __asm("NOP");
 8002664:	bf00      	nop
        for(j = 0; j < sram_op_context.nb_nops; ++j) {
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	3301      	adds	r3, #1
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <SRAM_read+0xc8>)
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	429a      	cmp	r2, r3
 8002674:	d8f6      	bhi.n	8002664 <SRAM_read+0x3c>
        sram_op_context.data = *(sram_op_context.addr + i);
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <SRAM_read+0xc8>)
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1b      	ldr	r2, [pc, #108]	; (80026f0 <SRAM_read+0xc8>)
 8002684:	6093      	str	r3, [r2, #8]
        __asm("NOP");
 8002686:	bf00      	nop
        trigger_low(1);
 8002688:	2001      	movs	r0, #1
 800268a:	f7ff fe29 	bl	80022e0 <trigger_low>
      for(i = 0; i < sram_op_context.span; ++i) {
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3301      	adds	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <SRAM_read+0xc8>)
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	429a      	cmp	r2, r3
 800269c:	d8dc      	bhi.n	8002658 <SRAM_read+0x30>
 800269e:	e012      	b.n	80026c6 <SRAM_read+0x9e>
      for(i = 0; i < sram_op_context.span; ++i) {
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	e00a      	b.n	80026bc <SRAM_read+0x94>
        sram_op_context.data = *(sram_op_context.addr + i);
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <SRAM_read+0xc8>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <SRAM_read+0xc8>)
 80026b4:	6093      	str	r3, [r2, #8]
      for(i = 0; i < sram_op_context.span; ++i) {
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3301      	adds	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <SRAM_read+0xc8>)
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d8ef      	bhi.n	80026a6 <SRAM_read+0x7e>
    sprintf(read_value_str, "%08X\r\n", (unsigned int) sram_op_context.data);
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <SRAM_read+0xc8>)
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	490a      	ldr	r1, [pc, #40]	; (80026f8 <SRAM_read+0xd0>)
 80026d0:	4618      	mov	r0, r3
 80026d2:	f004 fbc7 	bl	8006e64 <siprintf>
    if (verbose) {
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <SRAM_read+0xc0>
      send_answer(read_value_str, sizeof(read_value_str));
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	210b      	movs	r1, #11
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fb70 	bl	8001dc8 <send_answer>
}
 80026e8:	bf00      	nop
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000250 	.word	0x20000250
 80026f4:	08008ed4 	.word	0x08008ed4
 80026f8:	08008ef8 	.word	0x08008ef8

080026fc <do_NOP>:
/**
  * @brief  This function is responsible for calling NOP commands.
  * @author Raphael Viera (raphael.viera@emse.fr)
  */
void do_NOP(uint32_t ntimes)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	int i;

	for (i = 1; i <= ntimes; ++i)
 8002704:	2301      	movs	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e003      	b.n	8002712 <do_NOP+0x16>
	{
		__asm("NOP");
 800270a:	bf00      	nop
	for (i = 1; i <= ntimes; ++i)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3301      	adds	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	d2f7      	bcs.n	800270a <do_NOP+0xe>
	}
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <str2num>:
/**
  * @brief  This function is responsible for converting string to number.
  * @author Raphael Viera (raphael.viera@emse.fr)
  */
void str2num(char *str, uint32_t *dest, const char* type)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
	sscanf((const char*) str, type, dest);
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f004 fbb3 	bl	8006ea4 <siscanf>
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <hex2bytes>:

/**
 * @brief This function is used for AES operation to transform incoming hex string key/plain/cipher into an array of bytes (ex: "FD" -> 253)
 * @author Hugo Perrin (h.perrin@emse.fr)
 */
void hex2bytes(const uint8_t *src_str, size_t src_len, uint8_t *dest_array, size_t dest_len) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  uint8_t i;
  uint8_t buf[3] = "\0\0\0";
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <hex2bytes+0x80>)
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	4611      	mov	r1, r2
 8002760:	8019      	strh	r1, [r3, #0]
 8002762:	3302      	adds	r3, #2
 8002764:	0c12      	lsrs	r2, r2, #16
 8002766:	701a      	strb	r2, [r3, #0]

  // Infinite loop in case of length mismatch
  while (src_len != 2 * dest_len) ;
 8002768:	bf00      	nop
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	429a      	cmp	r2, r3
 8002772:	d1fa      	bne.n	800276a <hex2bytes+0x22>

  for (i = 0; i < dest_len; ++i) {
 8002774:	2300      	movs	r3, #0
 8002776:	75fb      	strb	r3, [r7, #23]
 8002778:	e01d      	b.n	80027b6 <hex2bytes+0x6e>
    buf[0] = src_str[2 * i];
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	753b      	strb	r3, [r7, #20]
    buf[1] = src_str[2 * i + 1];
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	3301      	adds	r3, #1
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	757b      	strb	r3, [r7, #21]
    dest_array[i] = strtol((const char *) buf, 0, 16);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	2210      	movs	r2, #16
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 fcee 	bl	8007180 <strtol>
 80027a4:	4601      	mov	r1, r0
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	b2ca      	uxtb	r2, r1
 80027ae:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < dest_len; ++i) {
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	3301      	adds	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d8dd      	bhi.n	800277a <hex2bytes+0x32>
  }
}
 80027be:	bf00      	nop
 80027c0:	bf00      	nop
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	08008f00 	.word	0x08008f00

080027cc <bytes2hex>:

/**
 * @brief This function is used for AES operation to transform incoming hex string key/plain/cipher into an array of bytes (ex: "FD" -> 253)
 * @author Hugo Perrin (h.perrin@emse.fr)
 */
void bytes2hex(const uint8_t *src_array, size_t src_len, uint8_t *dest_str, size_t dest_len) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  uint8_t i;
  uint8_t buf[3] = "\0\0\0";
 80027da:	4a1b      	ldr	r2, [pc, #108]	; (8002848 <bytes2hex+0x7c>)
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	4611      	mov	r1, r2
 80027e4:	8019      	strh	r1, [r3, #0]
 80027e6:	3302      	adds	r3, #2
 80027e8:	0c12      	lsrs	r2, r2, #16
 80027ea:	701a      	strb	r2, [r3, #0]

  // Infinite loop in case of length mismatch
  while (2 * src_len != dest_len) ;
 80027ec:	bf00      	nop
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1fa      	bne.n	80027ee <bytes2hex+0x22>

  for (i = 0; i < src_len; ++i) {
 80027f8:	2300      	movs	r3, #0
 80027fa:	75fb      	strb	r3, [r7, #23]
 80027fc:	e01b      	b.n	8002836 <bytes2hex+0x6a>
    sprintf((char *) buf, "%02X", (unsigned int) src_array[i]);
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4413      	add	r3, r2
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	490f      	ldr	r1, [pc, #60]	; (800284c <bytes2hex+0x80>)
 800280e:	4618      	mov	r0, r3
 8002810:	f004 fb28 	bl	8006e64 <siprintf>
    dest_str[2 * i] = buf[0];
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	7d3a      	ldrb	r2, [r7, #20]
 8002820:	701a      	strb	r2, [r3, #0]
    dest_str[2 * i + 1] = buf[1];
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	3301      	adds	r3, #1
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	7d7a      	ldrb	r2, [r7, #21]
 800282e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < src_len; ++i) {
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	3301      	adds	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	d8df      	bhi.n	80027fe <bytes2hex+0x32>
  }
}
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	08008f00 	.word	0x08008f00
 800284c:	08008f04 	.word	0x08008f04

08002850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002854:	f000 fbec 	bl	8003030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002858:	f000 f816 	bl	8002888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800285c:	f000 f91e 	bl	8002a9c <MX_GPIO_Init>
  MX_DMA_Init();
 8002860:	f000 f8f4 	bl	8002a4c <MX_DMA_Init>
  MX_TIM3_Init();
 8002864:	f000 f87a 	bl	800295c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002868:	f000 f8c6 	bl	80029f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Init_Cmd_Handling(&htim3, &huart1, &hdma_usart1_tx); // Just associate the correct pointers to local ones
 800286c:	4a03      	ldr	r2, [pc, #12]	; (800287c <main+0x2c>)
 800286e:	4904      	ldr	r1, [pc, #16]	; (8002880 <main+0x30>)
 8002870:	4804      	ldr	r0, [pc, #16]	; (8002884 <main+0x34>)
 8002872:	f7fe ffc1 	bl	80017f8 <Init_Cmd_Handling>

  Start_Cmd_Reception();
 8002876:	f7fe ffdb 	bl	8001830 <Start_Cmd_Reception>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800287a:	e7fe      	b.n	800287a <main+0x2a>
 800287c:	20000354 	.word	0x20000354
 8002880:	200002b0 	.word	0x200002b0
 8002884:	20000268 	.word	0x20000268

08002888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b094      	sub	sp, #80	; 0x50
 800288c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288e:	f107 0320 	add.w	r3, r7, #32
 8002892:	2230      	movs	r2, #48	; 0x30
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fadc 	bl	8006e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <SystemClock_Config+0xcc>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <SystemClock_Config+0xcc>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ba:	6413      	str	r3, [r2, #64]	; 0x40
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <SystemClock_Config+0xcc>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80028c8:	2300      	movs	r3, #0
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <SystemClock_Config+0xd0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028d4:	4a20      	ldr	r2, [pc, #128]	; (8002958 <SystemClock_Config+0xd0>)
 80028d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <SystemClock_Config+0xd0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028e8:	2302      	movs	r3, #2
 80028ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028ec:	2301      	movs	r3, #1
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028f0:	2310      	movs	r3, #16
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028f4:	2302      	movs	r3, #2
 80028f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028f8:	2300      	movs	r3, #0
 80028fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80028fc:	2310      	movs	r3, #16
 80028fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002900:	23a8      	movs	r3, #168	; 0xa8
 8002902:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002904:	2302      	movs	r3, #2
 8002906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002908:	2304      	movs	r3, #4
 800290a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800290c:	f107 0320 	add.w	r3, r7, #32
 8002910:	4618      	mov	r0, r3
 8002912:	f001 faf9 	bl	8003f08 <HAL_RCC_OscConfig>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800291c:	f000 f920 	bl	8002b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002920:	230f      	movs	r3, #15
 8002922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002924:	2302      	movs	r3, #2
 8002926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f001 fd5c 	bl	80043f8 <HAL_RCC_ClockConfig>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002946:	f000 f90b 	bl	8002b60 <Error_Handler>
  }
}
 800294a:	bf00      	nop
 800294c:	3750      	adds	r7, #80	; 0x50
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40007000 	.word	0x40007000

0800295c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002962:	f107 0308 	add.w	r3, r7, #8
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002970:	463b      	mov	r3, r7
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <MX_TIM3_Init+0x94>)
 800297a:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <MX_TIM3_Init+0x98>)
 800297c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 800297e:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <MX_TIM3_Init+0x94>)
 8002980:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002984:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <MX_TIM3_Init+0x94>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <MX_TIM3_Init+0x94>)
 800298e:	220a      	movs	r2, #10
 8002990:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <MX_TIM3_Init+0x94>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002998:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <MX_TIM3_Init+0x94>)
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800299e:	4814      	ldr	r0, [pc, #80]	; (80029f0 <MX_TIM3_Init+0x94>)
 80029a0:	f001 ff0a 	bl	80047b8 <HAL_TIM_Base_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80029aa:	f000 f8d9 	bl	8002b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	4619      	mov	r1, r3
 80029ba:	480d      	ldr	r0, [pc, #52]	; (80029f0 <MX_TIM3_Init+0x94>)
 80029bc:	f002 fbb0 	bl	8005120 <HAL_TIM_ConfigClockSource>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80029c6:	f000 f8cb 	bl	8002b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029d2:	463b      	mov	r3, r7
 80029d4:	4619      	mov	r1, r3
 80029d6:	4806      	ldr	r0, [pc, #24]	; (80029f0 <MX_TIM3_Init+0x94>)
 80029d8:	f002 ff5e 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80029e2:	f000 f8bd 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000268 	.word	0x20000268
 80029f4:	40000400 	.word	0x40000400

080029f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <MX_USART1_UART_Init+0x4c>)
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <MX_USART1_UART_Init+0x50>)
 8002a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <MX_USART1_UART_Init+0x4c>)
 8002a04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_USART1_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MX_USART1_UART_Init+0x4c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <MX_USART1_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <MX_USART1_UART_Init+0x4c>)
 8002a1e:	220c      	movs	r2, #12
 8002a20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <MX_USART1_UART_Init+0x4c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_USART1_UART_Init+0x4c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <MX_USART1_UART_Init+0x4c>)
 8002a30:	f002 ffb4 	bl	800599c <HAL_UART_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a3a:	f000 f891 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200002b0 	.word	0x200002b0
 8002a48:	40011000 	.word	0x40011000

08002a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <MX_DMA_Init+0x4c>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <MX_DMA_Init+0x4c>)
 8002a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <MX_DMA_Init+0x4c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	203a      	movs	r0, #58	; 0x3a
 8002a74:	f000 fc29 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002a78:	203a      	movs	r0, #58	; 0x3a
 8002a7a:	f000 fc42 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	2046      	movs	r0, #70	; 0x46
 8002a84:	f000 fc21 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002a88:	2046      	movs	r0, #70	; 0x46
 8002a8a:	f000 fc3a 	bl	8003302 <HAL_NVIC_EnableIRQ>

}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800

08002a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa2:	f107 030c 	add.w	r3, r7, #12
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <MX_GPIO_Init+0xb8>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a26      	ldr	r2, [pc, #152]	; (8002b54 <MX_GPIO_Init+0xb8>)
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <MX_GPIO_Init+0xb8>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <MX_GPIO_Init+0xb8>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <MX_GPIO_Init+0xb8>)
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <MX_GPIO_Init+0xb8>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <MX_GPIO_Init+0xb8>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <MX_GPIO_Init+0xb8>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <MX_GPIO_Init+0xb8>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|TRIG_OUT0_Pin|TRIG_OUT1_Pin, GPIO_PIN_RESET);
 8002b06:	2200      	movs	r2, #0
 8002b08:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 8002b0c:	4812      	ldr	r0, [pc, #72]	; (8002b58 <MX_GPIO_Init+0xbc>)
 8002b0e:	f001 f9e1 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8002b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	4619      	mov	r1, r3
 8002b26:	480d      	ldr	r0, [pc, #52]	; (8002b5c <MX_GPIO_Init+0xc0>)
 8002b28:	f001 f850 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin TRIG_OUT0_Pin TRIG_OUT1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|TRIG_OUT0_Pin|TRIG_OUT1_Pin;
 8002b2c:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8002b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b32:	2301      	movs	r3, #1
 8002b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	4619      	mov	r1, r3
 8002b44:	4804      	ldr	r0, [pc, #16]	; (8002b58 <MX_GPIO_Init+0xbc>)
 8002b46:	f001 f841 	bl	8003bcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b4a:	bf00      	nop
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	40020800 	.word	0x40020800

08002b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b64:	b672      	cpsid	i
}
 8002b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <Error_Handler+0x8>
	...

08002b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <HAL_TIM_Base_MspInit+0x48>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d115      	bne.n	8002bfa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_TIM_Base_MspInit+0x4c>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <HAL_TIM_Base_MspInit+0x4c>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_TIM_Base_MspInit+0x4c>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2100      	movs	r1, #0
 8002bee:	201d      	movs	r0, #29
 8002bf0:	f000 fb6b 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bf4:	201d      	movs	r0, #29
 8002bf6:	f000 fb84 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40023800 	.word	0x40023800

08002c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a50      	ldr	r2, [pc, #320]	; (8002d6c <HAL_UART_MspInit+0x160>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	f040 809a 	bne.w	8002d64 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	4b4e      	ldr	r3, [pc, #312]	; (8002d70 <HAL_UART_MspInit+0x164>)
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	4a4d      	ldr	r2, [pc, #308]	; (8002d70 <HAL_UART_MspInit+0x164>)
 8002c3a:	f043 0310 	orr.w	r3, r3, #16
 8002c3e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c40:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <HAL_UART_MspInit+0x164>)
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_UART_MspInit+0x164>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	4a46      	ldr	r2, [pc, #280]	; (8002d70 <HAL_UART_MspInit+0x164>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5c:	4b44      	ldr	r3, [pc, #272]	; (8002d70 <HAL_UART_MspInit+0x164>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c68:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	4619      	mov	r1, r3
 8002c84:	483b      	ldr	r0, [pc, #236]	; (8002d74 <HAL_UART_MspInit+0x168>)
 8002c86:	f000 ffa1 	bl	8003bcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002c8c:	4a3b      	ldr	r2, [pc, #236]	; (8002d7c <HAL_UART_MspInit+0x170>)
 8002c8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002c92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c96:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca4:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002caa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cac:	4b32      	ldr	r3, [pc, #200]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb2:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002cb8:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cbe:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002cc4:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002cca:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002ccc:	2203      	movs	r2, #3
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002cd0:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002cd6:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cdc:	4826      	ldr	r0, [pc, #152]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002cde:	f000 fb2b 	bl	8003338 <HAL_DMA_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002ce8:	f7ff ff3a 	bl	8002b60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
 8002cf2:	4a21      	ldr	r2, [pc, #132]	; (8002d78 <HAL_UART_MspInit+0x16c>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002cfa:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <HAL_UART_MspInit+0x178>)
 8002cfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d04:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d12:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d18:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d1a:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d20:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d32:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d38:	4811      	ldr	r0, [pc, #68]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d3a:	f000 fafd 	bl	8003338 <HAL_DMA_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8002d44:	f7ff ff0c 	bl	8002b60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d4e:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <HAL_UART_MspInit+0x174>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2100      	movs	r1, #0
 8002d58:	2025      	movs	r0, #37	; 0x25
 8002d5a:	f000 fab6 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d5e:	2025      	movs	r0, #37	; 0x25
 8002d60:	f000 facf 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d64:	bf00      	nop
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40011000 	.word	0x40011000
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40020000 	.word	0x40020000
 8002d78:	200002f4 	.word	0x200002f4
 8002d7c:	40026440 	.word	0x40026440
 8002d80:	20000354 	.word	0x20000354
 8002d84:	400264b8 	.word	0x400264b8

08002d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <NMI_Handler+0x4>

08002d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d92:	e7fe      	b.n	8002d92 <HardFault_Handler+0x4>

08002d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <MemManage_Handler+0x4>

08002d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d9e:	e7fe      	b.n	8002d9e <BusFault_Handler+0x4>

08002da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da4:	e7fe      	b.n	8002da4 <UsageFault_Handler+0x4>

08002da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dd4:	f000 f97e 	bl	80030d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <TIM3_IRQHandler+0x10>)
 8002de2:	f001 ffd3 	bl	8004d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000268 	.word	0x20000268

08002df0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002df4:	4802      	ldr	r0, [pc, #8]	; (8002e00 <USART1_IRQHandler+0x10>)
 8002df6:	f002 fee1 	bl	8005bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200002b0 	.word	0x200002b0

08002e04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <DMA2_Stream2_IRQHandler+0x10>)
 8002e0a:	f000 fc2d 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200002f4 	.word	0x200002f4

08002e18 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <DMA2_Stream7_IRQHandler+0x10>)
 8002e1e:	f000 fc23 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000354 	.word	0x20000354

08002e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return 1;
 8002e30:	2301      	movs	r3, #1
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_kill>:

int _kill(int pid, int sig)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e46:	f003 ffcd 	bl	8006de4 <__errno>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2216      	movs	r2, #22
 8002e4e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_exit>:

void _exit (int status)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ffe7 	bl	8002e3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e6e:	e7fe      	b.n	8002e6e <_exit+0x12>

08002e70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e00a      	b.n	8002e98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e82:	f3af 8000 	nop.w
 8002e86:	4601      	mov	r1, r0
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	60ba      	str	r2, [r7, #8]
 8002e8e:	b2ca      	uxtb	r2, r1
 8002e90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3301      	adds	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	dbf0      	blt.n	8002e82 <_read+0x12>
  }

  return len;
 8002ea0:	687b      	ldr	r3, [r7, #4]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e009      	b.n	8002ed0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	60ba      	str	r2, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dbf1      	blt.n	8002ebc <_write+0x12>
  }
  return len;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_close>:

int _close(int file)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f0a:	605a      	str	r2, [r3, #4]
  return 0;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_isatty>:

int _isatty(int file)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f22:	2301      	movs	r3, #1
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f54:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <_sbrk+0x5c>)
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <_sbrk+0x60>)
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <_sbrk+0x64>)
 8002f6a:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <_sbrk+0x68>)
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <_sbrk+0x64>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d207      	bcs.n	8002f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f7c:	f003 ff32 	bl	8006de4 <__errno>
 8002f80:	4603      	mov	r3, r0
 8002f82:	220c      	movs	r2, #12
 8002f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f8a:	e009      	b.n	8002fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <_sbrk+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <_sbrk+0x64>)
 8002f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20010000 	.word	0x20010000
 8002fac:	00000400 	.word	0x00000400
 8002fb0:	200003b4 	.word	0x200003b4
 8002fb4:	200003d0 	.word	0x200003d0

08002fb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <SystemInit+0x20>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <SystemInit+0x20>)
 8002fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003014 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fe0:	480d      	ldr	r0, [pc, #52]	; (8003018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fe2:	490e      	ldr	r1, [pc, #56]	; (800301c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fe4:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe8:	e002      	b.n	8002ff0 <LoopCopyDataInit>

08002fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fee:	3304      	adds	r3, #4

08002ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff4:	d3f9      	bcc.n	8002fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff6:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ff8:	4c0b      	ldr	r4, [pc, #44]	; (8003028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ffc:	e001      	b.n	8003002 <LoopFillZerobss>

08002ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003000:	3204      	adds	r2, #4

08003002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003004:	d3fb      	bcc.n	8002ffe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003006:	f7ff ffd7 	bl	8002fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800300a:	f003 fef1 	bl	8006df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800300e:	f7ff fc1f 	bl	8002850 <main>
  bx  lr    
 8003012:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003014:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800301c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8003020:	080093b8 	.word	0x080093b8
  ldr r2, =_sbss
 8003024:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8003028:	200003cc 	.word	0x200003cc

0800302c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800302c:	e7fe      	b.n	800302c <ADC_IRQHandler>
	...

08003030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <HAL_Init+0x40>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <HAL_Init+0x40>)
 800303a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_Init+0x40>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_Init+0x40>)
 8003046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_Init+0x40>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a07      	ldr	r2, [pc, #28]	; (8003070 <HAL_Init+0x40>)
 8003052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003058:	2003      	movs	r0, #3
 800305a:	f000 f92b 	bl	80032b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800305e:	200f      	movs	r0, #15
 8003060:	f000 f808 	bl	8003074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003064:	f7ff fd82 	bl	8002b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023c00 	.word	0x40023c00

08003074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_InitTick+0x54>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_InitTick+0x58>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308a:	fbb3 f3f1 	udiv	r3, r3, r1
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f943 	bl	800331e <HAL_SYSTICK_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e00e      	b.n	80030c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b0f      	cmp	r3, #15
 80030a6:	d80a      	bhi.n	80030be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a8:	2200      	movs	r2, #0
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030b0:	f000 f90b 	bl	80032ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030b4:	4a06      	ldr	r2, [pc, #24]	; (80030d0 <HAL_InitTick+0x5c>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200000f8 	.word	0x200000f8
 80030cc:	20000100 	.word	0x20000100
 80030d0:	200000fc 	.word	0x200000fc

080030d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_IncTick+0x20>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_IncTick+0x24>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <HAL_IncTick+0x24>)
 80030e6:	6013      	str	r3, [r2, #0]
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000100 	.word	0x20000100
 80030f8:	200003b8 	.word	0x200003b8

080030fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_GetTick+0x14>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	200003b8 	.word	0x200003b8

08003114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003130:	4013      	ands	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800313c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003146:	4a04      	ldr	r2, [pc, #16]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <__NVIC_GetPriorityGrouping+0x18>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0307 	and.w	r3, r3, #7
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4907      	ldr	r1, [pc, #28]	; (80031b0 <__NVIC_EnableIRQ+0x38>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3b01      	subs	r3, #1
 800327c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003280:	d301      	bcc.n	8003286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003282:	2301      	movs	r3, #1
 8003284:	e00f      	b.n	80032a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <SysTick_Config+0x40>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328e:	210f      	movs	r1, #15
 8003290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003294:	f7ff ff8e 	bl	80031b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <SysTick_Config+0x40>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <SysTick_Config+0x40>)
 80032a0:	2207      	movs	r2, #7
 80032a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000e010 	.word	0xe000e010

080032b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff29 	bl	8003114 <__NVIC_SetPriorityGrouping>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032dc:	f7ff ff3e 	bl	800315c <__NVIC_GetPriorityGrouping>
 80032e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f7ff ff8e 	bl	8003208 <NVIC_EncodePriority>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff5d 	bl	80031b4 <__NVIC_SetPriority>
}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	4603      	mov	r3, r0
 800330a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff31 	bl	8003178 <__NVIC_EnableIRQ>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ffa2 	bl	8003270 <SysTick_Config>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003344:	f7ff feda 	bl	80030fc <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e099      	b.n	8003488 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003374:	e00f      	b.n	8003396 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003376:	f7ff fec1 	bl	80030fc <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b05      	cmp	r3, #5
 8003382:	d908      	bls.n	8003396 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2203      	movs	r2, #3
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e078      	b.n	8003488 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e8      	bne.n	8003376 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4b38      	ldr	r3, [pc, #224]	; (8003490 <HAL_DMA_Init+0x158>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d107      	bne.n	8003400 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	4313      	orrs	r3, r2
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f023 0307 	bic.w	r3, r3, #7
 8003416:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	2b04      	cmp	r3, #4
 8003428:	d117      	bne.n	800345a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00e      	beq.n	800345a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fb01 	bl	8003a44 <DMA_CheckFifoParam>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2240      	movs	r2, #64	; 0x40
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003456:	2301      	movs	r3, #1
 8003458:	e016      	b.n	8003488 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fab8 	bl	80039d8 <DMA_CalcBaseAndBitshift>
 8003468:	4603      	mov	r3, r0
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	223f      	movs	r2, #63	; 0x3f
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	f010803f 	.word	0xf010803f

08003494 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_DMA_Start_IT+0x26>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e040      	b.n	800353c <HAL_DMA_Start_IT+0xa8>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d12f      	bne.n	800352e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fa4a 	bl	800397c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	223f      	movs	r2, #63	; 0x3f
 80034ee:	409a      	lsls	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0216 	orr.w	r2, r2, #22
 8003502:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0208 	orr.w	r2, r2, #8
 800351a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e005      	b.n	800353a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800353a:	7dfb      	ldrb	r3, [r7, #23]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003552:	f7ff fdd3 	bl	80030fc <HAL_GetTick>
 8003556:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d008      	beq.n	8003576 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2280      	movs	r2, #128	; 0x80
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e052      	b.n	800361c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0216 	bic.w	r2, r2, #22
 8003584:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003594:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d103      	bne.n	80035a6 <HAL_DMA_Abort+0x62>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0208 	bic.w	r2, r2, #8
 80035b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c6:	e013      	b.n	80035f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c8:	f7ff fd98 	bl	80030fc <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d90c      	bls.n	80035f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2203      	movs	r2, #3
 80035e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e015      	b.n	800361c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e4      	bne.n	80035c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003602:	223f      	movs	r2, #63	; 0x3f
 8003604:	409a      	lsls	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d004      	beq.n	8003642 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e00c      	b.n	800365c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2205      	movs	r2, #5
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003674:	4b8e      	ldr	r3, [pc, #568]	; (80038b0 <HAL_DMA_IRQHandler+0x248>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a8e      	ldr	r2, [pc, #568]	; (80038b4 <HAL_DMA_IRQHandler+0x24c>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0a9b      	lsrs	r3, r3, #10
 8003680:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	2208      	movs	r2, #8
 8003694:	409a      	lsls	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01a      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d013      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	2208      	movs	r2, #8
 80036c2:	409a      	lsls	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f043 0201 	orr.w	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	2201      	movs	r2, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d012      	beq.n	800370a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	2201      	movs	r2, #1
 80036f8:	409a      	lsls	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	f043 0202 	orr.w	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	2204      	movs	r2, #4
 8003710:	409a      	lsls	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d012      	beq.n	8003740 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	2204      	movs	r2, #4
 800372e:	409a      	lsls	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f043 0204 	orr.w	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	2210      	movs	r2, #16
 8003746:	409a      	lsls	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d043      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d03c      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	2210      	movs	r2, #16
 8003764:	409a      	lsls	r2, r3
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d018      	beq.n	80037aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d024      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
 8003796:	e01f      	b.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
 80037a8:	e016      	b.n	80037d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0208 	bic.w	r2, r2, #8
 80037c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	2220      	movs	r2, #32
 80037de:	409a      	lsls	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 808f 	beq.w	8003908 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8087 	beq.w	8003908 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	2220      	movs	r2, #32
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b05      	cmp	r3, #5
 8003810:	d136      	bne.n	8003880 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0216 	bic.w	r2, r2, #22
 8003820:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003830:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <HAL_DMA_IRQHandler+0x1da>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0208 	bic.w	r2, r2, #8
 8003850:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	223f      	movs	r2, #63	; 0x3f
 8003858:	409a      	lsls	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	2b00      	cmp	r3, #0
 8003874:	d07e      	beq.n	8003974 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
        }
        return;
 800387e:	e079      	b.n	8003974 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01d      	beq.n	80038ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10d      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
 80038ac:	e02c      	b.n	8003908 <HAL_DMA_IRQHandler+0x2a0>
 80038ae:	bf00      	nop
 80038b0:	200000f8 	.word	0x200000f8
 80038b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d023      	beq.n	8003908 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
 80038c8:	e01e      	b.n	8003908 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10f      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0210 	bic.w	r2, r2, #16
 80038e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	2b00      	cmp	r3, #0
 800390e:	d032      	beq.n	8003976 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d022      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2205      	movs	r2, #5
 8003920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	3301      	adds	r3, #1
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	429a      	cmp	r2, r3
 800393e:	d307      	bcc.n	8003950 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f2      	bne.n	8003934 <HAL_DMA_IRQHandler+0x2cc>
 800394e:	e000      	b.n	8003952 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003950:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
 8003972:	e000      	b.n	8003976 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003974:	bf00      	nop
    }
  }
}
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003998:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d108      	bne.n	80039bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ba:	e007      	b.n	80039cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	3b10      	subs	r3, #16
 80039e8:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <DMA_CalcBaseAndBitshift+0x64>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <DMA_CalcBaseAndBitshift+0x68>)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d909      	bls.n	8003a1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a0e:	f023 0303 	bic.w	r3, r3, #3
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	659a      	str	r2, [r3, #88]	; 0x58
 8003a18:	e007      	b.n	8003a2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	aaaaaaab 	.word	0xaaaaaaab
 8003a40:	0800913c 	.word	0x0800913c

08003a44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d11f      	bne.n	8003a9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d856      	bhi.n	8003b12 <DMA_CheckFifoParam+0xce>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <DMA_CheckFifoParam+0x28>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a8f 	.word	0x08003a8f
 8003a74:	08003a7d 	.word	0x08003a7d
 8003a78:	08003b13 	.word	0x08003b13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d046      	beq.n	8003b16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8c:	e043      	b.n	8003b16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a96:	d140      	bne.n	8003b1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e03d      	b.n	8003b1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa6:	d121      	bne.n	8003aec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d837      	bhi.n	8003b1e <DMA_CheckFifoParam+0xda>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <DMA_CheckFifoParam+0x70>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003acb 	.word	0x08003acb
 8003abc:	08003ac5 	.word	0x08003ac5
 8003ac0:	08003add 	.word	0x08003add
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac8:	e030      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d025      	beq.n	8003b22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ada:	e022      	b.n	8003b22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ae4:	d11f      	bne.n	8003b26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aea:	e01c      	b.n	8003b26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d903      	bls.n	8003afa <DMA_CheckFifoParam+0xb6>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d003      	beq.n	8003b00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003af8:	e018      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      break;
 8003afe:	e015      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00e      	beq.n	8003b2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b10:	e00b      	b.n	8003b2a <DMA_CheckFifoParam+0xe6>
      break;
 8003b12:	bf00      	nop
 8003b14:	e00a      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e008      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e006      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e004      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop

08003b3c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	e010      	b.n	8003b7a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d103      	bne.n	8003b66 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e009      	b.n	8003b7a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d103      	bne.n	8003b74 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	e002      	b.n	8003b7a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003b74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <FLASH_Erase_Sector+0x8c>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <FLASH_Erase_Sector+0x8c>)
 8003b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <FLASH_Erase_Sector+0x8c>)
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	490f      	ldr	r1, [pc, #60]	; (8003bc8 <FLASH_Erase_Sector+0x8c>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <FLASH_Erase_Sector+0x8c>)
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <FLASH_Erase_Sector+0x8c>)
 8003b98:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003b9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <FLASH_Erase_Sector+0x8c>)
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <FLASH_Erase_Sector+0x8c>)
 8003baa:	f043 0302 	orr.w	r3, r3, #2
 8003bae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <FLASH_Erase_Sector+0x8c>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <FLASH_Erase_Sector+0x8c>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bba:	6113      	str	r3, [r2, #16]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40023c00 	.word	0x40023c00

08003bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	e159      	b.n	8003e9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003be8:	2201      	movs	r2, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	f040 8148 	bne.w	8003e96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d005      	beq.n	8003c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d130      	bne.n	8003c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c54:	2201      	movs	r2, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 0201 	and.w	r2, r3, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d017      	beq.n	8003cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d123      	bne.n	8003d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	08da      	lsrs	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3208      	adds	r2, #8
 8003cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	220f      	movs	r2, #15
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	08da      	lsrs	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3208      	adds	r2, #8
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0203 	and.w	r2, r3, #3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a2 	beq.w	8003e96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	4b57      	ldr	r3, [pc, #348]	; (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	4a56      	ldr	r2, [pc, #344]	; (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d60:	6453      	str	r3, [r2, #68]	; 0x44
 8003d62:	4b54      	ldr	r3, [pc, #336]	; (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d6e:	4a52      	ldr	r2, [pc, #328]	; (8003eb8 <HAL_GPIO_Init+0x2ec>)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	220f      	movs	r2, #15
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a49      	ldr	r2, [pc, #292]	; (8003ebc <HAL_GPIO_Init+0x2f0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d019      	beq.n	8003dce <HAL_GPIO_Init+0x202>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a48      	ldr	r2, [pc, #288]	; (8003ec0 <HAL_GPIO_Init+0x2f4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_GPIO_Init+0x1fe>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a47      	ldr	r2, [pc, #284]	; (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00d      	beq.n	8003dc6 <HAL_GPIO_Init+0x1fa>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a46      	ldr	r2, [pc, #280]	; (8003ec8 <HAL_GPIO_Init+0x2fc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <HAL_GPIO_Init+0x1f6>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a45      	ldr	r2, [pc, #276]	; (8003ecc <HAL_GPIO_Init+0x300>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_GPIO_Init+0x1f2>
 8003dba:	2304      	movs	r3, #4
 8003dbc:	e008      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dbe:	2307      	movs	r3, #7
 8003dc0:	e006      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e004      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e002      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	f002 0203 	and.w	r2, r2, #3
 8003dd6:	0092      	lsls	r2, r2, #2
 8003dd8:	4093      	lsls	r3, r2
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003de0:	4935      	ldr	r1, [pc, #212]	; (8003eb8 <HAL_GPIO_Init+0x2ec>)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	3302      	adds	r3, #2
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dee:	4b38      	ldr	r3, [pc, #224]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e12:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e3c:	4a24      	ldr	r2, [pc, #144]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e42:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e66:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e6c:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e90:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	f67f aea2 	bls.w	8003be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3724      	adds	r7, #36	; 0x24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40013800 	.word	0x40013800
 8003ebc:	40020000 	.word	0x40020000
 8003ec0:	40020400 	.word	0x40020400
 8003ec4:	40020800 	.word	0x40020800
 8003ec8:	40020c00 	.word	0x40020c00
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40013c00 	.word	0x40013c00

08003ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	807b      	strh	r3, [r7, #2]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee4:	787b      	ldrb	r3, [r7, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ef0:	e003      	b.n	8003efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ef2:	887b      	ldrh	r3, [r7, #2]
 8003ef4:	041a      	lsls	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	619a      	str	r2, [r3, #24]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e267      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d075      	beq.n	8004012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f26:	4b88      	ldr	r3, [pc, #544]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d00c      	beq.n	8003f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b85      	ldr	r3, [pc, #532]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d112      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3e:	4b82      	ldr	r3, [pc, #520]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4a:	d10b      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	4b7e      	ldr	r3, [pc, #504]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d05b      	beq.n	8004010 <HAL_RCC_OscConfig+0x108>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d157      	bne.n	8004010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e242      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6c:	d106      	bne.n	8003f7c <HAL_RCC_OscConfig+0x74>
 8003f6e:	4b76      	ldr	r3, [pc, #472]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a75      	ldr	r2, [pc, #468]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e01d      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x98>
 8003f86:	4b70      	ldr	r3, [pc, #448]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6f      	ldr	r2, [pc, #444]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6c      	ldr	r2, [pc, #432]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003fa0:	4b69      	ldr	r3, [pc, #420]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a68      	ldr	r2, [pc, #416]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b66      	ldr	r3, [pc, #408]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a65      	ldr	r2, [pc, #404]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7ff f89c 	bl	80030fc <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7ff f898 	bl	80030fc <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e207      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b5b      	ldr	r3, [pc, #364]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xc0>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7ff f888 	bl	80030fc <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7ff f884 	bl	80030fc <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1f3      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	4b51      	ldr	r3, [pc, #324]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xe8>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d063      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800401e:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004032:	2b08      	cmp	r3, #8
 8004034:	d11c      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b44      	ldr	r3, [pc, #272]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d116      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	4b41      	ldr	r3, [pc, #260]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e1c7      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4937      	ldr	r1, [pc, #220]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	e03a      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004078:	4b34      	ldr	r3, [pc, #208]	; (800414c <HAL_RCC_OscConfig+0x244>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7ff f83d 	bl	80030fc <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004086:	f7ff f839 	bl	80030fc <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e1a8      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004098:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a4:	4b28      	ldr	r3, [pc, #160]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4925      	ldr	r1, [pc, #148]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]
 80040b8:	e015      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ba:	4b24      	ldr	r3, [pc, #144]	; (800414c <HAL_RCC_OscConfig+0x244>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7ff f81c 	bl	80030fc <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c8:	f7ff f818 	bl	80030fc <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e187      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d036      	beq.n	8004160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d016      	beq.n	8004128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <HAL_RCC_OscConfig+0x248>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fe fffc 	bl	80030fc <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004108:	f7fe fff8 	bl	80030fc <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e167      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800411c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x200>
 8004126:	e01b      	b.n	8004160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_OscConfig+0x248>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fe ffe5 	bl	80030fc <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004134:	e00e      	b.n	8004154 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004136:	f7fe ffe1 	bl	80030fc <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d907      	bls.n	8004154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e150      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
 8004148:	40023800 	.word	0x40023800
 800414c:	42470000 	.word	0x42470000
 8004150:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004154:	4b88      	ldr	r3, [pc, #544]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ea      	bne.n	8004136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8097 	beq.w	800429c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004172:	4b81      	ldr	r3, [pc, #516]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	4b7d      	ldr	r3, [pc, #500]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4a7c      	ldr	r2, [pc, #496]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418c:	6413      	str	r3, [r2, #64]	; 0x40
 800418e:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b77      	ldr	r3, [pc, #476]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d118      	bne.n	80041dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041aa:	4b74      	ldr	r3, [pc, #464]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a73      	ldr	r2, [pc, #460]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b6:	f7fe ffa1 	bl	80030fc <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7fe ff9d 	bl	80030fc <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e10c      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	4b6a      	ldr	r3, [pc, #424]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x2ea>
 80041e4:	4b64      	ldr	r3, [pc, #400]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	4a63      	ldr	r2, [pc, #396]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6713      	str	r3, [r2, #112]	; 0x70
 80041f0:	e01c      	b.n	800422c <HAL_RCC_OscConfig+0x324>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0x30c>
 80041fa:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	4a5e      	ldr	r2, [pc, #376]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004200:	f043 0304 	orr.w	r3, r3, #4
 8004204:	6713      	str	r3, [r2, #112]	; 0x70
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	4a5b      	ldr	r2, [pc, #364]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6713      	str	r3, [r2, #112]	; 0x70
 8004212:	e00b      	b.n	800422c <HAL_RCC_OscConfig+0x324>
 8004214:	4b58      	ldr	r3, [pc, #352]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	4a57      	ldr	r2, [pc, #348]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	6713      	str	r3, [r2, #112]	; 0x70
 8004220:	4b55      	ldr	r3, [pc, #340]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a54      	ldr	r2, [pc, #336]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004226:	f023 0304 	bic.w	r3, r3, #4
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7fe ff62 	bl	80030fc <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	e00a      	b.n	8004252 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fe ff5e 	bl	80030fc <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e0cb      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004252:	4b49      	ldr	r3, [pc, #292]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ee      	beq.n	800423c <HAL_RCC_OscConfig+0x334>
 800425e:	e014      	b.n	800428a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004260:	f7fe ff4c 	bl	80030fc <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004266:	e00a      	b.n	800427e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fe ff48 	bl	80030fc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0b5      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427e:	4b3e      	ldr	r3, [pc, #248]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1ee      	bne.n	8004268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d105      	bne.n	800429c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004290:	4b39      	ldr	r3, [pc, #228]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	4a38      	ldr	r2, [pc, #224]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a1 	beq.w	80043e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d05c      	beq.n	800436c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d141      	bne.n	800433e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4b31      	ldr	r3, [pc, #196]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fe ff1c 	bl	80030fc <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fe ff18 	bl	80030fc <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e087      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042da:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	3b01      	subs	r3, #1
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	491b      	ldr	r1, [pc, #108]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7fe fef1 	bl	80030fc <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431e:	f7fe feed 	bl	80030fc <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e05c      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004330:	4b11      	ldr	r3, [pc, #68]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x416>
 800433c:	e054      	b.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fe feda 	bl	80030fc <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434c:	f7fe fed6 	bl	80030fc <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e045      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x444>
 800436a:	e03d      	b.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d107      	bne.n	8004384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e038      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
 8004378:	40023800 	.word	0x40023800
 800437c:	40007000 	.word	0x40007000
 8004380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCC_OscConfig+0x4ec>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d028      	beq.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d121      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d11a      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043bc:	4293      	cmp	r3, r2
 80043be:	d111      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	3b01      	subs	r3, #1
 80043ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800

080043f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0cc      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b68      	ldr	r3, [pc, #416]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d90c      	bls.n	8004434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b65      	ldr	r3, [pc, #404]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0b8      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d020      	beq.n	8004482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800444c:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a58      	ldr	r2, [pc, #352]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004464:	4b53      	ldr	r3, [pc, #332]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a52      	ldr	r2, [pc, #328]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800446e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004470:	4b50      	ldr	r3, [pc, #320]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	494d      	ldr	r1, [pc, #308]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d044      	beq.n	8004518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d119      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e07f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b6:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e06f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c6:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e067      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f023 0203 	bic.w	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4934      	ldr	r1, [pc, #208]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e8:	f7fe fe08 	bl	80030fc <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7fe fe04 	bl	80030fc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e04f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 020c 	and.w	r2, r3, #12
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	429a      	cmp	r2, r3
 8004516:	d1eb      	bne.n	80044f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d20c      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e032      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800454c:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4916      	ldr	r1, [pc, #88]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	490e      	ldr	r1, [pc, #56]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800457e:	f000 f821 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 8004582:	4602      	mov	r2, r0
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	490a      	ldr	r1, [pc, #40]	; (80045b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	5ccb      	ldrb	r3, [r1, r3]
 8004592:	fa22 f303 	lsr.w	r3, r2, r3
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_ClockConfig+0x1c8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe fd68 	bl	8003074 <HAL_InitTick>

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40023c00 	.word	0x40023c00
 80045b4:	40023800 	.word	0x40023800
 80045b8:	08009124 	.word	0x08009124
 80045bc:	200000f8 	.word	0x200000f8
 80045c0:	200000fc 	.word	0x200000fc

080045c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c8:	b090      	sub	sp, #64	; 0x40
 80045ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
 80045d0:	2300      	movs	r3, #0
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d4:	2300      	movs	r3, #0
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045dc:	4b59      	ldr	r3, [pc, #356]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d00d      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x40>
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	f200 80a1 	bhi.w	8004730 <HAL_RCC_GetSysClockFreq+0x16c>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x34>
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0x3a>
 80045f6:	e09b      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4b53      	ldr	r3, [pc, #332]	; (8004748 <HAL_RCC_GetSysClockFreq+0x184>)
 80045fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80045fc:	e09b      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045fe:	4b53      	ldr	r3, [pc, #332]	; (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004602:	e098      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004604:	4b4f      	ldr	r3, [pc, #316]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800460e:	4b4d      	ldr	r3, [pc, #308]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d028      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461a:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	099b      	lsrs	r3, r3, #6
 8004620:	2200      	movs	r2, #0
 8004622:	623b      	str	r3, [r7, #32]
 8004624:	627a      	str	r2, [r7, #36]	; 0x24
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800462c:	2100      	movs	r1, #0
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 8004630:	fb03 f201 	mul.w	r2, r3, r1
 8004634:	2300      	movs	r3, #0
 8004636:	fb00 f303 	mul.w	r3, r0, r3
 800463a:	4413      	add	r3, r2
 800463c:	4a43      	ldr	r2, [pc, #268]	; (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 800463e:	fba0 1202 	umull	r1, r2, r0, r2
 8004642:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004644:	460a      	mov	r2, r1
 8004646:	62ba      	str	r2, [r7, #40]	; 0x28
 8004648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464a:	4413      	add	r3, r2
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004650:	2200      	movs	r2, #0
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	61fa      	str	r2, [r7, #28]
 8004656:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800465a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800465e:	f7fb fe17 	bl	8000290 <__aeabi_uldivmod>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4613      	mov	r3, r2
 8004668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800466a:	e053      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466c:	4b35      	ldr	r3, [pc, #212]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	2200      	movs	r2, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	617a      	str	r2, [r7, #20]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800467e:	f04f 0b00 	mov.w	fp, #0
 8004682:	4652      	mov	r2, sl
 8004684:	465b      	mov	r3, fp
 8004686:	f04f 0000 	mov.w	r0, #0
 800468a:	f04f 0100 	mov.w	r1, #0
 800468e:	0159      	lsls	r1, r3, #5
 8004690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004694:	0150      	lsls	r0, r2, #5
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	ebb2 080a 	subs.w	r8, r2, sl
 800469e:	eb63 090b 	sbc.w	r9, r3, fp
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046b6:	ebb2 0408 	subs.w	r4, r2, r8
 80046ba:	eb63 0509 	sbc.w	r5, r3, r9
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	00eb      	lsls	r3, r5, #3
 80046c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046cc:	00e2      	lsls	r2, r4, #3
 80046ce:	4614      	mov	r4, r2
 80046d0:	461d      	mov	r5, r3
 80046d2:	eb14 030a 	adds.w	r3, r4, sl
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	eb45 030b 	adc.w	r3, r5, fp
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ea:	4629      	mov	r1, r5
 80046ec:	028b      	lsls	r3, r1, #10
 80046ee:	4621      	mov	r1, r4
 80046f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046f4:	4621      	mov	r1, r4
 80046f6:	028a      	lsls	r2, r1, #10
 80046f8:	4610      	mov	r0, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	2200      	movs	r2, #0
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	60fa      	str	r2, [r7, #12]
 8004704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004708:	f7fb fdc2 	bl	8000290 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4613      	mov	r3, r2
 8004712:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	3301      	adds	r3, #1
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800472e:	e002      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_RCC_GetSysClockFreq+0x184>)
 8004732:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004738:	4618      	mov	r0, r3
 800473a:	3740      	adds	r7, #64	; 0x40
 800473c:	46bd      	mov	sp, r7
 800473e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	00f42400 	.word	0x00f42400
 800474c:	017d7840 	.word	0x017d7840

08004750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <HAL_RCC_GetHCLKFreq+0x14>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	200000f8 	.word	0x200000f8

08004768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800476c:	f7ff fff0 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0a9b      	lsrs	r3, r3, #10
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4903      	ldr	r1, [pc, #12]	; (800478c <HAL_RCC_GetPCLK1Freq+0x24>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	08009134 	.word	0x08009134

08004790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004794:	f7ff ffdc 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	0b5b      	lsrs	r3, r3, #13
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4903      	ldr	r1, [pc, #12]	; (80047b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40023800 	.word	0x40023800
 80047b4:	08009134 	.word	0x08009134

080047b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e041      	b.n	800484e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fe f9ec 	bl	8002bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f000 fd82 	bl	8005300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d001      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e044      	b.n	80048fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <HAL_TIM_Base_Start_IT+0xb0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d018      	beq.n	80048c4 <HAL_TIM_Base_Start_IT+0x6c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489a:	d013      	beq.n	80048c4 <HAL_TIM_Base_Start_IT+0x6c>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1a      	ldr	r2, [pc, #104]	; (800490c <HAL_TIM_Base_Start_IT+0xb4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00e      	beq.n	80048c4 <HAL_TIM_Base_Start_IT+0x6c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a19      	ldr	r2, [pc, #100]	; (8004910 <HAL_TIM_Base_Start_IT+0xb8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d009      	beq.n	80048c4 <HAL_TIM_Base_Start_IT+0x6c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <HAL_TIM_Base_Start_IT+0xbc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <HAL_TIM_Base_Start_IT+0x6c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a16      	ldr	r2, [pc, #88]	; (8004918 <HAL_TIM_Base_Start_IT+0xc0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d111      	bne.n	80048e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b06      	cmp	r3, #6
 80048d4:	d010      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e6:	e007      	b.n	80048f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40010000 	.word	0x40010000
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800
 8004914:	40000c00 	.word	0x40000c00
 8004918:	40014000 	.word	0x40014000

0800491c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	f241 1311 	movw	r3, #4369	; 0x1111
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10f      	bne.n	8004964 <HAL_TIM_Base_Stop_IT+0x48>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a1a      	ldr	r2, [r3, #32]
 800494a:	f240 4344 	movw	r3, #1092	; 0x444
 800494e:	4013      	ands	r3, r2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d107      	bne.n	8004964 <HAL_TIM_Base_Stop_IT+0x48>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0201 	bic.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e041      	b.n	8004a10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f839 	bl	8004a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f000 fca1 	bl	8005300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <HAL_TIM_PWM_Start_IT+0x28>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e022      	b.n	8004a9a <HAL_TIM_PWM_Start_IT+0x6e>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d109      	bne.n	8004a6e <HAL_TIM_PWM_Start_IT+0x42>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	bf14      	ite	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	2300      	moveq	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	e015      	b.n	8004a9a <HAL_TIM_PWM_Start_IT+0x6e>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d109      	bne.n	8004a88 <HAL_TIM_PWM_Start_IT+0x5c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e008      	b.n	8004a9a <HAL_TIM_PWM_Start_IT+0x6e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e0b3      	b.n	8004c0a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start_IT+0x86>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab0:	e013      	b.n	8004ada <HAL_TIM_PWM_Start_IT+0xae>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start_IT+0x96>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac0:	e00b      	b.n	8004ada <HAL_TIM_PWM_Start_IT+0xae>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_PWM_Start_IT+0xa6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad0:	e003      	b.n	8004ada <HAL_TIM_PWM_Start_IT+0xae>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	d841      	bhi.n	8004b64 <HAL_TIM_PWM_Start_IT+0x138>
 8004ae0:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004b65 	.word	0x08004b65
 8004af0:	08004b65 	.word	0x08004b65
 8004af4:	08004b65 	.word	0x08004b65
 8004af8:	08004b2f 	.word	0x08004b2f
 8004afc:	08004b65 	.word	0x08004b65
 8004b00:	08004b65 	.word	0x08004b65
 8004b04:	08004b65 	.word	0x08004b65
 8004b08:	08004b41 	.word	0x08004b41
 8004b0c:	08004b65 	.word	0x08004b65
 8004b10:	08004b65 	.word	0x08004b65
 8004b14:	08004b65 	.word	0x08004b65
 8004b18:	08004b53 	.word	0x08004b53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0202 	orr.w	r2, r2, #2
 8004b2a:	60da      	str	r2, [r3, #12]
      break;
 8004b2c:	e01d      	b.n	8004b6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0204 	orr.w	r2, r2, #4
 8004b3c:	60da      	str	r2, [r3, #12]
      break;
 8004b3e:	e014      	b.n	8004b6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0208 	orr.w	r2, r2, #8
 8004b4e:	60da      	str	r2, [r3, #12]
      break;
 8004b50:	e00b      	b.n	8004b6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0210 	orr.w	r2, r2, #16
 8004b60:	60da      	str	r2, [r3, #12]
      break;
 8004b62:	e002      	b.n	8004b6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
      break;
 8004b68:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d14b      	bne.n	8004c08 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2201      	movs	r2, #1
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fe67 	bl	800584c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a24      	ldr	r2, [pc, #144]	; (8004c14 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d107      	bne.n	8004b98 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b96:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d018      	beq.n	8004bd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004baa:	d013      	beq.n	8004bd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00e      	beq.n	8004bd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a18      	ldr	r2, [pc, #96]	; (8004c1c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d009      	beq.n	8004bd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a16      	ldr	r2, [pc, #88]	; (8004c20 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d111      	bne.n	8004bf8 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b06      	cmp	r3, #6
 8004be4:	d010      	beq.n	8004c08 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf6:	e007      	b.n	8004c08 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40000c00 	.word	0x40000c00
 8004c24:	40014000 	.word	0x40014000

08004c28 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b0c      	cmp	r3, #12
 8004c3a:	d841      	bhi.n	8004cc0 <HAL_TIM_PWM_Stop_IT+0x98>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c79 	.word	0x08004c79
 8004c48:	08004cc1 	.word	0x08004cc1
 8004c4c:	08004cc1 	.word	0x08004cc1
 8004c50:	08004cc1 	.word	0x08004cc1
 8004c54:	08004c8b 	.word	0x08004c8b
 8004c58:	08004cc1 	.word	0x08004cc1
 8004c5c:	08004cc1 	.word	0x08004cc1
 8004c60:	08004cc1 	.word	0x08004cc1
 8004c64:	08004c9d 	.word	0x08004c9d
 8004c68:	08004cc1 	.word	0x08004cc1
 8004c6c:	08004cc1 	.word	0x08004cc1
 8004c70:	08004cc1 	.word	0x08004cc1
 8004c74:	08004caf 	.word	0x08004caf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0202 	bic.w	r2, r2, #2
 8004c86:	60da      	str	r2, [r3, #12]
      break;
 8004c88:	e01d      	b.n	8004cc6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0204 	bic.w	r2, r2, #4
 8004c98:	60da      	str	r2, [r3, #12]
      break;
 8004c9a:	e014      	b.n	8004cc6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0208 	bic.w	r2, r2, #8
 8004caa:	60da      	str	r2, [r3, #12]
      break;
 8004cac:	e00b      	b.n	8004cc6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0210 	bic.w	r2, r2, #16
 8004cbc:	60da      	str	r2, [r3, #12]
      break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d157      	bne.n	8004d7c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fdb9 	bl	800584c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <HAL_TIM_PWM_Stop_IT+0x160>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d117      	bne.n	8004d14 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	f241 1311 	movw	r3, #4369	; 0x1111
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <HAL_TIM_PWM_Stop_IT+0xec>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a1a      	ldr	r2, [r3, #32]
 8004cfa:	f240 4344 	movw	r3, #1092	; 0x444
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_PWM_Stop_IT+0xec>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d12:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10f      	bne.n	8004d44 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	f240 4344 	movw	r3, #1092	; 0x444
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <HAL_TIM_PWM_Stop_IT+0x12c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d52:	e013      	b.n	8004d7c <HAL_TIM_PWM_Stop_IT+0x154>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d104      	bne.n	8004d64 <HAL_TIM_PWM_Stop_IT+0x13c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d62:	e00b      	b.n	8004d7c <HAL_TIM_PWM_Stop_IT+0x154>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d104      	bne.n	8004d74 <HAL_TIM_PWM_Stop_IT+0x14c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d72:	e003      	b.n	8004d7c <HAL_TIM_PWM_Stop_IT+0x154>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40010000 	.word	0x40010000

08004d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d122      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d11b      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0202 	mvn.w	r2, #2
 8004db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fa77 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fa69 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fa7a 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d122      	bne.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d11b      	bne.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0204 	mvn.w	r2, #4
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa4d 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa3f 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fa50 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d122      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d11b      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0208 	mvn.w	r2, #8
 8004e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2204      	movs	r2, #4
 8004e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fa23 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 8004e7c:	e005      	b.n	8004e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fa15 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fa26 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b10      	cmp	r3, #16
 8004e9c:	d122      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d11b      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0210 	mvn.w	r2, #16
 8004eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f9f9 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 8004ed0:	e005      	b.n	8004ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f9eb 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f9fc 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0201 	mvn.w	r2, #1
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fc fe40 	bl	8001b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1a:	2b80      	cmp	r3, #128	; 0x80
 8004f1c:	d10e      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fd26 	bl	8005988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d10e      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d107      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f9c1 	bl	80052ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d10e      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d107      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0220 	mvn.w	r2, #32
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fcf0 	bl	8005974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e0ae      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b0c      	cmp	r3, #12
 8004fc6:	f200 809f 	bhi.w	8005108 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004fca:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08005005 	.word	0x08005005
 8004fd4:	08005109 	.word	0x08005109
 8004fd8:	08005109 	.word	0x08005109
 8004fdc:	08005109 	.word	0x08005109
 8004fe0:	08005045 	.word	0x08005045
 8004fe4:	08005109 	.word	0x08005109
 8004fe8:	08005109 	.word	0x08005109
 8004fec:	08005109 	.word	0x08005109
 8004ff0:	08005087 	.word	0x08005087
 8004ff4:	08005109 	.word	0x08005109
 8004ff8:	08005109 	.word	0x08005109
 8004ffc:	08005109 	.word	0x08005109
 8005000:	080050c7 	.word	0x080050c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 f9f8 	bl	8005400 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0208 	orr.w	r2, r2, #8
 800501e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0204 	bic.w	r2, r2, #4
 800502e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6999      	ldr	r1, [r3, #24]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	619a      	str	r2, [r3, #24]
      break;
 8005042:	e064      	b.n	800510e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fa3e 	bl	80054cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	619a      	str	r2, [r3, #24]
      break;
 8005084:	e043      	b.n	800510e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fa89 	bl	80055a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0208 	orr.w	r2, r2, #8
 80050a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0204 	bic.w	r2, r2, #4
 80050b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69d9      	ldr	r1, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	61da      	str	r2, [r3, #28]
      break;
 80050c4:	e023      	b.n	800510e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fad3 	bl	8005678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	021a      	lsls	r2, r3, #8
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	61da      	str	r2, [r3, #28]
      break;
 8005106:	e002      	b.n	800510e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	75fb      	strb	r3, [r7, #23]
      break;
 800510c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005116:	7dfb      	ldrb	r3, [r7, #23]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIM_ConfigClockSource+0x1c>
 8005138:	2302      	movs	r3, #2
 800513a:	e0b4      	b.n	80052a6 <HAL_TIM_ConfigClockSource+0x186>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800515a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005174:	d03e      	beq.n	80051f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800517a:	f200 8087 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x16c>
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005182:	f000 8086 	beq.w	8005292 <HAL_TIM_ConfigClockSource+0x172>
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518a:	d87f      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 800518c:	2b70      	cmp	r3, #112	; 0x70
 800518e:	d01a      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005190:	2b70      	cmp	r3, #112	; 0x70
 8005192:	d87b      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 8005194:	2b60      	cmp	r3, #96	; 0x60
 8005196:	d050      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x11a>
 8005198:	2b60      	cmp	r3, #96	; 0x60
 800519a:	d877      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 800519c:	2b50      	cmp	r3, #80	; 0x50
 800519e:	d03c      	beq.n	800521a <HAL_TIM_ConfigClockSource+0xfa>
 80051a0:	2b50      	cmp	r3, #80	; 0x50
 80051a2:	d873      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051a4:	2b40      	cmp	r3, #64	; 0x40
 80051a6:	d058      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x13a>
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d86f      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051ac:	2b30      	cmp	r3, #48	; 0x30
 80051ae:	d064      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051b0:	2b30      	cmp	r3, #48	; 0x30
 80051b2:	d86b      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d060      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d867      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d05c      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d05a      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051c4:	e062      	b.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6899      	ldr	r1, [r3, #8]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f000 fb19 	bl	800580c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	609a      	str	r2, [r3, #8]
      break;
 80051f2:	e04f      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6899      	ldr	r1, [r3, #8]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f000 fb02 	bl	800580c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005216:	609a      	str	r2, [r3, #8]
      break;
 8005218:	e03c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	461a      	mov	r2, r3
 8005228:	f000 fa76 	bl	8005718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2150      	movs	r1, #80	; 0x50
 8005232:	4618      	mov	r0, r3
 8005234:	f000 facf 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8005238:	e02c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	461a      	mov	r2, r3
 8005248:	f000 fa95 	bl	8005776 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2160      	movs	r1, #96	; 0x60
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fabf 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8005258:	e01c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	461a      	mov	r2, r3
 8005268:	f000 fa56 	bl	8005718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2140      	movs	r1, #64	; 0x40
 8005272:	4618      	mov	r0, r3
 8005274:	f000 faaf 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8005278:	e00c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f000 faa6 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 800528a:	e003      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
      break;
 8005290:	e000      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a34      	ldr	r2, [pc, #208]	; (80053e4 <TIM_Base_SetConfig+0xe4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00f      	beq.n	8005338 <TIM_Base_SetConfig+0x38>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531e:	d00b      	beq.n	8005338 <TIM_Base_SetConfig+0x38>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a31      	ldr	r2, [pc, #196]	; (80053e8 <TIM_Base_SetConfig+0xe8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d007      	beq.n	8005338 <TIM_Base_SetConfig+0x38>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a30      	ldr	r2, [pc, #192]	; (80053ec <TIM_Base_SetConfig+0xec>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_Base_SetConfig+0x38>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a2f      	ldr	r2, [pc, #188]	; (80053f0 <TIM_Base_SetConfig+0xf0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d108      	bne.n	800534a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a25      	ldr	r2, [pc, #148]	; (80053e4 <TIM_Base_SetConfig+0xe4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01b      	beq.n	800538a <TIM_Base_SetConfig+0x8a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d017      	beq.n	800538a <TIM_Base_SetConfig+0x8a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <TIM_Base_SetConfig+0xe8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <TIM_Base_SetConfig+0x8a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a21      	ldr	r2, [pc, #132]	; (80053ec <TIM_Base_SetConfig+0xec>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00f      	beq.n	800538a <TIM_Base_SetConfig+0x8a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a20      	ldr	r2, [pc, #128]	; (80053f0 <TIM_Base_SetConfig+0xf0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00b      	beq.n	800538a <TIM_Base_SetConfig+0x8a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1f      	ldr	r2, [pc, #124]	; (80053f4 <TIM_Base_SetConfig+0xf4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d007      	beq.n	800538a <TIM_Base_SetConfig+0x8a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a1e      	ldr	r2, [pc, #120]	; (80053f8 <TIM_Base_SetConfig+0xf8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_Base_SetConfig+0x8a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <TIM_Base_SetConfig+0xfc>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d108      	bne.n	800539c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a08      	ldr	r2, [pc, #32]	; (80053e4 <TIM_Base_SetConfig+0xe4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d103      	bne.n	80053d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	615a      	str	r2, [r3, #20]
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40000c00 	.word	0x40000c00
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400
 80053fc:	40014800 	.word	0x40014800

08005400 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f023 0302 	bic.w	r3, r3, #2
 8005448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a1c      	ldr	r2, [pc, #112]	; (80054c8 <TIM_OC1_SetConfig+0xc8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d10c      	bne.n	8005476 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0308 	bic.w	r3, r3, #8
 8005462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <TIM_OC1_SetConfig+0xc8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d111      	bne.n	80054a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800548c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	621a      	str	r2, [r3, #32]
}
 80054bc:	bf00      	nop
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	40010000 	.word	0x40010000

080054cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f023 0210 	bic.w	r2, r3, #16
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f023 0320 	bic.w	r3, r3, #32
 8005516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <TIM_OC2_SetConfig+0xd4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d10d      	bne.n	8005548 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a15      	ldr	r2, [pc, #84]	; (80055a0 <TIM_OC2_SetConfig+0xd4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d113      	bne.n	8005578 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800555e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40010000 	.word	0x40010000

080055a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <TIM_OC3_SetConfig+0xd0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d10d      	bne.n	800561e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800561c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a14      	ldr	r2, [pc, #80]	; (8005674 <TIM_OC3_SetConfig+0xd0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d113      	bne.n	800564e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800562c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	621a      	str	r2, [r3, #32]
}
 8005668:	bf00      	nop
 800566a:	371c      	adds	r7, #28
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	40010000 	.word	0x40010000

08005678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	021b      	lsls	r3, r3, #8
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	031b      	lsls	r3, r3, #12
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a10      	ldr	r2, [pc, #64]	; (8005714 <TIM_OC4_SetConfig+0x9c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d109      	bne.n	80056ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	019b      	lsls	r3, r3, #6
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40010000 	.word	0x40010000

08005718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f023 0201 	bic.w	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 030a 	bic.w	r3, r3, #10
 8005754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005776:	b480      	push	{r7}
 8005778:	b087      	sub	sp, #28
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0210 	bic.w	r2, r3, #16
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	031b      	lsls	r3, r3, #12
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f043 0307 	orr.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	021a      	lsls	r2, r3, #8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	431a      	orrs	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4313      	orrs	r3, r2
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	609a      	str	r2, [r3, #8]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	2201      	movs	r2, #1
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1a      	ldr	r2, [r3, #32]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	43db      	mvns	r3, r3
 800586e:	401a      	ands	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	fa01 f303 	lsl.w	r3, r1, r3
 8005884:	431a      	orrs	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e050      	b.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d018      	beq.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fc:	d013      	beq.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a18      	ldr	r2, [pc, #96]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a16      	ldr	r2, [pc, #88]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a15      	ldr	r2, [pc, #84]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a13      	ldr	r2, [pc, #76]	; (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d10c      	bne.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800592c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	4313      	orrs	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40010000 	.word	0x40010000
 8005964:	40000400 	.word	0x40000400
 8005968:	40000800 	.word	0x40000800
 800596c:	40000c00 	.word	0x40000c00
 8005970:	40014000 	.word	0x40014000

08005974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e03f      	b.n	8005a2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fd f922 	bl	8002c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2224      	movs	r2, #36	; 0x24
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 ff87 	bl	80068f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695a      	ldr	r2, [r3, #20]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b08a      	sub	sp, #40	; 0x28
 8005a3a:	af02      	add	r7, sp, #8
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d17c      	bne.n	8005b50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_UART_Transmit+0x2c>
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e075      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_UART_Transmit+0x3e>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e06e      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2221      	movs	r2, #33	; 0x21
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a8a:	f7fd fb37 	bl	80030fc <HAL_GetTick>
 8005a8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	88fa      	ldrh	r2, [r7, #6]
 8005a94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa4:	d108      	bne.n	8005ab8 <HAL_UART_Transmit+0x82>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e003      	b.n	8005ac0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ac8:	e02a      	b.n	8005b20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fc3f 	bl	8006358 <UART_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e036      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	3302      	adds	r3, #2
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e007      	b.n	8005b12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1cf      	bne.n	8005aca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2200      	movs	r2, #0
 8005b32:	2140      	movs	r1, #64	; 0x40
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fc0f 	bl	8006358 <UART_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e006      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e000      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
  }
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	4613      	mov	r3, r2
 8005b66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d11d      	bne.n	8005bb0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <HAL_UART_Receive_DMA+0x26>
 8005b7a:	88fb      	ldrh	r3, [r7, #6]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e016      	b.n	8005bb2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Receive_DMA+0x38>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	e00f      	b.n	8005bb2 <HAL_UART_Receive_DMA+0x58>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ba0:	88fb      	ldrh	r3, [r7, #6]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fc44 	bl	8006434 <UART_Start_Receive_DMA>
 8005bac:	4603      	mov	r3, r0
 8005bae:	e000      	b.n	8005bb2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bb0:	2302      	movs	r3, #2
  }
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b0ba      	sub	sp, #232	; 0xe8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10f      	bne.n	8005c22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <HAL_UART_IRQHandler+0x66>
 8005c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fdaf 	bl	800677e <UART_Receive_IT>
      return;
 8005c20:	e256      	b.n	80060d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 80de 	beq.w	8005de8 <HAL_UART_IRQHandler+0x22c>
 8005c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 80d1 	beq.w	8005de8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <HAL_UART_IRQHandler+0xae>
 8005c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f043 0201 	orr.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <HAL_UART_IRQHandler+0xd2>
 8005c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f043 0202 	orr.w	r2, r3, #2
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00b      	beq.n	8005cb2 <HAL_UART_IRQHandler+0xf6>
 8005c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f043 0204 	orr.w	r2, r3, #4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d011      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x126>
 8005cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d105      	bne.n	8005cd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f043 0208 	orr.w	r2, r3, #8
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 81ed 	beq.w	80060c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_UART_IRQHandler+0x14e>
 8005cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fd3a 	bl	800677e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d14:	2b40      	cmp	r3, #64	; 0x40
 8005d16:	bf0c      	ite	eq
 8005d18:	2301      	moveq	r3, #1
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <HAL_UART_IRQHandler+0x17a>
 8005d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d04f      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fc42 	bl	80065c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d46:	2b40      	cmp	r3, #64	; 0x40
 8005d48:	d141      	bne.n	8005dce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3314      	adds	r3, #20
 8005d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1d9      	bne.n	8005d4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d013      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	4a7d      	ldr	r2, [pc, #500]	; (8005f98 <HAL_UART_IRQHandler+0x3dc>)
 8005da4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fd fc3a 	bl	8003624 <HAL_DMA_Abort_IT>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d016      	beq.n	8005de4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc4:	e00e      	b.n	8005de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f99a 	bl	8006100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	e00a      	b.n	8005de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f996 	bl	8006100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd4:	e006      	b.n	8005de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f992 	bl	8006100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005de2:	e170      	b.n	80060c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de4:	bf00      	nop
    return;
 8005de6:	e16e      	b.n	80060c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	f040 814a 	bne.w	8006086 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8143 	beq.w	8006086 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 813c 	beq.w	8006086 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	60bb      	str	r3, [r7, #8]
 8005e22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	f040 80b4 	bne.w	8005f9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8140 	beq.w	80060ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e52:	429a      	cmp	r2, r3
 8005e54:	f080 8139 	bcs.w	80060ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6a:	f000 8088 	beq.w	8005f7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	330c      	adds	r3, #12
 8005e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1d9      	bne.n	8005e6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3314      	adds	r3, #20
 8005ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ecc:	f023 0301 	bic.w	r3, r3, #1
 8005ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3314      	adds	r3, #20
 8005eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ede:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e1      	bne.n	8005eba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3314      	adds	r3, #20
 8005efc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3314      	adds	r3, #20
 8005f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e3      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4e:	f023 0310 	bic.w	r3, r3, #16
 8005f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f60:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e3      	bne.n	8005f3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fd fae3 	bl	8003544 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8c0 	bl	8006114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f94:	e099      	b.n	80060ca <HAL_UART_IRQHandler+0x50e>
 8005f96:	bf00      	nop
 8005f98:	08006687 	.word	0x08006687
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 808b 	beq.w	80060ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8086 	beq.w	80060ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fe6:	647a      	str	r2, [r7, #68]	; 0x44
 8005fe8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e3      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3314      	adds	r3, #20
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	623b      	str	r3, [r7, #32]
   return(result);
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3314      	adds	r3, #20
 800601a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800601e:	633a      	str	r2, [r7, #48]	; 0x30
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e3      	bne.n	8005ffa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0310 	bic.w	r3, r3, #16
 8006056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006064:	61fa      	str	r2, [r7, #28]
 8006066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	69b9      	ldr	r1, [r7, #24]
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	617b      	str	r3, [r7, #20]
   return(result);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e3      	bne.n	8006040 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f848 	bl	8006114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006084:	e023      	b.n	80060ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d009      	beq.n	80060a6 <HAL_UART_IRQHandler+0x4ea>
 8006092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fb05 	bl	80066ae <UART_Transmit_IT>
    return;
 80060a4:	e014      	b.n	80060d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00e      	beq.n	80060d0 <HAL_UART_IRQHandler+0x514>
 80060b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d008      	beq.n	80060d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fb45 	bl	800674e <UART_EndTransmit_IT>
    return;
 80060c4:	e004      	b.n	80060d0 <HAL_UART_IRQHandler+0x514>
    return;
 80060c6:	bf00      	nop
 80060c8:	e002      	b.n	80060d0 <HAL_UART_IRQHandler+0x514>
      return;
 80060ca:	bf00      	nop
 80060cc:	e000      	b.n	80060d0 <HAL_UART_IRQHandler+0x514>
      return;
 80060ce:	bf00      	nop
  }
}
 80060d0:	37e8      	adds	r7, #232	; 0xe8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop

080060d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	2300      	movs	r3, #0
 800613a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006142:	b2db      	uxtb	r3, r3
 8006144:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800614c:	b2db      	uxtb	r3, r3
 800614e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	b2da      	uxtb	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	4313      	orrs	r3, r2
 800615a:	b2db      	uxtb	r3, r3
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b09c      	sub	sp, #112	; 0x70
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006180:	2b00      	cmp	r3, #0
 8006182:	d172      	bne.n	800626a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006186:	2200      	movs	r2, #0
 8006188:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800618a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800619a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800619c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80061a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	330c      	adds	r3, #12
 80061a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80061ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e5      	bne.n	800618a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3314      	adds	r3, #20
 80061c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d0:	f023 0301 	bic.w	r3, r3, #1
 80061d4:	667b      	str	r3, [r7, #100]	; 0x64
 80061d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3314      	adds	r3, #20
 80061dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80061de:	647a      	str	r2, [r7, #68]	; 0x44
 80061e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e5      	bne.n	80061be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3314      	adds	r3, #20
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	623b      	str	r3, [r7, #32]
   return(result);
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006208:	663b      	str	r3, [r7, #96]	; 0x60
 800620a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3314      	adds	r3, #20
 8006210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006212:	633a      	str	r2, [r7, #48]	; 0x30
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e5      	bne.n	80061f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006228:	2220      	movs	r2, #32
 800622a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800622e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	2b01      	cmp	r3, #1
 8006234:	d119      	bne.n	800626a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	60fb      	str	r3, [r7, #12]
   return(result);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f023 0310 	bic.w	r3, r3, #16
 800624c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800624e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	330c      	adds	r3, #12
 8006254:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006256:	61fa      	str	r2, [r7, #28]
 8006258:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	69b9      	ldr	r1, [r7, #24]
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	617b      	str	r3, [r7, #20]
   return(result);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e5      	bne.n	8006236 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800626a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	2b01      	cmp	r3, #1
 8006270:	d106      	bne.n	8006280 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006274:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006276:	4619      	mov	r1, r3
 8006278:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800627a:	f7ff ff4b 	bl	8006114 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800627e:	e002      	b.n	8006286 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006280:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006282:	f7fb fae5 	bl	8001850 <HAL_UART_RxCpltCallback>
}
 8006286:	bf00      	nop
 8006288:	3770      	adds	r7, #112	; 0x70
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d108      	bne.n	80062b6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	4619      	mov	r1, r3
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7ff ff30 	bl	8006114 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062b4:	e002      	b.n	80062bc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff ff18 	bl	80060ec <HAL_UART_RxHalfCpltCallback>
}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e0:	2b80      	cmp	r3, #128	; 0x80
 80062e2:	bf0c      	ite	eq
 80062e4:	2301      	moveq	r3, #1
 80062e6:	2300      	movne	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b21      	cmp	r3, #33	; 0x21
 80062f6:	d108      	bne.n	800630a <UART_DMAError+0x46>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d005      	beq.n	800630a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2200      	movs	r2, #0
 8006302:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006304:	68b8      	ldr	r0, [r7, #8]
 8006306:	f000 f933 	bl	8006570 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	bf0c      	ite	eq
 8006318:	2301      	moveq	r3, #1
 800631a:	2300      	movne	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b22      	cmp	r3, #34	; 0x22
 800632a:	d108      	bne.n	800633e <UART_DMAError+0x7a>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2200      	movs	r2, #0
 8006336:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006338:	68b8      	ldr	r0, [r7, #8]
 800633a:	f000 f941 	bl	80065c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	f043 0210 	orr.w	r2, r3, #16
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800634a:	68b8      	ldr	r0, [r7, #8]
 800634c:	f7ff fed8 	bl	8006100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b090      	sub	sp, #64	; 0x40
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	4613      	mov	r3, r2
 8006366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006368:	e050      	b.n	800640c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800636a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006370:	d04c      	beq.n	800640c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <UART_WaitOnFlagUntilTimeout+0x30>
 8006378:	f7fc fec0 	bl	80030fc <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006384:	429a      	cmp	r2, r3
 8006386:	d241      	bcs.n	800640c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800639e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063a8:	637a      	str	r2, [r7, #52]	; 0x34
 80063aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e5      	bne.n	8006388 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3314      	adds	r3, #20
 80063c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	613b      	str	r3, [r7, #16]
   return(result);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3314      	adds	r3, #20
 80063da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063dc:	623a      	str	r2, [r7, #32]
 80063de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	69f9      	ldr	r1, [r7, #28]
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e5      	bne.n	80063bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e00f      	b.n	800642c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4013      	ands	r3, r2
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	429a      	cmp	r2, r3
 800641a:	bf0c      	ite	eq
 800641c:	2301      	moveq	r3, #1
 800641e:	2300      	movne	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	429a      	cmp	r2, r3
 8006428:	d09f      	beq.n	800636a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3740      	adds	r7, #64	; 0x40
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b098      	sub	sp, #96	; 0x60
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	4613      	mov	r3, r2
 8006440:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	88fa      	ldrh	r2, [r7, #6]
 800644c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2222      	movs	r2, #34	; 0x22
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	4a40      	ldr	r2, [pc, #256]	; (8006564 <UART_Start_Receive_DMA+0x130>)
 8006462:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	4a3f      	ldr	r2, [pc, #252]	; (8006568 <UART_Start_Receive_DMA+0x134>)
 800646a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	4a3e      	ldr	r2, [pc, #248]	; (800656c <UART_Start_Receive_DMA+0x138>)
 8006472:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	2200      	movs	r2, #0
 800647a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800647c:	f107 0308 	add.w	r3, r7, #8
 8006480:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	f7fc fffe 	bl	8003494 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d019      	beq.n	80064f2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	330c      	adds	r3, #12
 80064c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	330c      	adds	r3, #12
 80064dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80064e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80064e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80064ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e5      	bne.n	80064be <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3314      	adds	r3, #20
 80064f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	657b      	str	r3, [r7, #84]	; 0x54
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3314      	adds	r3, #20
 8006510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006512:	63ba      	str	r2, [r7, #56]	; 0x38
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e5      	bne.n	80064f2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3314      	adds	r3, #20
 800652c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	617b      	str	r3, [r7, #20]
   return(result);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800653c:	653b      	str	r3, [r7, #80]	; 0x50
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3314      	adds	r3, #20
 8006544:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006546:	627a      	str	r2, [r7, #36]	; 0x24
 8006548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6a39      	ldr	r1, [r7, #32]
 800654c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	61fb      	str	r3, [r7, #28]
   return(result);
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e5      	bne.n	8006526 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3760      	adds	r7, #96	; 0x60
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	08006169 	.word	0x08006169
 8006568:	0800628f 	.word	0x0800628f
 800656c:	080062c5 	.word	0x080062c5

08006570 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b089      	sub	sp, #36	; 0x24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	60bb      	str	r3, [r7, #8]
   return(result);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	330c      	adds	r3, #12
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	61ba      	str	r2, [r7, #24]
 800659a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6979      	ldr	r1, [r7, #20]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	613b      	str	r3, [r7, #16]
   return(result);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80065b4:	bf00      	nop
 80065b6:	3724      	adds	r7, #36	; 0x24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b095      	sub	sp, #84	; 0x54
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	330c      	adds	r3, #12
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d2:	e853 3f00 	ldrex	r3, [r3]
 80065d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	330c      	adds	r3, #12
 80065e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065e8:	643a      	str	r2, [r7, #64]	; 0x40
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065f0:	e841 2300 	strex	r3, r2, [r1]
 80065f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e5      	bne.n	80065c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3314      	adds	r3, #20
 8006602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	e853 3f00 	ldrex	r3, [r3]
 800660a:	61fb      	str	r3, [r7, #28]
   return(result);
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f023 0301 	bic.w	r3, r3, #1
 8006612:	64bb      	str	r3, [r7, #72]	; 0x48
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3314      	adds	r3, #20
 800661a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800661c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e5      	bne.n	80065fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	2b01      	cmp	r3, #1
 8006636:	d119      	bne.n	800666c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	330c      	adds	r3, #12
 800663e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	60bb      	str	r3, [r7, #8]
   return(result);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f023 0310 	bic.w	r3, r3, #16
 800664e:	647b      	str	r3, [r7, #68]	; 0x44
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	330c      	adds	r3, #12
 8006656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006658:	61ba      	str	r2, [r7, #24]
 800665a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6979      	ldr	r1, [r7, #20]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	613b      	str	r3, [r7, #16]
   return(result);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e5      	bne.n	8006638 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	631a      	str	r2, [r3, #48]	; 0x30
}
 800667a:	bf00      	nop
 800667c:	3754      	adds	r7, #84	; 0x54
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff fd2d 	bl	8006100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066a6:	bf00      	nop
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b085      	sub	sp, #20
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b21      	cmp	r3, #33	; 0x21
 80066c0:	d13e      	bne.n	8006740 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ca:	d114      	bne.n	80066f6 <UART_Transmit_IT+0x48>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d110      	bne.n	80066f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	1c9a      	adds	r2, r3, #2
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	621a      	str	r2, [r3, #32]
 80066f4:	e008      	b.n	8006708 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	1c59      	adds	r1, r3, #1
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6211      	str	r1, [r2, #32]
 8006700:	781a      	ldrb	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29b      	uxth	r3, r3
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	4619      	mov	r1, r3
 8006716:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10f      	bne.n	800673c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800672a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800673a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	e000      	b.n	8006742 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006740:	2302      	movs	r3, #2
  }
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006764:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff fcb2 	bl	80060d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b08c      	sub	sp, #48	; 0x30
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b22      	cmp	r3, #34	; 0x22
 8006790:	f040 80ab 	bne.w	80068ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679c:	d117      	bne.n	80067ce <UART_Receive_IT+0x50>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d113      	bne.n	80067ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067bc:	b29a      	uxth	r2, r3
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	1c9a      	adds	r2, r3, #2
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28
 80067cc:	e026      	b.n	800681c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e0:	d007      	beq.n	80067f2 <UART_Receive_IT+0x74>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <UART_Receive_IT+0x82>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	e008      	b.n	8006812 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800680c:	b2da      	uxtb	r2, r3
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29b      	uxth	r3, r3
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	4619      	mov	r1, r3
 800682a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800682c:	2b00      	cmp	r3, #0
 800682e:	d15a      	bne.n	80068e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0220 	bic.w	r2, r2, #32
 800683e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800684e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0201 	bic.w	r2, r2, #1
 800685e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	2b01      	cmp	r3, #1
 800686e:	d135      	bne.n	80068dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	330c      	adds	r3, #12
 800687c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	613b      	str	r3, [r7, #16]
   return(result);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f023 0310 	bic.w	r3, r3, #16
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	330c      	adds	r3, #12
 8006894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006896:	623a      	str	r2, [r7, #32]
 8006898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	69f9      	ldr	r1, [r7, #28]
 800689c:	6a3a      	ldr	r2, [r7, #32]
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e5      	bne.n	8006876 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	d10a      	bne.n	80068ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068b8:	2300      	movs	r3, #0
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff fc1d 	bl	8006114 <HAL_UARTEx_RxEventCallback>
 80068da:	e002      	b.n	80068e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fa ffb7 	bl	8001850 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e002      	b.n	80068ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e000      	b.n	80068ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80068ea:	2302      	movs	r3, #2
  }
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3730      	adds	r7, #48	; 0x30
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f8:	b0c0      	sub	sp, #256	; 0x100
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006910:	68d9      	ldr	r1, [r3, #12]
 8006912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	ea40 0301 	orr.w	r3, r0, r1
 800691c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800691e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	431a      	orrs	r2, r3
 800692c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	431a      	orrs	r2, r3
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800694c:	f021 010c 	bic.w	r1, r1, #12
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800695a:	430b      	orrs	r3, r1
 800695c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800696a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696e:	6999      	ldr	r1, [r3, #24]
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	ea40 0301 	orr.w	r3, r0, r1
 800697a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800697c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b8f      	ldr	r3, [pc, #572]	; (8006bc0 <UART_SetConfig+0x2cc>)
 8006984:	429a      	cmp	r2, r3
 8006986:	d005      	beq.n	8006994 <UART_SetConfig+0xa0>
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4b8d      	ldr	r3, [pc, #564]	; (8006bc4 <UART_SetConfig+0x2d0>)
 8006990:	429a      	cmp	r2, r3
 8006992:	d104      	bne.n	800699e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006994:	f7fd fefc 	bl	8004790 <HAL_RCC_GetPCLK2Freq>
 8006998:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800699c:	e003      	b.n	80069a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800699e:	f7fd fee3 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 80069a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b0:	f040 810c 	bne.w	8006bcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069c6:	4622      	mov	r2, r4
 80069c8:	462b      	mov	r3, r5
 80069ca:	1891      	adds	r1, r2, r2
 80069cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80069ce:	415b      	adcs	r3, r3
 80069d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069d6:	4621      	mov	r1, r4
 80069d8:	eb12 0801 	adds.w	r8, r2, r1
 80069dc:	4629      	mov	r1, r5
 80069de:	eb43 0901 	adc.w	r9, r3, r1
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069f6:	4690      	mov	r8, r2
 80069f8:	4699      	mov	r9, r3
 80069fa:	4623      	mov	r3, r4
 80069fc:	eb18 0303 	adds.w	r3, r8, r3
 8006a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a04:	462b      	mov	r3, r5
 8006a06:	eb49 0303 	adc.w	r3, r9, r3
 8006a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a22:	460b      	mov	r3, r1
 8006a24:	18db      	adds	r3, r3, r3
 8006a26:	653b      	str	r3, [r7, #80]	; 0x50
 8006a28:	4613      	mov	r3, r2
 8006a2a:	eb42 0303 	adc.w	r3, r2, r3
 8006a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a38:	f7f9 fc2a 	bl	8000290 <__aeabi_uldivmod>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4b61      	ldr	r3, [pc, #388]	; (8006bc8 <UART_SetConfig+0x2d4>)
 8006a42:	fba3 2302 	umull	r2, r3, r3, r2
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	011c      	lsls	r4, r3, #4
 8006a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	464b      	mov	r3, r9
 8006a60:	1891      	adds	r1, r2, r2
 8006a62:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a64:	415b      	adcs	r3, r3
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a6c:	4641      	mov	r1, r8
 8006a6e:	eb12 0a01 	adds.w	sl, r2, r1
 8006a72:	4649      	mov	r1, r9
 8006a74:	eb43 0b01 	adc.w	fp, r3, r1
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a8c:	4692      	mov	sl, r2
 8006a8e:	469b      	mov	fp, r3
 8006a90:	4643      	mov	r3, r8
 8006a92:	eb1a 0303 	adds.w	r3, sl, r3
 8006a96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8006aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ab0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ab4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	18db      	adds	r3, r3, r3
 8006abc:	643b      	str	r3, [r7, #64]	; 0x40
 8006abe:	4613      	mov	r3, r2
 8006ac0:	eb42 0303 	adc.w	r3, r2, r3
 8006ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ac6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006aca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ace:	f7f9 fbdf 	bl	8000290 <__aeabi_uldivmod>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4b3b      	ldr	r3, [pc, #236]	; (8006bc8 <UART_SetConfig+0x2d4>)
 8006ada:	fba3 2301 	umull	r2, r3, r3, r1
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	2264      	movs	r2, #100	; 0x64
 8006ae2:	fb02 f303 	mul.w	r3, r2, r3
 8006ae6:	1acb      	subs	r3, r1, r3
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006aee:	4b36      	ldr	r3, [pc, #216]	; (8006bc8 <UART_SetConfig+0x2d4>)
 8006af0:	fba3 2302 	umull	r2, r3, r3, r2
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006afc:	441c      	add	r4, r3
 8006afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b10:	4642      	mov	r2, r8
 8006b12:	464b      	mov	r3, r9
 8006b14:	1891      	adds	r1, r2, r2
 8006b16:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b18:	415b      	adcs	r3, r3
 8006b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b20:	4641      	mov	r1, r8
 8006b22:	1851      	adds	r1, r2, r1
 8006b24:	6339      	str	r1, [r7, #48]	; 0x30
 8006b26:	4649      	mov	r1, r9
 8006b28:	414b      	adcs	r3, r1
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b38:	4659      	mov	r1, fp
 8006b3a:	00cb      	lsls	r3, r1, #3
 8006b3c:	4651      	mov	r1, sl
 8006b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b42:	4651      	mov	r1, sl
 8006b44:	00ca      	lsls	r2, r1, #3
 8006b46:	4610      	mov	r0, r2
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	189b      	adds	r3, r3, r2
 8006b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b54:	464b      	mov	r3, r9
 8006b56:	460a      	mov	r2, r1
 8006b58:	eb42 0303 	adc.w	r3, r2, r3
 8006b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b74:	460b      	mov	r3, r1
 8006b76:	18db      	adds	r3, r3, r3
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	eb42 0303 	adc.w	r3, r2, r3
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b8a:	f7f9 fb81 	bl	8000290 <__aeabi_uldivmod>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <UART_SetConfig+0x2d4>)
 8006b94:	fba3 1302 	umull	r1, r3, r3, r2
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	2164      	movs	r1, #100	; 0x64
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	3332      	adds	r3, #50	; 0x32
 8006ba6:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <UART_SetConfig+0x2d4>)
 8006ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	f003 0207 	and.w	r2, r3, #7
 8006bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4422      	add	r2, r4
 8006bba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bbc:	e105      	b.n	8006dca <UART_SetConfig+0x4d6>
 8006bbe:	bf00      	nop
 8006bc0:	40011000 	.word	0x40011000
 8006bc4:	40011400 	.word	0x40011400
 8006bc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bde:	4642      	mov	r2, r8
 8006be0:	464b      	mov	r3, r9
 8006be2:	1891      	adds	r1, r2, r2
 8006be4:	6239      	str	r1, [r7, #32]
 8006be6:	415b      	adcs	r3, r3
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bee:	4641      	mov	r1, r8
 8006bf0:	1854      	adds	r4, r2, r1
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	eb43 0501 	adc.w	r5, r3, r1
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	00eb      	lsls	r3, r5, #3
 8006c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c06:	00e2      	lsls	r2, r4, #3
 8006c08:	4614      	mov	r4, r2
 8006c0a:	461d      	mov	r5, r3
 8006c0c:	4643      	mov	r3, r8
 8006c0e:	18e3      	adds	r3, r4, r3
 8006c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c14:	464b      	mov	r3, r9
 8006c16:	eb45 0303 	adc.w	r3, r5, r3
 8006c1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	008b      	lsls	r3, r1, #2
 8006c3e:	4621      	mov	r1, r4
 8006c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c44:	4621      	mov	r1, r4
 8006c46:	008a      	lsls	r2, r1, #2
 8006c48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c4c:	f7f9 fb20 	bl	8000290 <__aeabi_uldivmod>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4b60      	ldr	r3, [pc, #384]	; (8006dd8 <UART_SetConfig+0x4e4>)
 8006c56:	fba3 2302 	umull	r2, r3, r3, r2
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	011c      	lsls	r4, r3, #4
 8006c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c70:	4642      	mov	r2, r8
 8006c72:	464b      	mov	r3, r9
 8006c74:	1891      	adds	r1, r2, r2
 8006c76:	61b9      	str	r1, [r7, #24]
 8006c78:	415b      	adcs	r3, r3
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c80:	4641      	mov	r1, r8
 8006c82:	1851      	adds	r1, r2, r1
 8006c84:	6139      	str	r1, [r7, #16]
 8006c86:	4649      	mov	r1, r9
 8006c88:	414b      	adcs	r3, r1
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c98:	4659      	mov	r1, fp
 8006c9a:	00cb      	lsls	r3, r1, #3
 8006c9c:	4651      	mov	r1, sl
 8006c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ca2:	4651      	mov	r1, sl
 8006ca4:	00ca      	lsls	r2, r1, #3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4603      	mov	r3, r0
 8006cac:	4642      	mov	r2, r8
 8006cae:	189b      	adds	r3, r3, r2
 8006cb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cb4:	464b      	mov	r3, r9
 8006cb6:	460a      	mov	r2, r1
 8006cb8:	eb42 0303 	adc.w	r3, r2, r3
 8006cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006cd8:	4649      	mov	r1, r9
 8006cda:	008b      	lsls	r3, r1, #2
 8006cdc:	4641      	mov	r1, r8
 8006cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ce2:	4641      	mov	r1, r8
 8006ce4:	008a      	lsls	r2, r1, #2
 8006ce6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cea:	f7f9 fad1 	bl	8000290 <__aeabi_uldivmod>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4b39      	ldr	r3, [pc, #228]	; (8006dd8 <UART_SetConfig+0x4e4>)
 8006cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf8:	095b      	lsrs	r3, r3, #5
 8006cfa:	2164      	movs	r1, #100	; 0x64
 8006cfc:	fb01 f303 	mul.w	r3, r1, r3
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	3332      	adds	r3, #50	; 0x32
 8006d06:	4a34      	ldr	r2, [pc, #208]	; (8006dd8 <UART_SetConfig+0x4e4>)
 8006d08:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d12:	441c      	add	r4, r3
 8006d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d18:	2200      	movs	r2, #0
 8006d1a:	673b      	str	r3, [r7, #112]	; 0x70
 8006d1c:	677a      	str	r2, [r7, #116]	; 0x74
 8006d1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d22:	4642      	mov	r2, r8
 8006d24:	464b      	mov	r3, r9
 8006d26:	1891      	adds	r1, r2, r2
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	415b      	adcs	r3, r3
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d32:	4641      	mov	r1, r8
 8006d34:	1851      	adds	r1, r2, r1
 8006d36:	6039      	str	r1, [r7, #0]
 8006d38:	4649      	mov	r1, r9
 8006d3a:	414b      	adcs	r3, r1
 8006d3c:	607b      	str	r3, [r7, #4]
 8006d3e:	f04f 0200 	mov.w	r2, #0
 8006d42:	f04f 0300 	mov.w	r3, #0
 8006d46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d4a:	4659      	mov	r1, fp
 8006d4c:	00cb      	lsls	r3, r1, #3
 8006d4e:	4651      	mov	r1, sl
 8006d50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d54:	4651      	mov	r1, sl
 8006d56:	00ca      	lsls	r2, r1, #3
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	4642      	mov	r2, r8
 8006d60:	189b      	adds	r3, r3, r2
 8006d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d64:	464b      	mov	r3, r9
 8006d66:	460a      	mov	r2, r1
 8006d68:	eb42 0303 	adc.w	r3, r2, r3
 8006d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	663b      	str	r3, [r7, #96]	; 0x60
 8006d78:	667a      	str	r2, [r7, #100]	; 0x64
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d86:	4649      	mov	r1, r9
 8006d88:	008b      	lsls	r3, r1, #2
 8006d8a:	4641      	mov	r1, r8
 8006d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d90:	4641      	mov	r1, r8
 8006d92:	008a      	lsls	r2, r1, #2
 8006d94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d98:	f7f9 fa7a 	bl	8000290 <__aeabi_uldivmod>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <UART_SetConfig+0x4e4>)
 8006da2:	fba3 1302 	umull	r1, r3, r3, r2
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	2164      	movs	r1, #100	; 0x64
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	3332      	adds	r3, #50	; 0x32
 8006db4:	4a08      	ldr	r2, [pc, #32]	; (8006dd8 <UART_SetConfig+0x4e4>)
 8006db6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	f003 020f 	and.w	r2, r3, #15
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4422      	add	r2, r4
 8006dc8:	609a      	str	r2, [r3, #8]
}
 8006dca:	bf00      	nop
 8006dcc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dd6:	bf00      	nop
 8006dd8:	51eb851f 	.word	0x51eb851f

08006ddc <atoi>:
 8006ddc:	220a      	movs	r2, #10
 8006dde:	2100      	movs	r1, #0
 8006de0:	f000 b9ce 	b.w	8007180 <strtol>

08006de4 <__errno>:
 8006de4:	4b01      	ldr	r3, [pc, #4]	; (8006dec <__errno+0x8>)
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20000104 	.word	0x20000104

08006df0 <__libc_init_array>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	4d0d      	ldr	r5, [pc, #52]	; (8006e28 <__libc_init_array+0x38>)
 8006df4:	4c0d      	ldr	r4, [pc, #52]	; (8006e2c <__libc_init_array+0x3c>)
 8006df6:	1b64      	subs	r4, r4, r5
 8006df8:	10a4      	asrs	r4, r4, #2
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	42a6      	cmp	r6, r4
 8006dfe:	d109      	bne.n	8006e14 <__libc_init_array+0x24>
 8006e00:	4d0b      	ldr	r5, [pc, #44]	; (8006e30 <__libc_init_array+0x40>)
 8006e02:	4c0c      	ldr	r4, [pc, #48]	; (8006e34 <__libc_init_array+0x44>)
 8006e04:	f001 ff34 	bl	8008c70 <_init>
 8006e08:	1b64      	subs	r4, r4, r5
 8006e0a:	10a4      	asrs	r4, r4, #2
 8006e0c:	2600      	movs	r6, #0
 8006e0e:	42a6      	cmp	r6, r4
 8006e10:	d105      	bne.n	8006e1e <__libc_init_array+0x2e>
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e18:	4798      	blx	r3
 8006e1a:	3601      	adds	r6, #1
 8006e1c:	e7ee      	b.n	8006dfc <__libc_init_array+0xc>
 8006e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e22:	4798      	blx	r3
 8006e24:	3601      	adds	r6, #1
 8006e26:	e7f2      	b.n	8006e0e <__libc_init_array+0x1e>
 8006e28:	080093b0 	.word	0x080093b0
 8006e2c:	080093b0 	.word	0x080093b0
 8006e30:	080093b0 	.word	0x080093b0
 8006e34:	080093b4 	.word	0x080093b4

08006e38 <memcpy>:
 8006e38:	440a      	add	r2, r1
 8006e3a:	4291      	cmp	r1, r2
 8006e3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006e40:	d100      	bne.n	8006e44 <memcpy+0xc>
 8006e42:	4770      	bx	lr
 8006e44:	b510      	push	{r4, lr}
 8006e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e4e:	4291      	cmp	r1, r2
 8006e50:	d1f9      	bne.n	8006e46 <memcpy+0xe>
 8006e52:	bd10      	pop	{r4, pc}

08006e54 <memset>:
 8006e54:	4402      	add	r2, r0
 8006e56:	4603      	mov	r3, r0
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d100      	bne.n	8006e5e <memset+0xa>
 8006e5c:	4770      	bx	lr
 8006e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e62:	e7f9      	b.n	8006e58 <memset+0x4>

08006e64 <siprintf>:
 8006e64:	b40e      	push	{r1, r2, r3}
 8006e66:	b500      	push	{lr}
 8006e68:	b09c      	sub	sp, #112	; 0x70
 8006e6a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e6c:	9002      	str	r0, [sp, #8]
 8006e6e:	9006      	str	r0, [sp, #24]
 8006e70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e74:	4809      	ldr	r0, [pc, #36]	; (8006e9c <siprintf+0x38>)
 8006e76:	9107      	str	r1, [sp, #28]
 8006e78:	9104      	str	r1, [sp, #16]
 8006e7a:	4909      	ldr	r1, [pc, #36]	; (8006ea0 <siprintf+0x3c>)
 8006e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e80:	9105      	str	r1, [sp, #20]
 8006e82:	6800      	ldr	r0, [r0, #0]
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	a902      	add	r1, sp, #8
 8006e88:	f000 fb2c 	bl	80074e4 <_svfiprintf_r>
 8006e8c:	9b02      	ldr	r3, [sp, #8]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	b01c      	add	sp, #112	; 0x70
 8006e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e98:	b003      	add	sp, #12
 8006e9a:	4770      	bx	lr
 8006e9c:	20000104 	.word	0x20000104
 8006ea0:	ffff0208 	.word	0xffff0208

08006ea4 <siscanf>:
 8006ea4:	b40e      	push	{r1, r2, r3}
 8006ea6:	b510      	push	{r4, lr}
 8006ea8:	b09f      	sub	sp, #124	; 0x7c
 8006eaa:	ac21      	add	r4, sp, #132	; 0x84
 8006eac:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006eb0:	f854 2b04 	ldr.w	r2, [r4], #4
 8006eb4:	9201      	str	r2, [sp, #4]
 8006eb6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006eba:	9004      	str	r0, [sp, #16]
 8006ebc:	9008      	str	r0, [sp, #32]
 8006ebe:	f7f9 f98f 	bl	80001e0 <strlen>
 8006ec2:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <siscanf+0x50>)
 8006ec4:	9005      	str	r0, [sp, #20]
 8006ec6:	9009      	str	r0, [sp, #36]	; 0x24
 8006ec8:	930d      	str	r3, [sp, #52]	; 0x34
 8006eca:	480b      	ldr	r0, [pc, #44]	; (8006ef8 <siscanf+0x54>)
 8006ecc:	9a01      	ldr	r2, [sp, #4]
 8006ece:	6800      	ldr	r0, [r0, #0]
 8006ed0:	9403      	str	r4, [sp, #12]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	9311      	str	r3, [sp, #68]	; 0x44
 8006ed6:	9316      	str	r3, [sp, #88]	; 0x58
 8006ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006edc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006ee0:	a904      	add	r1, sp, #16
 8006ee2:	4623      	mov	r3, r4
 8006ee4:	f000 fc58 	bl	8007798 <__ssvfiscanf_r>
 8006ee8:	b01f      	add	sp, #124	; 0x7c
 8006eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eee:	b003      	add	sp, #12
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	08006f1f 	.word	0x08006f1f
 8006ef8:	20000104 	.word	0x20000104

08006efc <__sread>:
 8006efc:	b510      	push	{r4, lr}
 8006efe:	460c      	mov	r4, r1
 8006f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f04:	f001 fa00 	bl	8008308 <_read_r>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	bfab      	itete	ge
 8006f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f10:	181b      	addge	r3, r3, r0
 8006f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f16:	bfac      	ite	ge
 8006f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f1a:	81a3      	strhlt	r3, [r4, #12]
 8006f1c:	bd10      	pop	{r4, pc}

08006f1e <__seofread>:
 8006f1e:	2000      	movs	r0, #0
 8006f20:	4770      	bx	lr

08006f22 <__swrite>:
 8006f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f26:	461f      	mov	r7, r3
 8006f28:	898b      	ldrh	r3, [r1, #12]
 8006f2a:	05db      	lsls	r3, r3, #23
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	4616      	mov	r6, r2
 8006f32:	d505      	bpl.n	8006f40 <__swrite+0x1e>
 8006f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f38:	2302      	movs	r3, #2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f000 f97c 	bl	8007238 <_lseek_r>
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f4a:	81a3      	strh	r3, [r4, #12]
 8006f4c:	4632      	mov	r2, r6
 8006f4e:	463b      	mov	r3, r7
 8006f50:	4628      	mov	r0, r5
 8006f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f56:	f000 b91d 	b.w	8007194 <_write_r>

08006f5a <__sseek>:
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f62:	f000 f969 	bl	8007238 <_lseek_r>
 8006f66:	1c43      	adds	r3, r0, #1
 8006f68:	89a3      	ldrh	r3, [r4, #12]
 8006f6a:	bf15      	itete	ne
 8006f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f76:	81a3      	strheq	r3, [r4, #12]
 8006f78:	bf18      	it	ne
 8006f7a:	81a3      	strhne	r3, [r4, #12]
 8006f7c:	bd10      	pop	{r4, pc}

08006f7e <__sclose>:
 8006f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f82:	f000 b937 	b.w	80071f4 <_close_r>

08006f86 <strcpy>:
 8006f86:	4603      	mov	r3, r0
 8006f88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f8c:	f803 2b01 	strb.w	r2, [r3], #1
 8006f90:	2a00      	cmp	r2, #0
 8006f92:	d1f9      	bne.n	8006f88 <strcpy+0x2>
 8006f94:	4770      	bx	lr

08006f96 <strncmp>:
 8006f96:	b510      	push	{r4, lr}
 8006f98:	b17a      	cbz	r2, 8006fba <strncmp+0x24>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	3901      	subs	r1, #1
 8006f9e:	1884      	adds	r4, r0, r2
 8006fa0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006fa4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006fa8:	4290      	cmp	r0, r2
 8006faa:	d101      	bne.n	8006fb0 <strncmp+0x1a>
 8006fac:	42a3      	cmp	r3, r4
 8006fae:	d101      	bne.n	8006fb4 <strncmp+0x1e>
 8006fb0:	1a80      	subs	r0, r0, r2
 8006fb2:	bd10      	pop	{r4, pc}
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d1f3      	bne.n	8006fa0 <strncmp+0xa>
 8006fb8:	e7fa      	b.n	8006fb0 <strncmp+0x1a>
 8006fba:	4610      	mov	r0, r2
 8006fbc:	e7f9      	b.n	8006fb2 <strncmp+0x1c>
	...

08006fc0 <strtok>:
 8006fc0:	4b16      	ldr	r3, [pc, #88]	; (800701c <strtok+0x5c>)
 8006fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fc4:	681e      	ldr	r6, [r3, #0]
 8006fc6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006fc8:	4605      	mov	r5, r0
 8006fca:	b9fc      	cbnz	r4, 800700c <strtok+0x4c>
 8006fcc:	2050      	movs	r0, #80	; 0x50
 8006fce:	9101      	str	r1, [sp, #4]
 8006fd0:	f000 f944 	bl	800725c <malloc>
 8006fd4:	9901      	ldr	r1, [sp, #4]
 8006fd6:	65b0      	str	r0, [r6, #88]	; 0x58
 8006fd8:	4602      	mov	r2, r0
 8006fda:	b920      	cbnz	r0, 8006fe6 <strtok+0x26>
 8006fdc:	4b10      	ldr	r3, [pc, #64]	; (8007020 <strtok+0x60>)
 8006fde:	4811      	ldr	r0, [pc, #68]	; (8007024 <strtok+0x64>)
 8006fe0:	2157      	movs	r1, #87	; 0x57
 8006fe2:	f000 f8e9 	bl	80071b8 <__assert_func>
 8006fe6:	e9c0 4400 	strd	r4, r4, [r0]
 8006fea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006fee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006ff2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006ff6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006ffa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006ffe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007002:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007006:	6184      	str	r4, [r0, #24]
 8007008:	7704      	strb	r4, [r0, #28]
 800700a:	6244      	str	r4, [r0, #36]	; 0x24
 800700c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800700e:	2301      	movs	r3, #1
 8007010:	4628      	mov	r0, r5
 8007012:	b002      	add	sp, #8
 8007014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007018:	f000 b806 	b.w	8007028 <__strtok_r>
 800701c:	20000104 	.word	0x20000104
 8007020:	08009148 	.word	0x08009148
 8007024:	0800915f 	.word	0x0800915f

08007028 <__strtok_r>:
 8007028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800702a:	b908      	cbnz	r0, 8007030 <__strtok_r+0x8>
 800702c:	6810      	ldr	r0, [r2, #0]
 800702e:	b188      	cbz	r0, 8007054 <__strtok_r+0x2c>
 8007030:	4604      	mov	r4, r0
 8007032:	4620      	mov	r0, r4
 8007034:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007038:	460f      	mov	r7, r1
 800703a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800703e:	b91e      	cbnz	r6, 8007048 <__strtok_r+0x20>
 8007040:	b965      	cbnz	r5, 800705c <__strtok_r+0x34>
 8007042:	6015      	str	r5, [r2, #0]
 8007044:	4628      	mov	r0, r5
 8007046:	e005      	b.n	8007054 <__strtok_r+0x2c>
 8007048:	42b5      	cmp	r5, r6
 800704a:	d1f6      	bne.n	800703a <__strtok_r+0x12>
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1f0      	bne.n	8007032 <__strtok_r+0xa>
 8007050:	6014      	str	r4, [r2, #0]
 8007052:	7003      	strb	r3, [r0, #0]
 8007054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007056:	461c      	mov	r4, r3
 8007058:	e00c      	b.n	8007074 <__strtok_r+0x4c>
 800705a:	b915      	cbnz	r5, 8007062 <__strtok_r+0x3a>
 800705c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007060:	460e      	mov	r6, r1
 8007062:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007066:	42ab      	cmp	r3, r5
 8007068:	d1f7      	bne.n	800705a <__strtok_r+0x32>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f3      	beq.n	8007056 <__strtok_r+0x2e>
 800706e:	2300      	movs	r3, #0
 8007070:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007074:	6014      	str	r4, [r2, #0]
 8007076:	e7ed      	b.n	8007054 <__strtok_r+0x2c>

08007078 <_strtol_l.constprop.0>:
 8007078:	2b01      	cmp	r3, #1
 800707a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800707e:	d001      	beq.n	8007084 <_strtol_l.constprop.0+0xc>
 8007080:	2b24      	cmp	r3, #36	; 0x24
 8007082:	d906      	bls.n	8007092 <_strtol_l.constprop.0+0x1a>
 8007084:	f7ff feae 	bl	8006de4 <__errno>
 8007088:	2316      	movs	r3, #22
 800708a:	6003      	str	r3, [r0, #0]
 800708c:	2000      	movs	r0, #0
 800708e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007092:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007178 <_strtol_l.constprop.0+0x100>
 8007096:	460d      	mov	r5, r1
 8007098:	462e      	mov	r6, r5
 800709a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800709e:	f814 700c 	ldrb.w	r7, [r4, ip]
 80070a2:	f017 0708 	ands.w	r7, r7, #8
 80070a6:	d1f7      	bne.n	8007098 <_strtol_l.constprop.0+0x20>
 80070a8:	2c2d      	cmp	r4, #45	; 0x2d
 80070aa:	d132      	bne.n	8007112 <_strtol_l.constprop.0+0x9a>
 80070ac:	782c      	ldrb	r4, [r5, #0]
 80070ae:	2701      	movs	r7, #1
 80070b0:	1cb5      	adds	r5, r6, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d05b      	beq.n	800716e <_strtol_l.constprop.0+0xf6>
 80070b6:	2b10      	cmp	r3, #16
 80070b8:	d109      	bne.n	80070ce <_strtol_l.constprop.0+0x56>
 80070ba:	2c30      	cmp	r4, #48	; 0x30
 80070bc:	d107      	bne.n	80070ce <_strtol_l.constprop.0+0x56>
 80070be:	782c      	ldrb	r4, [r5, #0]
 80070c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80070c4:	2c58      	cmp	r4, #88	; 0x58
 80070c6:	d14d      	bne.n	8007164 <_strtol_l.constprop.0+0xec>
 80070c8:	786c      	ldrb	r4, [r5, #1]
 80070ca:	2310      	movs	r3, #16
 80070cc:	3502      	adds	r5, #2
 80070ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80070d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80070d6:	f04f 0c00 	mov.w	ip, #0
 80070da:	fbb8 f9f3 	udiv	r9, r8, r3
 80070de:	4666      	mov	r6, ip
 80070e0:	fb03 8a19 	mls	sl, r3, r9, r8
 80070e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80070e8:	f1be 0f09 	cmp.w	lr, #9
 80070ec:	d816      	bhi.n	800711c <_strtol_l.constprop.0+0xa4>
 80070ee:	4674      	mov	r4, lr
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	dd24      	ble.n	800713e <_strtol_l.constprop.0+0xc6>
 80070f4:	f1bc 0f00 	cmp.w	ip, #0
 80070f8:	db1e      	blt.n	8007138 <_strtol_l.constprop.0+0xc0>
 80070fa:	45b1      	cmp	r9, r6
 80070fc:	d31c      	bcc.n	8007138 <_strtol_l.constprop.0+0xc0>
 80070fe:	d101      	bne.n	8007104 <_strtol_l.constprop.0+0x8c>
 8007100:	45a2      	cmp	sl, r4
 8007102:	db19      	blt.n	8007138 <_strtol_l.constprop.0+0xc0>
 8007104:	fb06 4603 	mla	r6, r6, r3, r4
 8007108:	f04f 0c01 	mov.w	ip, #1
 800710c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007110:	e7e8      	b.n	80070e4 <_strtol_l.constprop.0+0x6c>
 8007112:	2c2b      	cmp	r4, #43	; 0x2b
 8007114:	bf04      	itt	eq
 8007116:	782c      	ldrbeq	r4, [r5, #0]
 8007118:	1cb5      	addeq	r5, r6, #2
 800711a:	e7ca      	b.n	80070b2 <_strtol_l.constprop.0+0x3a>
 800711c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007120:	f1be 0f19 	cmp.w	lr, #25
 8007124:	d801      	bhi.n	800712a <_strtol_l.constprop.0+0xb2>
 8007126:	3c37      	subs	r4, #55	; 0x37
 8007128:	e7e2      	b.n	80070f0 <_strtol_l.constprop.0+0x78>
 800712a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800712e:	f1be 0f19 	cmp.w	lr, #25
 8007132:	d804      	bhi.n	800713e <_strtol_l.constprop.0+0xc6>
 8007134:	3c57      	subs	r4, #87	; 0x57
 8007136:	e7db      	b.n	80070f0 <_strtol_l.constprop.0+0x78>
 8007138:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800713c:	e7e6      	b.n	800710c <_strtol_l.constprop.0+0x94>
 800713e:	f1bc 0f00 	cmp.w	ip, #0
 8007142:	da05      	bge.n	8007150 <_strtol_l.constprop.0+0xd8>
 8007144:	2322      	movs	r3, #34	; 0x22
 8007146:	6003      	str	r3, [r0, #0]
 8007148:	4646      	mov	r6, r8
 800714a:	b942      	cbnz	r2, 800715e <_strtol_l.constprop.0+0xe6>
 800714c:	4630      	mov	r0, r6
 800714e:	e79e      	b.n	800708e <_strtol_l.constprop.0+0x16>
 8007150:	b107      	cbz	r7, 8007154 <_strtol_l.constprop.0+0xdc>
 8007152:	4276      	negs	r6, r6
 8007154:	2a00      	cmp	r2, #0
 8007156:	d0f9      	beq.n	800714c <_strtol_l.constprop.0+0xd4>
 8007158:	f1bc 0f00 	cmp.w	ip, #0
 800715c:	d000      	beq.n	8007160 <_strtol_l.constprop.0+0xe8>
 800715e:	1e69      	subs	r1, r5, #1
 8007160:	6011      	str	r1, [r2, #0]
 8007162:	e7f3      	b.n	800714c <_strtol_l.constprop.0+0xd4>
 8007164:	2430      	movs	r4, #48	; 0x30
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1b1      	bne.n	80070ce <_strtol_l.constprop.0+0x56>
 800716a:	2308      	movs	r3, #8
 800716c:	e7af      	b.n	80070ce <_strtol_l.constprop.0+0x56>
 800716e:	2c30      	cmp	r4, #48	; 0x30
 8007170:	d0a5      	beq.n	80070be <_strtol_l.constprop.0+0x46>
 8007172:	230a      	movs	r3, #10
 8007174:	e7ab      	b.n	80070ce <_strtol_l.constprop.0+0x56>
 8007176:	bf00      	nop
 8007178:	080091f9 	.word	0x080091f9

0800717c <_strtol_r>:
 800717c:	f7ff bf7c 	b.w	8007078 <_strtol_l.constprop.0>

08007180 <strtol>:
 8007180:	4613      	mov	r3, r2
 8007182:	460a      	mov	r2, r1
 8007184:	4601      	mov	r1, r0
 8007186:	4802      	ldr	r0, [pc, #8]	; (8007190 <strtol+0x10>)
 8007188:	6800      	ldr	r0, [r0, #0]
 800718a:	f7ff bf75 	b.w	8007078 <_strtol_l.constprop.0>
 800718e:	bf00      	nop
 8007190:	20000104 	.word	0x20000104

08007194 <_write_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4d07      	ldr	r5, [pc, #28]	; (80071b4 <_write_r+0x20>)
 8007198:	4604      	mov	r4, r0
 800719a:	4608      	mov	r0, r1
 800719c:	4611      	mov	r1, r2
 800719e:	2200      	movs	r2, #0
 80071a0:	602a      	str	r2, [r5, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	f7fb fe81 	bl	8002eaa <_write>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d102      	bne.n	80071b2 <_write_r+0x1e>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	b103      	cbz	r3, 80071b2 <_write_r+0x1e>
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	200003c4 	.word	0x200003c4

080071b8 <__assert_func>:
 80071b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071ba:	4614      	mov	r4, r2
 80071bc:	461a      	mov	r2, r3
 80071be:	4b09      	ldr	r3, [pc, #36]	; (80071e4 <__assert_func+0x2c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4605      	mov	r5, r0
 80071c4:	68d8      	ldr	r0, [r3, #12]
 80071c6:	b14c      	cbz	r4, 80071dc <__assert_func+0x24>
 80071c8:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <__assert_func+0x30>)
 80071ca:	9100      	str	r1, [sp, #0]
 80071cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071d0:	4906      	ldr	r1, [pc, #24]	; (80071ec <__assert_func+0x34>)
 80071d2:	462b      	mov	r3, r5
 80071d4:	f000 f81e 	bl	8007214 <fiprintf>
 80071d8:	f001 fa5e 	bl	8008698 <abort>
 80071dc:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <__assert_func+0x38>)
 80071de:	461c      	mov	r4, r3
 80071e0:	e7f3      	b.n	80071ca <__assert_func+0x12>
 80071e2:	bf00      	nop
 80071e4:	20000104 	.word	0x20000104
 80071e8:	080091bc 	.word	0x080091bc
 80071ec:	080091c9 	.word	0x080091c9
 80071f0:	080091f7 	.word	0x080091f7

080071f4 <_close_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d06      	ldr	r5, [pc, #24]	; (8007210 <_close_r+0x1c>)
 80071f8:	2300      	movs	r3, #0
 80071fa:	4604      	mov	r4, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	602b      	str	r3, [r5, #0]
 8007200:	f7fb fe6f 	bl	8002ee2 <_close>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d102      	bne.n	800720e <_close_r+0x1a>
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	b103      	cbz	r3, 800720e <_close_r+0x1a>
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	bd38      	pop	{r3, r4, r5, pc}
 8007210:	200003c4 	.word	0x200003c4

08007214 <fiprintf>:
 8007214:	b40e      	push	{r1, r2, r3}
 8007216:	b503      	push	{r0, r1, lr}
 8007218:	4601      	mov	r1, r0
 800721a:	ab03      	add	r3, sp, #12
 800721c:	4805      	ldr	r0, [pc, #20]	; (8007234 <fiprintf+0x20>)
 800721e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007222:	6800      	ldr	r0, [r0, #0]
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	f000 fc59 	bl	8007adc <_vfiprintf_r>
 800722a:	b002      	add	sp, #8
 800722c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007230:	b003      	add	sp, #12
 8007232:	4770      	bx	lr
 8007234:	20000104 	.word	0x20000104

08007238 <_lseek_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4d07      	ldr	r5, [pc, #28]	; (8007258 <_lseek_r+0x20>)
 800723c:	4604      	mov	r4, r0
 800723e:	4608      	mov	r0, r1
 8007240:	4611      	mov	r1, r2
 8007242:	2200      	movs	r2, #0
 8007244:	602a      	str	r2, [r5, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f7fb fe72 	bl	8002f30 <_lseek>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_lseek_r+0x1e>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_lseek_r+0x1e>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	200003c4 	.word	0x200003c4

0800725c <malloc>:
 800725c:	4b02      	ldr	r3, [pc, #8]	; (8007268 <malloc+0xc>)
 800725e:	4601      	mov	r1, r0
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	f000 b86f 	b.w	8007344 <_malloc_r>
 8007266:	bf00      	nop
 8007268:	20000104 	.word	0x20000104

0800726c <_free_r>:
 800726c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800726e:	2900      	cmp	r1, #0
 8007270:	d044      	beq.n	80072fc <_free_r+0x90>
 8007272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007276:	9001      	str	r0, [sp, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	f1a1 0404 	sub.w	r4, r1, #4
 800727e:	bfb8      	it	lt
 8007280:	18e4      	addlt	r4, r4, r3
 8007282:	f001 fc4b 	bl	8008b1c <__malloc_lock>
 8007286:	4a1e      	ldr	r2, [pc, #120]	; (8007300 <_free_r+0x94>)
 8007288:	9801      	ldr	r0, [sp, #4]
 800728a:	6813      	ldr	r3, [r2, #0]
 800728c:	b933      	cbnz	r3, 800729c <_free_r+0x30>
 800728e:	6063      	str	r3, [r4, #4]
 8007290:	6014      	str	r4, [r2, #0]
 8007292:	b003      	add	sp, #12
 8007294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007298:	f001 bc46 	b.w	8008b28 <__malloc_unlock>
 800729c:	42a3      	cmp	r3, r4
 800729e:	d908      	bls.n	80072b2 <_free_r+0x46>
 80072a0:	6825      	ldr	r5, [r4, #0]
 80072a2:	1961      	adds	r1, r4, r5
 80072a4:	428b      	cmp	r3, r1
 80072a6:	bf01      	itttt	eq
 80072a8:	6819      	ldreq	r1, [r3, #0]
 80072aa:	685b      	ldreq	r3, [r3, #4]
 80072ac:	1949      	addeq	r1, r1, r5
 80072ae:	6021      	streq	r1, [r4, #0]
 80072b0:	e7ed      	b.n	800728e <_free_r+0x22>
 80072b2:	461a      	mov	r2, r3
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	b10b      	cbz	r3, 80072bc <_free_r+0x50>
 80072b8:	42a3      	cmp	r3, r4
 80072ba:	d9fa      	bls.n	80072b2 <_free_r+0x46>
 80072bc:	6811      	ldr	r1, [r2, #0]
 80072be:	1855      	adds	r5, r2, r1
 80072c0:	42a5      	cmp	r5, r4
 80072c2:	d10b      	bne.n	80072dc <_free_r+0x70>
 80072c4:	6824      	ldr	r4, [r4, #0]
 80072c6:	4421      	add	r1, r4
 80072c8:	1854      	adds	r4, r2, r1
 80072ca:	42a3      	cmp	r3, r4
 80072cc:	6011      	str	r1, [r2, #0]
 80072ce:	d1e0      	bne.n	8007292 <_free_r+0x26>
 80072d0:	681c      	ldr	r4, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	6053      	str	r3, [r2, #4]
 80072d6:	4421      	add	r1, r4
 80072d8:	6011      	str	r1, [r2, #0]
 80072da:	e7da      	b.n	8007292 <_free_r+0x26>
 80072dc:	d902      	bls.n	80072e4 <_free_r+0x78>
 80072de:	230c      	movs	r3, #12
 80072e0:	6003      	str	r3, [r0, #0]
 80072e2:	e7d6      	b.n	8007292 <_free_r+0x26>
 80072e4:	6825      	ldr	r5, [r4, #0]
 80072e6:	1961      	adds	r1, r4, r5
 80072e8:	428b      	cmp	r3, r1
 80072ea:	bf04      	itt	eq
 80072ec:	6819      	ldreq	r1, [r3, #0]
 80072ee:	685b      	ldreq	r3, [r3, #4]
 80072f0:	6063      	str	r3, [r4, #4]
 80072f2:	bf04      	itt	eq
 80072f4:	1949      	addeq	r1, r1, r5
 80072f6:	6021      	streq	r1, [r4, #0]
 80072f8:	6054      	str	r4, [r2, #4]
 80072fa:	e7ca      	b.n	8007292 <_free_r+0x26>
 80072fc:	b003      	add	sp, #12
 80072fe:	bd30      	pop	{r4, r5, pc}
 8007300:	200003bc 	.word	0x200003bc

08007304 <sbrk_aligned>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	4e0e      	ldr	r6, [pc, #56]	; (8007340 <sbrk_aligned+0x3c>)
 8007308:	460c      	mov	r4, r1
 800730a:	6831      	ldr	r1, [r6, #0]
 800730c:	4605      	mov	r5, r0
 800730e:	b911      	cbnz	r1, 8007316 <sbrk_aligned+0x12>
 8007310:	f001 f80c 	bl	800832c <_sbrk_r>
 8007314:	6030      	str	r0, [r6, #0]
 8007316:	4621      	mov	r1, r4
 8007318:	4628      	mov	r0, r5
 800731a:	f001 f807 	bl	800832c <_sbrk_r>
 800731e:	1c43      	adds	r3, r0, #1
 8007320:	d00a      	beq.n	8007338 <sbrk_aligned+0x34>
 8007322:	1cc4      	adds	r4, r0, #3
 8007324:	f024 0403 	bic.w	r4, r4, #3
 8007328:	42a0      	cmp	r0, r4
 800732a:	d007      	beq.n	800733c <sbrk_aligned+0x38>
 800732c:	1a21      	subs	r1, r4, r0
 800732e:	4628      	mov	r0, r5
 8007330:	f000 fffc 	bl	800832c <_sbrk_r>
 8007334:	3001      	adds	r0, #1
 8007336:	d101      	bne.n	800733c <sbrk_aligned+0x38>
 8007338:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800733c:	4620      	mov	r0, r4
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	200003c0 	.word	0x200003c0

08007344 <_malloc_r>:
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	1ccd      	adds	r5, r1, #3
 800734a:	f025 0503 	bic.w	r5, r5, #3
 800734e:	3508      	adds	r5, #8
 8007350:	2d0c      	cmp	r5, #12
 8007352:	bf38      	it	cc
 8007354:	250c      	movcc	r5, #12
 8007356:	2d00      	cmp	r5, #0
 8007358:	4607      	mov	r7, r0
 800735a:	db01      	blt.n	8007360 <_malloc_r+0x1c>
 800735c:	42a9      	cmp	r1, r5
 800735e:	d905      	bls.n	800736c <_malloc_r+0x28>
 8007360:	230c      	movs	r3, #12
 8007362:	603b      	str	r3, [r7, #0]
 8007364:	2600      	movs	r6, #0
 8007366:	4630      	mov	r0, r6
 8007368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800736c:	4e2e      	ldr	r6, [pc, #184]	; (8007428 <_malloc_r+0xe4>)
 800736e:	f001 fbd5 	bl	8008b1c <__malloc_lock>
 8007372:	6833      	ldr	r3, [r6, #0]
 8007374:	461c      	mov	r4, r3
 8007376:	bb34      	cbnz	r4, 80073c6 <_malloc_r+0x82>
 8007378:	4629      	mov	r1, r5
 800737a:	4638      	mov	r0, r7
 800737c:	f7ff ffc2 	bl	8007304 <sbrk_aligned>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	4604      	mov	r4, r0
 8007384:	d14d      	bne.n	8007422 <_malloc_r+0xde>
 8007386:	6834      	ldr	r4, [r6, #0]
 8007388:	4626      	mov	r6, r4
 800738a:	2e00      	cmp	r6, #0
 800738c:	d140      	bne.n	8007410 <_malloc_r+0xcc>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	4631      	mov	r1, r6
 8007392:	4638      	mov	r0, r7
 8007394:	eb04 0803 	add.w	r8, r4, r3
 8007398:	f000 ffc8 	bl	800832c <_sbrk_r>
 800739c:	4580      	cmp	r8, r0
 800739e:	d13a      	bne.n	8007416 <_malloc_r+0xd2>
 80073a0:	6821      	ldr	r1, [r4, #0]
 80073a2:	3503      	adds	r5, #3
 80073a4:	1a6d      	subs	r5, r5, r1
 80073a6:	f025 0503 	bic.w	r5, r5, #3
 80073aa:	3508      	adds	r5, #8
 80073ac:	2d0c      	cmp	r5, #12
 80073ae:	bf38      	it	cc
 80073b0:	250c      	movcc	r5, #12
 80073b2:	4629      	mov	r1, r5
 80073b4:	4638      	mov	r0, r7
 80073b6:	f7ff ffa5 	bl	8007304 <sbrk_aligned>
 80073ba:	3001      	adds	r0, #1
 80073bc:	d02b      	beq.n	8007416 <_malloc_r+0xd2>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	442b      	add	r3, r5
 80073c2:	6023      	str	r3, [r4, #0]
 80073c4:	e00e      	b.n	80073e4 <_malloc_r+0xa0>
 80073c6:	6822      	ldr	r2, [r4, #0]
 80073c8:	1b52      	subs	r2, r2, r5
 80073ca:	d41e      	bmi.n	800740a <_malloc_r+0xc6>
 80073cc:	2a0b      	cmp	r2, #11
 80073ce:	d916      	bls.n	80073fe <_malloc_r+0xba>
 80073d0:	1961      	adds	r1, r4, r5
 80073d2:	42a3      	cmp	r3, r4
 80073d4:	6025      	str	r5, [r4, #0]
 80073d6:	bf18      	it	ne
 80073d8:	6059      	strne	r1, [r3, #4]
 80073da:	6863      	ldr	r3, [r4, #4]
 80073dc:	bf08      	it	eq
 80073de:	6031      	streq	r1, [r6, #0]
 80073e0:	5162      	str	r2, [r4, r5]
 80073e2:	604b      	str	r3, [r1, #4]
 80073e4:	4638      	mov	r0, r7
 80073e6:	f104 060b 	add.w	r6, r4, #11
 80073ea:	f001 fb9d 	bl	8008b28 <__malloc_unlock>
 80073ee:	f026 0607 	bic.w	r6, r6, #7
 80073f2:	1d23      	adds	r3, r4, #4
 80073f4:	1af2      	subs	r2, r6, r3
 80073f6:	d0b6      	beq.n	8007366 <_malloc_r+0x22>
 80073f8:	1b9b      	subs	r3, r3, r6
 80073fa:	50a3      	str	r3, [r4, r2]
 80073fc:	e7b3      	b.n	8007366 <_malloc_r+0x22>
 80073fe:	6862      	ldr	r2, [r4, #4]
 8007400:	42a3      	cmp	r3, r4
 8007402:	bf0c      	ite	eq
 8007404:	6032      	streq	r2, [r6, #0]
 8007406:	605a      	strne	r2, [r3, #4]
 8007408:	e7ec      	b.n	80073e4 <_malloc_r+0xa0>
 800740a:	4623      	mov	r3, r4
 800740c:	6864      	ldr	r4, [r4, #4]
 800740e:	e7b2      	b.n	8007376 <_malloc_r+0x32>
 8007410:	4634      	mov	r4, r6
 8007412:	6876      	ldr	r6, [r6, #4]
 8007414:	e7b9      	b.n	800738a <_malloc_r+0x46>
 8007416:	230c      	movs	r3, #12
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	4638      	mov	r0, r7
 800741c:	f001 fb84 	bl	8008b28 <__malloc_unlock>
 8007420:	e7a1      	b.n	8007366 <_malloc_r+0x22>
 8007422:	6025      	str	r5, [r4, #0]
 8007424:	e7de      	b.n	80073e4 <_malloc_r+0xa0>
 8007426:	bf00      	nop
 8007428:	200003bc 	.word	0x200003bc

0800742c <__ssputs_r>:
 800742c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007430:	688e      	ldr	r6, [r1, #8]
 8007432:	429e      	cmp	r6, r3
 8007434:	4682      	mov	sl, r0
 8007436:	460c      	mov	r4, r1
 8007438:	4690      	mov	r8, r2
 800743a:	461f      	mov	r7, r3
 800743c:	d838      	bhi.n	80074b0 <__ssputs_r+0x84>
 800743e:	898a      	ldrh	r2, [r1, #12]
 8007440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007444:	d032      	beq.n	80074ac <__ssputs_r+0x80>
 8007446:	6825      	ldr	r5, [r4, #0]
 8007448:	6909      	ldr	r1, [r1, #16]
 800744a:	eba5 0901 	sub.w	r9, r5, r1
 800744e:	6965      	ldr	r5, [r4, #20]
 8007450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007458:	3301      	adds	r3, #1
 800745a:	444b      	add	r3, r9
 800745c:	106d      	asrs	r5, r5, #1
 800745e:	429d      	cmp	r5, r3
 8007460:	bf38      	it	cc
 8007462:	461d      	movcc	r5, r3
 8007464:	0553      	lsls	r3, r2, #21
 8007466:	d531      	bpl.n	80074cc <__ssputs_r+0xa0>
 8007468:	4629      	mov	r1, r5
 800746a:	f7ff ff6b 	bl	8007344 <_malloc_r>
 800746e:	4606      	mov	r6, r0
 8007470:	b950      	cbnz	r0, 8007488 <__ssputs_r+0x5c>
 8007472:	230c      	movs	r3, #12
 8007474:	f8ca 3000 	str.w	r3, [sl]
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007488:	6921      	ldr	r1, [r4, #16]
 800748a:	464a      	mov	r2, r9
 800748c:	f7ff fcd4 	bl	8006e38 <memcpy>
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749a:	81a3      	strh	r3, [r4, #12]
 800749c:	6126      	str	r6, [r4, #16]
 800749e:	6165      	str	r5, [r4, #20]
 80074a0:	444e      	add	r6, r9
 80074a2:	eba5 0509 	sub.w	r5, r5, r9
 80074a6:	6026      	str	r6, [r4, #0]
 80074a8:	60a5      	str	r5, [r4, #8]
 80074aa:	463e      	mov	r6, r7
 80074ac:	42be      	cmp	r6, r7
 80074ae:	d900      	bls.n	80074b2 <__ssputs_r+0x86>
 80074b0:	463e      	mov	r6, r7
 80074b2:	6820      	ldr	r0, [r4, #0]
 80074b4:	4632      	mov	r2, r6
 80074b6:	4641      	mov	r1, r8
 80074b8:	f001 fb16 	bl	8008ae8 <memmove>
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	1b9b      	subs	r3, r3, r6
 80074c0:	60a3      	str	r3, [r4, #8]
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	4433      	add	r3, r6
 80074c6:	6023      	str	r3, [r4, #0]
 80074c8:	2000      	movs	r0, #0
 80074ca:	e7db      	b.n	8007484 <__ssputs_r+0x58>
 80074cc:	462a      	mov	r2, r5
 80074ce:	f001 fb31 	bl	8008b34 <_realloc_r>
 80074d2:	4606      	mov	r6, r0
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d1e1      	bne.n	800749c <__ssputs_r+0x70>
 80074d8:	6921      	ldr	r1, [r4, #16]
 80074da:	4650      	mov	r0, sl
 80074dc:	f7ff fec6 	bl	800726c <_free_r>
 80074e0:	e7c7      	b.n	8007472 <__ssputs_r+0x46>
	...

080074e4 <_svfiprintf_r>:
 80074e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	4698      	mov	r8, r3
 80074ea:	898b      	ldrh	r3, [r1, #12]
 80074ec:	061b      	lsls	r3, r3, #24
 80074ee:	b09d      	sub	sp, #116	; 0x74
 80074f0:	4607      	mov	r7, r0
 80074f2:	460d      	mov	r5, r1
 80074f4:	4614      	mov	r4, r2
 80074f6:	d50e      	bpl.n	8007516 <_svfiprintf_r+0x32>
 80074f8:	690b      	ldr	r3, [r1, #16]
 80074fa:	b963      	cbnz	r3, 8007516 <_svfiprintf_r+0x32>
 80074fc:	2140      	movs	r1, #64	; 0x40
 80074fe:	f7ff ff21 	bl	8007344 <_malloc_r>
 8007502:	6028      	str	r0, [r5, #0]
 8007504:	6128      	str	r0, [r5, #16]
 8007506:	b920      	cbnz	r0, 8007512 <_svfiprintf_r+0x2e>
 8007508:	230c      	movs	r3, #12
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007510:	e0d1      	b.n	80076b6 <_svfiprintf_r+0x1d2>
 8007512:	2340      	movs	r3, #64	; 0x40
 8007514:	616b      	str	r3, [r5, #20]
 8007516:	2300      	movs	r3, #0
 8007518:	9309      	str	r3, [sp, #36]	; 0x24
 800751a:	2320      	movs	r3, #32
 800751c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007520:	f8cd 800c 	str.w	r8, [sp, #12]
 8007524:	2330      	movs	r3, #48	; 0x30
 8007526:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80076d0 <_svfiprintf_r+0x1ec>
 800752a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800752e:	f04f 0901 	mov.w	r9, #1
 8007532:	4623      	mov	r3, r4
 8007534:	469a      	mov	sl, r3
 8007536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800753a:	b10a      	cbz	r2, 8007540 <_svfiprintf_r+0x5c>
 800753c:	2a25      	cmp	r2, #37	; 0x25
 800753e:	d1f9      	bne.n	8007534 <_svfiprintf_r+0x50>
 8007540:	ebba 0b04 	subs.w	fp, sl, r4
 8007544:	d00b      	beq.n	800755e <_svfiprintf_r+0x7a>
 8007546:	465b      	mov	r3, fp
 8007548:	4622      	mov	r2, r4
 800754a:	4629      	mov	r1, r5
 800754c:	4638      	mov	r0, r7
 800754e:	f7ff ff6d 	bl	800742c <__ssputs_r>
 8007552:	3001      	adds	r0, #1
 8007554:	f000 80aa 	beq.w	80076ac <_svfiprintf_r+0x1c8>
 8007558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800755a:	445a      	add	r2, fp
 800755c:	9209      	str	r2, [sp, #36]	; 0x24
 800755e:	f89a 3000 	ldrb.w	r3, [sl]
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 80a2 	beq.w	80076ac <_svfiprintf_r+0x1c8>
 8007568:	2300      	movs	r3, #0
 800756a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800756e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007572:	f10a 0a01 	add.w	sl, sl, #1
 8007576:	9304      	str	r3, [sp, #16]
 8007578:	9307      	str	r3, [sp, #28]
 800757a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800757e:	931a      	str	r3, [sp, #104]	; 0x68
 8007580:	4654      	mov	r4, sl
 8007582:	2205      	movs	r2, #5
 8007584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007588:	4851      	ldr	r0, [pc, #324]	; (80076d0 <_svfiprintf_r+0x1ec>)
 800758a:	f7f8 fe31 	bl	80001f0 <memchr>
 800758e:	9a04      	ldr	r2, [sp, #16]
 8007590:	b9d8      	cbnz	r0, 80075ca <_svfiprintf_r+0xe6>
 8007592:	06d0      	lsls	r0, r2, #27
 8007594:	bf44      	itt	mi
 8007596:	2320      	movmi	r3, #32
 8007598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800759c:	0711      	lsls	r1, r2, #28
 800759e:	bf44      	itt	mi
 80075a0:	232b      	movmi	r3, #43	; 0x2b
 80075a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075a6:	f89a 3000 	ldrb.w	r3, [sl]
 80075aa:	2b2a      	cmp	r3, #42	; 0x2a
 80075ac:	d015      	beq.n	80075da <_svfiprintf_r+0xf6>
 80075ae:	9a07      	ldr	r2, [sp, #28]
 80075b0:	4654      	mov	r4, sl
 80075b2:	2000      	movs	r0, #0
 80075b4:	f04f 0c0a 	mov.w	ip, #10
 80075b8:	4621      	mov	r1, r4
 80075ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075be:	3b30      	subs	r3, #48	; 0x30
 80075c0:	2b09      	cmp	r3, #9
 80075c2:	d94e      	bls.n	8007662 <_svfiprintf_r+0x17e>
 80075c4:	b1b0      	cbz	r0, 80075f4 <_svfiprintf_r+0x110>
 80075c6:	9207      	str	r2, [sp, #28]
 80075c8:	e014      	b.n	80075f4 <_svfiprintf_r+0x110>
 80075ca:	eba0 0308 	sub.w	r3, r0, r8
 80075ce:	fa09 f303 	lsl.w	r3, r9, r3
 80075d2:	4313      	orrs	r3, r2
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	46a2      	mov	sl, r4
 80075d8:	e7d2      	b.n	8007580 <_svfiprintf_r+0x9c>
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	1d19      	adds	r1, r3, #4
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	9103      	str	r1, [sp, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bfbb      	ittet	lt
 80075e6:	425b      	neglt	r3, r3
 80075e8:	f042 0202 	orrlt.w	r2, r2, #2
 80075ec:	9307      	strge	r3, [sp, #28]
 80075ee:	9307      	strlt	r3, [sp, #28]
 80075f0:	bfb8      	it	lt
 80075f2:	9204      	strlt	r2, [sp, #16]
 80075f4:	7823      	ldrb	r3, [r4, #0]
 80075f6:	2b2e      	cmp	r3, #46	; 0x2e
 80075f8:	d10c      	bne.n	8007614 <_svfiprintf_r+0x130>
 80075fa:	7863      	ldrb	r3, [r4, #1]
 80075fc:	2b2a      	cmp	r3, #42	; 0x2a
 80075fe:	d135      	bne.n	800766c <_svfiprintf_r+0x188>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	1d1a      	adds	r2, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	9203      	str	r2, [sp, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	bfb8      	it	lt
 800760c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007610:	3402      	adds	r4, #2
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076e0 <_svfiprintf_r+0x1fc>
 8007618:	7821      	ldrb	r1, [r4, #0]
 800761a:	2203      	movs	r2, #3
 800761c:	4650      	mov	r0, sl
 800761e:	f7f8 fde7 	bl	80001f0 <memchr>
 8007622:	b140      	cbz	r0, 8007636 <_svfiprintf_r+0x152>
 8007624:	2340      	movs	r3, #64	; 0x40
 8007626:	eba0 000a 	sub.w	r0, r0, sl
 800762a:	fa03 f000 	lsl.w	r0, r3, r0
 800762e:	9b04      	ldr	r3, [sp, #16]
 8007630:	4303      	orrs	r3, r0
 8007632:	3401      	adds	r4, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763a:	4826      	ldr	r0, [pc, #152]	; (80076d4 <_svfiprintf_r+0x1f0>)
 800763c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007640:	2206      	movs	r2, #6
 8007642:	f7f8 fdd5 	bl	80001f0 <memchr>
 8007646:	2800      	cmp	r0, #0
 8007648:	d038      	beq.n	80076bc <_svfiprintf_r+0x1d8>
 800764a:	4b23      	ldr	r3, [pc, #140]	; (80076d8 <_svfiprintf_r+0x1f4>)
 800764c:	bb1b      	cbnz	r3, 8007696 <_svfiprintf_r+0x1b2>
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	3307      	adds	r3, #7
 8007652:	f023 0307 	bic.w	r3, r3, #7
 8007656:	3308      	adds	r3, #8
 8007658:	9303      	str	r3, [sp, #12]
 800765a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765c:	4433      	add	r3, r6
 800765e:	9309      	str	r3, [sp, #36]	; 0x24
 8007660:	e767      	b.n	8007532 <_svfiprintf_r+0x4e>
 8007662:	fb0c 3202 	mla	r2, ip, r2, r3
 8007666:	460c      	mov	r4, r1
 8007668:	2001      	movs	r0, #1
 800766a:	e7a5      	b.n	80075b8 <_svfiprintf_r+0xd4>
 800766c:	2300      	movs	r3, #0
 800766e:	3401      	adds	r4, #1
 8007670:	9305      	str	r3, [sp, #20]
 8007672:	4619      	mov	r1, r3
 8007674:	f04f 0c0a 	mov.w	ip, #10
 8007678:	4620      	mov	r0, r4
 800767a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800767e:	3a30      	subs	r2, #48	; 0x30
 8007680:	2a09      	cmp	r2, #9
 8007682:	d903      	bls.n	800768c <_svfiprintf_r+0x1a8>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0c5      	beq.n	8007614 <_svfiprintf_r+0x130>
 8007688:	9105      	str	r1, [sp, #20]
 800768a:	e7c3      	b.n	8007614 <_svfiprintf_r+0x130>
 800768c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007690:	4604      	mov	r4, r0
 8007692:	2301      	movs	r3, #1
 8007694:	e7f0      	b.n	8007678 <_svfiprintf_r+0x194>
 8007696:	ab03      	add	r3, sp, #12
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	462a      	mov	r2, r5
 800769c:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <_svfiprintf_r+0x1f8>)
 800769e:	a904      	add	r1, sp, #16
 80076a0:	4638      	mov	r0, r7
 80076a2:	f3af 8000 	nop.w
 80076a6:	1c42      	adds	r2, r0, #1
 80076a8:	4606      	mov	r6, r0
 80076aa:	d1d6      	bne.n	800765a <_svfiprintf_r+0x176>
 80076ac:	89ab      	ldrh	r3, [r5, #12]
 80076ae:	065b      	lsls	r3, r3, #25
 80076b0:	f53f af2c 	bmi.w	800750c <_svfiprintf_r+0x28>
 80076b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076b6:	b01d      	add	sp, #116	; 0x74
 80076b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076bc:	ab03      	add	r3, sp, #12
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	462a      	mov	r2, r5
 80076c2:	4b06      	ldr	r3, [pc, #24]	; (80076dc <_svfiprintf_r+0x1f8>)
 80076c4:	a904      	add	r1, sp, #16
 80076c6:	4638      	mov	r0, r7
 80076c8:	f000 fba6 	bl	8007e18 <_printf_i>
 80076cc:	e7eb      	b.n	80076a6 <_svfiprintf_r+0x1c2>
 80076ce:	bf00      	nop
 80076d0:	080092f9 	.word	0x080092f9
 80076d4:	08009303 	.word	0x08009303
 80076d8:	00000000 	.word	0x00000000
 80076dc:	0800742d 	.word	0x0800742d
 80076e0:	080092ff 	.word	0x080092ff

080076e4 <_sungetc_r>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	1c4b      	adds	r3, r1, #1
 80076e8:	4614      	mov	r4, r2
 80076ea:	d103      	bne.n	80076f4 <_sungetc_r+0x10>
 80076ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80076f0:	4628      	mov	r0, r5
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	8993      	ldrh	r3, [r2, #12]
 80076f6:	f023 0320 	bic.w	r3, r3, #32
 80076fa:	8193      	strh	r3, [r2, #12]
 80076fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076fe:	6852      	ldr	r2, [r2, #4]
 8007700:	b2cd      	uxtb	r5, r1
 8007702:	b18b      	cbz	r3, 8007728 <_sungetc_r+0x44>
 8007704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007706:	4293      	cmp	r3, r2
 8007708:	dd08      	ble.n	800771c <_sungetc_r+0x38>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	1e5a      	subs	r2, r3, #1
 800770e:	6022      	str	r2, [r4, #0]
 8007710:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007714:	6863      	ldr	r3, [r4, #4]
 8007716:	3301      	adds	r3, #1
 8007718:	6063      	str	r3, [r4, #4]
 800771a:	e7e9      	b.n	80076f0 <_sungetc_r+0xc>
 800771c:	4621      	mov	r1, r4
 800771e:	f000 fec1 	bl	80084a4 <__submore>
 8007722:	2800      	cmp	r0, #0
 8007724:	d0f1      	beq.n	800770a <_sungetc_r+0x26>
 8007726:	e7e1      	b.n	80076ec <_sungetc_r+0x8>
 8007728:	6921      	ldr	r1, [r4, #16]
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	b151      	cbz	r1, 8007744 <_sungetc_r+0x60>
 800772e:	4299      	cmp	r1, r3
 8007730:	d208      	bcs.n	8007744 <_sungetc_r+0x60>
 8007732:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007736:	42a9      	cmp	r1, r5
 8007738:	d104      	bne.n	8007744 <_sungetc_r+0x60>
 800773a:	3b01      	subs	r3, #1
 800773c:	3201      	adds	r2, #1
 800773e:	6023      	str	r3, [r4, #0]
 8007740:	6062      	str	r2, [r4, #4]
 8007742:	e7d5      	b.n	80076f0 <_sungetc_r+0xc>
 8007744:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800774c:	6363      	str	r3, [r4, #52]	; 0x34
 800774e:	2303      	movs	r3, #3
 8007750:	63a3      	str	r3, [r4, #56]	; 0x38
 8007752:	4623      	mov	r3, r4
 8007754:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	2301      	movs	r3, #1
 800775c:	e7dc      	b.n	8007718 <_sungetc_r+0x34>

0800775e <__ssrefill_r>:
 800775e:	b510      	push	{r4, lr}
 8007760:	460c      	mov	r4, r1
 8007762:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007764:	b169      	cbz	r1, 8007782 <__ssrefill_r+0x24>
 8007766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800776a:	4299      	cmp	r1, r3
 800776c:	d001      	beq.n	8007772 <__ssrefill_r+0x14>
 800776e:	f7ff fd7d 	bl	800726c <_free_r>
 8007772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007774:	6063      	str	r3, [r4, #4]
 8007776:	2000      	movs	r0, #0
 8007778:	6360      	str	r0, [r4, #52]	; 0x34
 800777a:	b113      	cbz	r3, 8007782 <__ssrefill_r+0x24>
 800777c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800777e:	6023      	str	r3, [r4, #0]
 8007780:	bd10      	pop	{r4, pc}
 8007782:	6923      	ldr	r3, [r4, #16]
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	2300      	movs	r3, #0
 8007788:	6063      	str	r3, [r4, #4]
 800778a:	89a3      	ldrh	r3, [r4, #12]
 800778c:	f043 0320 	orr.w	r3, r3, #32
 8007790:	81a3      	strh	r3, [r4, #12]
 8007792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007796:	e7f3      	b.n	8007780 <__ssrefill_r+0x22>

08007798 <__ssvfiscanf_r>:
 8007798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	460c      	mov	r4, r1
 800779e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80077a2:	2100      	movs	r1, #0
 80077a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80077a8:	49a6      	ldr	r1, [pc, #664]	; (8007a44 <__ssvfiscanf_r+0x2ac>)
 80077aa:	91a0      	str	r1, [sp, #640]	; 0x280
 80077ac:	f10d 0804 	add.w	r8, sp, #4
 80077b0:	49a5      	ldr	r1, [pc, #660]	; (8007a48 <__ssvfiscanf_r+0x2b0>)
 80077b2:	4fa6      	ldr	r7, [pc, #664]	; (8007a4c <__ssvfiscanf_r+0x2b4>)
 80077b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007a50 <__ssvfiscanf_r+0x2b8>
 80077b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80077bc:	4606      	mov	r6, r0
 80077be:	91a1      	str	r1, [sp, #644]	; 0x284
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	7813      	ldrb	r3, [r2, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 815a 	beq.w	8007a7e <__ssvfiscanf_r+0x2e6>
 80077ca:	5dd9      	ldrb	r1, [r3, r7]
 80077cc:	f011 0108 	ands.w	r1, r1, #8
 80077d0:	f102 0501 	add.w	r5, r2, #1
 80077d4:	d019      	beq.n	800780a <__ssvfiscanf_r+0x72>
 80077d6:	6863      	ldr	r3, [r4, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	dd0f      	ble.n	80077fc <__ssvfiscanf_r+0x64>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	781a      	ldrb	r2, [r3, #0]
 80077e0:	5cba      	ldrb	r2, [r7, r2]
 80077e2:	0712      	lsls	r2, r2, #28
 80077e4:	d401      	bmi.n	80077ea <__ssvfiscanf_r+0x52>
 80077e6:	462a      	mov	r2, r5
 80077e8:	e7eb      	b.n	80077c2 <__ssvfiscanf_r+0x2a>
 80077ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80077ec:	3201      	adds	r2, #1
 80077ee:	9245      	str	r2, [sp, #276]	; 0x114
 80077f0:	6862      	ldr	r2, [r4, #4]
 80077f2:	3301      	adds	r3, #1
 80077f4:	3a01      	subs	r2, #1
 80077f6:	6062      	str	r2, [r4, #4]
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	e7ec      	b.n	80077d6 <__ssvfiscanf_r+0x3e>
 80077fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80077fe:	4621      	mov	r1, r4
 8007800:	4630      	mov	r0, r6
 8007802:	4798      	blx	r3
 8007804:	2800      	cmp	r0, #0
 8007806:	d0e9      	beq.n	80077dc <__ssvfiscanf_r+0x44>
 8007808:	e7ed      	b.n	80077e6 <__ssvfiscanf_r+0x4e>
 800780a:	2b25      	cmp	r3, #37	; 0x25
 800780c:	d012      	beq.n	8007834 <__ssvfiscanf_r+0x9c>
 800780e:	469a      	mov	sl, r3
 8007810:	6863      	ldr	r3, [r4, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f340 8091 	ble.w	800793a <__ssvfiscanf_r+0x1a2>
 8007818:	6822      	ldr	r2, [r4, #0]
 800781a:	7813      	ldrb	r3, [r2, #0]
 800781c:	4553      	cmp	r3, sl
 800781e:	f040 812e 	bne.w	8007a7e <__ssvfiscanf_r+0x2e6>
 8007822:	6863      	ldr	r3, [r4, #4]
 8007824:	3b01      	subs	r3, #1
 8007826:	6063      	str	r3, [r4, #4]
 8007828:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800782a:	3201      	adds	r2, #1
 800782c:	3301      	adds	r3, #1
 800782e:	6022      	str	r2, [r4, #0]
 8007830:	9345      	str	r3, [sp, #276]	; 0x114
 8007832:	e7d8      	b.n	80077e6 <__ssvfiscanf_r+0x4e>
 8007834:	9141      	str	r1, [sp, #260]	; 0x104
 8007836:	9143      	str	r1, [sp, #268]	; 0x10c
 8007838:	7853      	ldrb	r3, [r2, #1]
 800783a:	2b2a      	cmp	r3, #42	; 0x2a
 800783c:	bf02      	ittt	eq
 800783e:	2310      	moveq	r3, #16
 8007840:	1c95      	addeq	r5, r2, #2
 8007842:	9341      	streq	r3, [sp, #260]	; 0x104
 8007844:	220a      	movs	r2, #10
 8007846:	46aa      	mov	sl, r5
 8007848:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800784c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007850:	2b09      	cmp	r3, #9
 8007852:	d91d      	bls.n	8007890 <__ssvfiscanf_r+0xf8>
 8007854:	487e      	ldr	r0, [pc, #504]	; (8007a50 <__ssvfiscanf_r+0x2b8>)
 8007856:	2203      	movs	r2, #3
 8007858:	f7f8 fcca 	bl	80001f0 <memchr>
 800785c:	b140      	cbz	r0, 8007870 <__ssvfiscanf_r+0xd8>
 800785e:	2301      	movs	r3, #1
 8007860:	eba0 0009 	sub.w	r0, r0, r9
 8007864:	fa03 f000 	lsl.w	r0, r3, r0
 8007868:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800786a:	4318      	orrs	r0, r3
 800786c:	9041      	str	r0, [sp, #260]	; 0x104
 800786e:	4655      	mov	r5, sl
 8007870:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007874:	2b78      	cmp	r3, #120	; 0x78
 8007876:	d806      	bhi.n	8007886 <__ssvfiscanf_r+0xee>
 8007878:	2b57      	cmp	r3, #87	; 0x57
 800787a:	d810      	bhi.n	800789e <__ssvfiscanf_r+0x106>
 800787c:	2b25      	cmp	r3, #37	; 0x25
 800787e:	d0c6      	beq.n	800780e <__ssvfiscanf_r+0x76>
 8007880:	d856      	bhi.n	8007930 <__ssvfiscanf_r+0x198>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d064      	beq.n	8007950 <__ssvfiscanf_r+0x1b8>
 8007886:	2303      	movs	r3, #3
 8007888:	9347      	str	r3, [sp, #284]	; 0x11c
 800788a:	230a      	movs	r3, #10
 800788c:	9342      	str	r3, [sp, #264]	; 0x108
 800788e:	e071      	b.n	8007974 <__ssvfiscanf_r+0x1dc>
 8007890:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007892:	fb02 1103 	mla	r1, r2, r3, r1
 8007896:	3930      	subs	r1, #48	; 0x30
 8007898:	9143      	str	r1, [sp, #268]	; 0x10c
 800789a:	4655      	mov	r5, sl
 800789c:	e7d3      	b.n	8007846 <__ssvfiscanf_r+0xae>
 800789e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80078a2:	2a20      	cmp	r2, #32
 80078a4:	d8ef      	bhi.n	8007886 <__ssvfiscanf_r+0xee>
 80078a6:	a101      	add	r1, pc, #4	; (adr r1, 80078ac <__ssvfiscanf_r+0x114>)
 80078a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078ac:	0800795f 	.word	0x0800795f
 80078b0:	08007887 	.word	0x08007887
 80078b4:	08007887 	.word	0x08007887
 80078b8:	080079bd 	.word	0x080079bd
 80078bc:	08007887 	.word	0x08007887
 80078c0:	08007887 	.word	0x08007887
 80078c4:	08007887 	.word	0x08007887
 80078c8:	08007887 	.word	0x08007887
 80078cc:	08007887 	.word	0x08007887
 80078d0:	08007887 	.word	0x08007887
 80078d4:	08007887 	.word	0x08007887
 80078d8:	080079d3 	.word	0x080079d3
 80078dc:	080079a9 	.word	0x080079a9
 80078e0:	08007937 	.word	0x08007937
 80078e4:	08007937 	.word	0x08007937
 80078e8:	08007937 	.word	0x08007937
 80078ec:	08007887 	.word	0x08007887
 80078f0:	080079ad 	.word	0x080079ad
 80078f4:	08007887 	.word	0x08007887
 80078f8:	08007887 	.word	0x08007887
 80078fc:	08007887 	.word	0x08007887
 8007900:	08007887 	.word	0x08007887
 8007904:	080079e3 	.word	0x080079e3
 8007908:	080079b5 	.word	0x080079b5
 800790c:	08007957 	.word	0x08007957
 8007910:	08007887 	.word	0x08007887
 8007914:	08007887 	.word	0x08007887
 8007918:	080079df 	.word	0x080079df
 800791c:	08007887 	.word	0x08007887
 8007920:	080079a9 	.word	0x080079a9
 8007924:	08007887 	.word	0x08007887
 8007928:	08007887 	.word	0x08007887
 800792c:	0800795f 	.word	0x0800795f
 8007930:	3b45      	subs	r3, #69	; 0x45
 8007932:	2b02      	cmp	r3, #2
 8007934:	d8a7      	bhi.n	8007886 <__ssvfiscanf_r+0xee>
 8007936:	2305      	movs	r3, #5
 8007938:	e01b      	b.n	8007972 <__ssvfiscanf_r+0x1da>
 800793a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800793c:	4621      	mov	r1, r4
 800793e:	4630      	mov	r0, r6
 8007940:	4798      	blx	r3
 8007942:	2800      	cmp	r0, #0
 8007944:	f43f af68 	beq.w	8007818 <__ssvfiscanf_r+0x80>
 8007948:	9844      	ldr	r0, [sp, #272]	; 0x110
 800794a:	2800      	cmp	r0, #0
 800794c:	f040 808d 	bne.w	8007a6a <__ssvfiscanf_r+0x2d2>
 8007950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007954:	e08f      	b.n	8007a76 <__ssvfiscanf_r+0x2de>
 8007956:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007958:	f042 0220 	orr.w	r2, r2, #32
 800795c:	9241      	str	r2, [sp, #260]	; 0x104
 800795e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007964:	9241      	str	r2, [sp, #260]	; 0x104
 8007966:	2210      	movs	r2, #16
 8007968:	2b6f      	cmp	r3, #111	; 0x6f
 800796a:	9242      	str	r2, [sp, #264]	; 0x108
 800796c:	bf34      	ite	cc
 800796e:	2303      	movcc	r3, #3
 8007970:	2304      	movcs	r3, #4
 8007972:	9347      	str	r3, [sp, #284]	; 0x11c
 8007974:	6863      	ldr	r3, [r4, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	dd42      	ble.n	8007a00 <__ssvfiscanf_r+0x268>
 800797a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800797c:	0659      	lsls	r1, r3, #25
 800797e:	d404      	bmi.n	800798a <__ssvfiscanf_r+0x1f2>
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	781a      	ldrb	r2, [r3, #0]
 8007984:	5cba      	ldrb	r2, [r7, r2]
 8007986:	0712      	lsls	r2, r2, #28
 8007988:	d441      	bmi.n	8007a0e <__ssvfiscanf_r+0x276>
 800798a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800798c:	2b02      	cmp	r3, #2
 800798e:	dc50      	bgt.n	8007a32 <__ssvfiscanf_r+0x29a>
 8007990:	466b      	mov	r3, sp
 8007992:	4622      	mov	r2, r4
 8007994:	a941      	add	r1, sp, #260	; 0x104
 8007996:	4630      	mov	r0, r6
 8007998:	f000 fb64 	bl	8008064 <_scanf_chars>
 800799c:	2801      	cmp	r0, #1
 800799e:	d06e      	beq.n	8007a7e <__ssvfiscanf_r+0x2e6>
 80079a0:	2802      	cmp	r0, #2
 80079a2:	f47f af20 	bne.w	80077e6 <__ssvfiscanf_r+0x4e>
 80079a6:	e7cf      	b.n	8007948 <__ssvfiscanf_r+0x1b0>
 80079a8:	220a      	movs	r2, #10
 80079aa:	e7dd      	b.n	8007968 <__ssvfiscanf_r+0x1d0>
 80079ac:	2300      	movs	r3, #0
 80079ae:	9342      	str	r3, [sp, #264]	; 0x108
 80079b0:	2303      	movs	r3, #3
 80079b2:	e7de      	b.n	8007972 <__ssvfiscanf_r+0x1da>
 80079b4:	2308      	movs	r3, #8
 80079b6:	9342      	str	r3, [sp, #264]	; 0x108
 80079b8:	2304      	movs	r3, #4
 80079ba:	e7da      	b.n	8007972 <__ssvfiscanf_r+0x1da>
 80079bc:	4629      	mov	r1, r5
 80079be:	4640      	mov	r0, r8
 80079c0:	f000 fcc4 	bl	800834c <__sccl>
 80079c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80079c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ca:	9341      	str	r3, [sp, #260]	; 0x104
 80079cc:	4605      	mov	r5, r0
 80079ce:	2301      	movs	r3, #1
 80079d0:	e7cf      	b.n	8007972 <__ssvfiscanf_r+0x1da>
 80079d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80079d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d8:	9341      	str	r3, [sp, #260]	; 0x104
 80079da:	2300      	movs	r3, #0
 80079dc:	e7c9      	b.n	8007972 <__ssvfiscanf_r+0x1da>
 80079de:	2302      	movs	r3, #2
 80079e0:	e7c7      	b.n	8007972 <__ssvfiscanf_r+0x1da>
 80079e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80079e4:	06c3      	lsls	r3, r0, #27
 80079e6:	f53f aefe 	bmi.w	80077e6 <__ssvfiscanf_r+0x4e>
 80079ea:	9b00      	ldr	r3, [sp, #0]
 80079ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80079ee:	1d19      	adds	r1, r3, #4
 80079f0:	9100      	str	r1, [sp, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f010 0f01 	tst.w	r0, #1
 80079f8:	bf14      	ite	ne
 80079fa:	801a      	strhne	r2, [r3, #0]
 80079fc:	601a      	streq	r2, [r3, #0]
 80079fe:	e6f2      	b.n	80077e6 <__ssvfiscanf_r+0x4e>
 8007a00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007a02:	4621      	mov	r1, r4
 8007a04:	4630      	mov	r0, r6
 8007a06:	4798      	blx	r3
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d0b6      	beq.n	800797a <__ssvfiscanf_r+0x1e2>
 8007a0c:	e79c      	b.n	8007948 <__ssvfiscanf_r+0x1b0>
 8007a0e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007a10:	3201      	adds	r2, #1
 8007a12:	9245      	str	r2, [sp, #276]	; 0x114
 8007a14:	6862      	ldr	r2, [r4, #4]
 8007a16:	3a01      	subs	r2, #1
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	6062      	str	r2, [r4, #4]
 8007a1c:	dd02      	ble.n	8007a24 <__ssvfiscanf_r+0x28c>
 8007a1e:	3301      	adds	r3, #1
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	e7ad      	b.n	8007980 <__ssvfiscanf_r+0x1e8>
 8007a24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007a26:	4621      	mov	r1, r4
 8007a28:	4630      	mov	r0, r6
 8007a2a:	4798      	blx	r3
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d0a7      	beq.n	8007980 <__ssvfiscanf_r+0x1e8>
 8007a30:	e78a      	b.n	8007948 <__ssvfiscanf_r+0x1b0>
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	dc0e      	bgt.n	8007a54 <__ssvfiscanf_r+0x2bc>
 8007a36:	466b      	mov	r3, sp
 8007a38:	4622      	mov	r2, r4
 8007a3a:	a941      	add	r1, sp, #260	; 0x104
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f000 fb6b 	bl	8008118 <_scanf_i>
 8007a42:	e7ab      	b.n	800799c <__ssvfiscanf_r+0x204>
 8007a44:	080076e5 	.word	0x080076e5
 8007a48:	0800775f 	.word	0x0800775f
 8007a4c:	080091f9 	.word	0x080091f9
 8007a50:	080092ff 	.word	0x080092ff
 8007a54:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <__ssvfiscanf_r+0x2ec>)
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f43f aec5 	beq.w	80077e6 <__ssvfiscanf_r+0x4e>
 8007a5c:	466b      	mov	r3, sp
 8007a5e:	4622      	mov	r2, r4
 8007a60:	a941      	add	r1, sp, #260	; 0x104
 8007a62:	4630      	mov	r0, r6
 8007a64:	f3af 8000 	nop.w
 8007a68:	e798      	b.n	800799c <__ssvfiscanf_r+0x204>
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007a70:	bf18      	it	ne
 8007a72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007a76:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007a80:	e7f9      	b.n	8007a76 <__ssvfiscanf_r+0x2de>
 8007a82:	bf00      	nop
 8007a84:	00000000 	.word	0x00000000

08007a88 <__sfputc_r>:
 8007a88:	6893      	ldr	r3, [r2, #8]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	b410      	push	{r4}
 8007a90:	6093      	str	r3, [r2, #8]
 8007a92:	da08      	bge.n	8007aa6 <__sfputc_r+0x1e>
 8007a94:	6994      	ldr	r4, [r2, #24]
 8007a96:	42a3      	cmp	r3, r4
 8007a98:	db01      	blt.n	8007a9e <__sfputc_r+0x16>
 8007a9a:	290a      	cmp	r1, #10
 8007a9c:	d103      	bne.n	8007aa6 <__sfputc_r+0x1e>
 8007a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aa2:	f000 bd39 	b.w	8008518 <__swbuf_r>
 8007aa6:	6813      	ldr	r3, [r2, #0]
 8007aa8:	1c58      	adds	r0, r3, #1
 8007aaa:	6010      	str	r0, [r2, #0]
 8007aac:	7019      	strb	r1, [r3, #0]
 8007aae:	4608      	mov	r0, r1
 8007ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <__sfputs_r>:
 8007ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab8:	4606      	mov	r6, r0
 8007aba:	460f      	mov	r7, r1
 8007abc:	4614      	mov	r4, r2
 8007abe:	18d5      	adds	r5, r2, r3
 8007ac0:	42ac      	cmp	r4, r5
 8007ac2:	d101      	bne.n	8007ac8 <__sfputs_r+0x12>
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	e007      	b.n	8007ad8 <__sfputs_r+0x22>
 8007ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007acc:	463a      	mov	r2, r7
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f7ff ffda 	bl	8007a88 <__sfputc_r>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d1f3      	bne.n	8007ac0 <__sfputs_r+0xa>
 8007ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007adc <_vfiprintf_r>:
 8007adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	460d      	mov	r5, r1
 8007ae2:	b09d      	sub	sp, #116	; 0x74
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	4698      	mov	r8, r3
 8007ae8:	4606      	mov	r6, r0
 8007aea:	b118      	cbz	r0, 8007af4 <_vfiprintf_r+0x18>
 8007aec:	6983      	ldr	r3, [r0, #24]
 8007aee:	b90b      	cbnz	r3, 8007af4 <_vfiprintf_r+0x18>
 8007af0:	f000 fef4 	bl	80088dc <__sinit>
 8007af4:	4b89      	ldr	r3, [pc, #548]	; (8007d1c <_vfiprintf_r+0x240>)
 8007af6:	429d      	cmp	r5, r3
 8007af8:	d11b      	bne.n	8007b32 <_vfiprintf_r+0x56>
 8007afa:	6875      	ldr	r5, [r6, #4]
 8007afc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007afe:	07d9      	lsls	r1, r3, #31
 8007b00:	d405      	bmi.n	8007b0e <_vfiprintf_r+0x32>
 8007b02:	89ab      	ldrh	r3, [r5, #12]
 8007b04:	059a      	lsls	r2, r3, #22
 8007b06:	d402      	bmi.n	8007b0e <_vfiprintf_r+0x32>
 8007b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b0a:	f000 ff85 	bl	8008a18 <__retarget_lock_acquire_recursive>
 8007b0e:	89ab      	ldrh	r3, [r5, #12]
 8007b10:	071b      	lsls	r3, r3, #28
 8007b12:	d501      	bpl.n	8007b18 <_vfiprintf_r+0x3c>
 8007b14:	692b      	ldr	r3, [r5, #16]
 8007b16:	b9eb      	cbnz	r3, 8007b54 <_vfiprintf_r+0x78>
 8007b18:	4629      	mov	r1, r5
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f000 fd4e 	bl	80085bc <__swsetup_r>
 8007b20:	b1c0      	cbz	r0, 8007b54 <_vfiprintf_r+0x78>
 8007b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b24:	07dc      	lsls	r4, r3, #31
 8007b26:	d50e      	bpl.n	8007b46 <_vfiprintf_r+0x6a>
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b2c:	b01d      	add	sp, #116	; 0x74
 8007b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b32:	4b7b      	ldr	r3, [pc, #492]	; (8007d20 <_vfiprintf_r+0x244>)
 8007b34:	429d      	cmp	r5, r3
 8007b36:	d101      	bne.n	8007b3c <_vfiprintf_r+0x60>
 8007b38:	68b5      	ldr	r5, [r6, #8]
 8007b3a:	e7df      	b.n	8007afc <_vfiprintf_r+0x20>
 8007b3c:	4b79      	ldr	r3, [pc, #484]	; (8007d24 <_vfiprintf_r+0x248>)
 8007b3e:	429d      	cmp	r5, r3
 8007b40:	bf08      	it	eq
 8007b42:	68f5      	ldreq	r5, [r6, #12]
 8007b44:	e7da      	b.n	8007afc <_vfiprintf_r+0x20>
 8007b46:	89ab      	ldrh	r3, [r5, #12]
 8007b48:	0598      	lsls	r0, r3, #22
 8007b4a:	d4ed      	bmi.n	8007b28 <_vfiprintf_r+0x4c>
 8007b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b4e:	f000 ff64 	bl	8008a1a <__retarget_lock_release_recursive>
 8007b52:	e7e9      	b.n	8007b28 <_vfiprintf_r+0x4c>
 8007b54:	2300      	movs	r3, #0
 8007b56:	9309      	str	r3, [sp, #36]	; 0x24
 8007b58:	2320      	movs	r3, #32
 8007b5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b62:	2330      	movs	r3, #48	; 0x30
 8007b64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d28 <_vfiprintf_r+0x24c>
 8007b68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b6c:	f04f 0901 	mov.w	r9, #1
 8007b70:	4623      	mov	r3, r4
 8007b72:	469a      	mov	sl, r3
 8007b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b78:	b10a      	cbz	r2, 8007b7e <_vfiprintf_r+0xa2>
 8007b7a:	2a25      	cmp	r2, #37	; 0x25
 8007b7c:	d1f9      	bne.n	8007b72 <_vfiprintf_r+0x96>
 8007b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b82:	d00b      	beq.n	8007b9c <_vfiprintf_r+0xc0>
 8007b84:	465b      	mov	r3, fp
 8007b86:	4622      	mov	r2, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f7ff ff93 	bl	8007ab6 <__sfputs_r>
 8007b90:	3001      	adds	r0, #1
 8007b92:	f000 80aa 	beq.w	8007cea <_vfiprintf_r+0x20e>
 8007b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b98:	445a      	add	r2, fp
 8007b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 80a2 	beq.w	8007cea <_vfiprintf_r+0x20e>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bb0:	f10a 0a01 	add.w	sl, sl, #1
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	9307      	str	r3, [sp, #28]
 8007bb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8007bbe:	4654      	mov	r4, sl
 8007bc0:	2205      	movs	r2, #5
 8007bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc6:	4858      	ldr	r0, [pc, #352]	; (8007d28 <_vfiprintf_r+0x24c>)
 8007bc8:	f7f8 fb12 	bl	80001f0 <memchr>
 8007bcc:	9a04      	ldr	r2, [sp, #16]
 8007bce:	b9d8      	cbnz	r0, 8007c08 <_vfiprintf_r+0x12c>
 8007bd0:	06d1      	lsls	r1, r2, #27
 8007bd2:	bf44      	itt	mi
 8007bd4:	2320      	movmi	r3, #32
 8007bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bda:	0713      	lsls	r3, r2, #28
 8007bdc:	bf44      	itt	mi
 8007bde:	232b      	movmi	r3, #43	; 0x2b
 8007be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be4:	f89a 3000 	ldrb.w	r3, [sl]
 8007be8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bea:	d015      	beq.n	8007c18 <_vfiprintf_r+0x13c>
 8007bec:	9a07      	ldr	r2, [sp, #28]
 8007bee:	4654      	mov	r4, sl
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	f04f 0c0a 	mov.w	ip, #10
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bfc:	3b30      	subs	r3, #48	; 0x30
 8007bfe:	2b09      	cmp	r3, #9
 8007c00:	d94e      	bls.n	8007ca0 <_vfiprintf_r+0x1c4>
 8007c02:	b1b0      	cbz	r0, 8007c32 <_vfiprintf_r+0x156>
 8007c04:	9207      	str	r2, [sp, #28]
 8007c06:	e014      	b.n	8007c32 <_vfiprintf_r+0x156>
 8007c08:	eba0 0308 	sub.w	r3, r0, r8
 8007c0c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c10:	4313      	orrs	r3, r2
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	46a2      	mov	sl, r4
 8007c16:	e7d2      	b.n	8007bbe <_vfiprintf_r+0xe2>
 8007c18:	9b03      	ldr	r3, [sp, #12]
 8007c1a:	1d19      	adds	r1, r3, #4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	9103      	str	r1, [sp, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	bfbb      	ittet	lt
 8007c24:	425b      	neglt	r3, r3
 8007c26:	f042 0202 	orrlt.w	r2, r2, #2
 8007c2a:	9307      	strge	r3, [sp, #28]
 8007c2c:	9307      	strlt	r3, [sp, #28]
 8007c2e:	bfb8      	it	lt
 8007c30:	9204      	strlt	r2, [sp, #16]
 8007c32:	7823      	ldrb	r3, [r4, #0]
 8007c34:	2b2e      	cmp	r3, #46	; 0x2e
 8007c36:	d10c      	bne.n	8007c52 <_vfiprintf_r+0x176>
 8007c38:	7863      	ldrb	r3, [r4, #1]
 8007c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c3c:	d135      	bne.n	8007caa <_vfiprintf_r+0x1ce>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	1d1a      	adds	r2, r3, #4
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	9203      	str	r2, [sp, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	bfb8      	it	lt
 8007c4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c4e:	3402      	adds	r4, #2
 8007c50:	9305      	str	r3, [sp, #20]
 8007c52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d38 <_vfiprintf_r+0x25c>
 8007c56:	7821      	ldrb	r1, [r4, #0]
 8007c58:	2203      	movs	r2, #3
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	f7f8 fac8 	bl	80001f0 <memchr>
 8007c60:	b140      	cbz	r0, 8007c74 <_vfiprintf_r+0x198>
 8007c62:	2340      	movs	r3, #64	; 0x40
 8007c64:	eba0 000a 	sub.w	r0, r0, sl
 8007c68:	fa03 f000 	lsl.w	r0, r3, r0
 8007c6c:	9b04      	ldr	r3, [sp, #16]
 8007c6e:	4303      	orrs	r3, r0
 8007c70:	3401      	adds	r4, #1
 8007c72:	9304      	str	r3, [sp, #16]
 8007c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c78:	482c      	ldr	r0, [pc, #176]	; (8007d2c <_vfiprintf_r+0x250>)
 8007c7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c7e:	2206      	movs	r2, #6
 8007c80:	f7f8 fab6 	bl	80001f0 <memchr>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d03f      	beq.n	8007d08 <_vfiprintf_r+0x22c>
 8007c88:	4b29      	ldr	r3, [pc, #164]	; (8007d30 <_vfiprintf_r+0x254>)
 8007c8a:	bb1b      	cbnz	r3, 8007cd4 <_vfiprintf_r+0x1f8>
 8007c8c:	9b03      	ldr	r3, [sp, #12]
 8007c8e:	3307      	adds	r3, #7
 8007c90:	f023 0307 	bic.w	r3, r3, #7
 8007c94:	3308      	adds	r3, #8
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9a:	443b      	add	r3, r7
 8007c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9e:	e767      	b.n	8007b70 <_vfiprintf_r+0x94>
 8007ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	e7a5      	b.n	8007bf6 <_vfiprintf_r+0x11a>
 8007caa:	2300      	movs	r3, #0
 8007cac:	3401      	adds	r4, #1
 8007cae:	9305      	str	r3, [sp, #20]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	f04f 0c0a 	mov.w	ip, #10
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cbc:	3a30      	subs	r2, #48	; 0x30
 8007cbe:	2a09      	cmp	r2, #9
 8007cc0:	d903      	bls.n	8007cca <_vfiprintf_r+0x1ee>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0c5      	beq.n	8007c52 <_vfiprintf_r+0x176>
 8007cc6:	9105      	str	r1, [sp, #20]
 8007cc8:	e7c3      	b.n	8007c52 <_vfiprintf_r+0x176>
 8007cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cce:	4604      	mov	r4, r0
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e7f0      	b.n	8007cb6 <_vfiprintf_r+0x1da>
 8007cd4:	ab03      	add	r3, sp, #12
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	462a      	mov	r2, r5
 8007cda:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <_vfiprintf_r+0x258>)
 8007cdc:	a904      	add	r1, sp, #16
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f3af 8000 	nop.w
 8007ce4:	4607      	mov	r7, r0
 8007ce6:	1c78      	adds	r0, r7, #1
 8007ce8:	d1d6      	bne.n	8007c98 <_vfiprintf_r+0x1bc>
 8007cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cec:	07d9      	lsls	r1, r3, #31
 8007cee:	d405      	bmi.n	8007cfc <_vfiprintf_r+0x220>
 8007cf0:	89ab      	ldrh	r3, [r5, #12]
 8007cf2:	059a      	lsls	r2, r3, #22
 8007cf4:	d402      	bmi.n	8007cfc <_vfiprintf_r+0x220>
 8007cf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cf8:	f000 fe8f 	bl	8008a1a <__retarget_lock_release_recursive>
 8007cfc:	89ab      	ldrh	r3, [r5, #12]
 8007cfe:	065b      	lsls	r3, r3, #25
 8007d00:	f53f af12 	bmi.w	8007b28 <_vfiprintf_r+0x4c>
 8007d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d06:	e711      	b.n	8007b2c <_vfiprintf_r+0x50>
 8007d08:	ab03      	add	r3, sp, #12
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <_vfiprintf_r+0x258>)
 8007d10:	a904      	add	r1, sp, #16
 8007d12:	4630      	mov	r0, r6
 8007d14:	f000 f880 	bl	8007e18 <_printf_i>
 8007d18:	e7e4      	b.n	8007ce4 <_vfiprintf_r+0x208>
 8007d1a:	bf00      	nop
 8007d1c:	08009368 	.word	0x08009368
 8007d20:	08009388 	.word	0x08009388
 8007d24:	08009348 	.word	0x08009348
 8007d28:	080092f9 	.word	0x080092f9
 8007d2c:	08009303 	.word	0x08009303
 8007d30:	00000000 	.word	0x00000000
 8007d34:	08007ab7 	.word	0x08007ab7
 8007d38:	080092ff 	.word	0x080092ff

08007d3c <_printf_common>:
 8007d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d40:	4616      	mov	r6, r2
 8007d42:	4699      	mov	r9, r3
 8007d44:	688a      	ldr	r2, [r1, #8]
 8007d46:	690b      	ldr	r3, [r1, #16]
 8007d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	bfb8      	it	lt
 8007d50:	4613      	movlt	r3, r2
 8007d52:	6033      	str	r3, [r6, #0]
 8007d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d58:	4607      	mov	r7, r0
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	b10a      	cbz	r2, 8007d62 <_printf_common+0x26>
 8007d5e:	3301      	adds	r3, #1
 8007d60:	6033      	str	r3, [r6, #0]
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	0699      	lsls	r1, r3, #26
 8007d66:	bf42      	ittt	mi
 8007d68:	6833      	ldrmi	r3, [r6, #0]
 8007d6a:	3302      	addmi	r3, #2
 8007d6c:	6033      	strmi	r3, [r6, #0]
 8007d6e:	6825      	ldr	r5, [r4, #0]
 8007d70:	f015 0506 	ands.w	r5, r5, #6
 8007d74:	d106      	bne.n	8007d84 <_printf_common+0x48>
 8007d76:	f104 0a19 	add.w	sl, r4, #25
 8007d7a:	68e3      	ldr	r3, [r4, #12]
 8007d7c:	6832      	ldr	r2, [r6, #0]
 8007d7e:	1a9b      	subs	r3, r3, r2
 8007d80:	42ab      	cmp	r3, r5
 8007d82:	dc26      	bgt.n	8007dd2 <_printf_common+0x96>
 8007d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d88:	1e13      	subs	r3, r2, #0
 8007d8a:	6822      	ldr	r2, [r4, #0]
 8007d8c:	bf18      	it	ne
 8007d8e:	2301      	movne	r3, #1
 8007d90:	0692      	lsls	r2, r2, #26
 8007d92:	d42b      	bmi.n	8007dec <_printf_common+0xb0>
 8007d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d98:	4649      	mov	r1, r9
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	47c0      	blx	r8
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d01e      	beq.n	8007de0 <_printf_common+0xa4>
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	68e5      	ldr	r5, [r4, #12]
 8007da6:	6832      	ldr	r2, [r6, #0]
 8007da8:	f003 0306 	and.w	r3, r3, #6
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	bf08      	it	eq
 8007db0:	1aad      	subeq	r5, r5, r2
 8007db2:	68a3      	ldr	r3, [r4, #8]
 8007db4:	6922      	ldr	r2, [r4, #16]
 8007db6:	bf0c      	ite	eq
 8007db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dbc:	2500      	movne	r5, #0
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	bfc4      	itt	gt
 8007dc2:	1a9b      	subgt	r3, r3, r2
 8007dc4:	18ed      	addgt	r5, r5, r3
 8007dc6:	2600      	movs	r6, #0
 8007dc8:	341a      	adds	r4, #26
 8007dca:	42b5      	cmp	r5, r6
 8007dcc:	d11a      	bne.n	8007e04 <_printf_common+0xc8>
 8007dce:	2000      	movs	r0, #0
 8007dd0:	e008      	b.n	8007de4 <_printf_common+0xa8>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4652      	mov	r2, sl
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	4638      	mov	r0, r7
 8007dda:	47c0      	blx	r8
 8007ddc:	3001      	adds	r0, #1
 8007dde:	d103      	bne.n	8007de8 <_printf_common+0xac>
 8007de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de8:	3501      	adds	r5, #1
 8007dea:	e7c6      	b.n	8007d7a <_printf_common+0x3e>
 8007dec:	18e1      	adds	r1, r4, r3
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	2030      	movs	r0, #48	; 0x30
 8007df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007df6:	4422      	add	r2, r4
 8007df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e00:	3302      	adds	r3, #2
 8007e02:	e7c7      	b.n	8007d94 <_printf_common+0x58>
 8007e04:	2301      	movs	r3, #1
 8007e06:	4622      	mov	r2, r4
 8007e08:	4649      	mov	r1, r9
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	47c0      	blx	r8
 8007e0e:	3001      	adds	r0, #1
 8007e10:	d0e6      	beq.n	8007de0 <_printf_common+0xa4>
 8007e12:	3601      	adds	r6, #1
 8007e14:	e7d9      	b.n	8007dca <_printf_common+0x8e>
	...

08007e18 <_printf_i>:
 8007e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1c:	7e0f      	ldrb	r7, [r1, #24]
 8007e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e20:	2f78      	cmp	r7, #120	; 0x78
 8007e22:	4691      	mov	r9, r2
 8007e24:	4680      	mov	r8, r0
 8007e26:	460c      	mov	r4, r1
 8007e28:	469a      	mov	sl, r3
 8007e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e2e:	d807      	bhi.n	8007e40 <_printf_i+0x28>
 8007e30:	2f62      	cmp	r7, #98	; 0x62
 8007e32:	d80a      	bhi.n	8007e4a <_printf_i+0x32>
 8007e34:	2f00      	cmp	r7, #0
 8007e36:	f000 80d8 	beq.w	8007fea <_printf_i+0x1d2>
 8007e3a:	2f58      	cmp	r7, #88	; 0x58
 8007e3c:	f000 80a3 	beq.w	8007f86 <_printf_i+0x16e>
 8007e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e48:	e03a      	b.n	8007ec0 <_printf_i+0xa8>
 8007e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e4e:	2b15      	cmp	r3, #21
 8007e50:	d8f6      	bhi.n	8007e40 <_printf_i+0x28>
 8007e52:	a101      	add	r1, pc, #4	; (adr r1, 8007e58 <_printf_i+0x40>)
 8007e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e58:	08007eb1 	.word	0x08007eb1
 8007e5c:	08007ec5 	.word	0x08007ec5
 8007e60:	08007e41 	.word	0x08007e41
 8007e64:	08007e41 	.word	0x08007e41
 8007e68:	08007e41 	.word	0x08007e41
 8007e6c:	08007e41 	.word	0x08007e41
 8007e70:	08007ec5 	.word	0x08007ec5
 8007e74:	08007e41 	.word	0x08007e41
 8007e78:	08007e41 	.word	0x08007e41
 8007e7c:	08007e41 	.word	0x08007e41
 8007e80:	08007e41 	.word	0x08007e41
 8007e84:	08007fd1 	.word	0x08007fd1
 8007e88:	08007ef5 	.word	0x08007ef5
 8007e8c:	08007fb3 	.word	0x08007fb3
 8007e90:	08007e41 	.word	0x08007e41
 8007e94:	08007e41 	.word	0x08007e41
 8007e98:	08007ff3 	.word	0x08007ff3
 8007e9c:	08007e41 	.word	0x08007e41
 8007ea0:	08007ef5 	.word	0x08007ef5
 8007ea4:	08007e41 	.word	0x08007e41
 8007ea8:	08007e41 	.word	0x08007e41
 8007eac:	08007fbb 	.word	0x08007fbb
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	1d1a      	adds	r2, r3, #4
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	602a      	str	r2, [r5, #0]
 8007eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e0a3      	b.n	800800c <_printf_i+0x1f4>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	6829      	ldr	r1, [r5, #0]
 8007ec8:	0606      	lsls	r6, r0, #24
 8007eca:	f101 0304 	add.w	r3, r1, #4
 8007ece:	d50a      	bpl.n	8007ee6 <_printf_i+0xce>
 8007ed0:	680e      	ldr	r6, [r1, #0]
 8007ed2:	602b      	str	r3, [r5, #0]
 8007ed4:	2e00      	cmp	r6, #0
 8007ed6:	da03      	bge.n	8007ee0 <_printf_i+0xc8>
 8007ed8:	232d      	movs	r3, #45	; 0x2d
 8007eda:	4276      	negs	r6, r6
 8007edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee0:	485e      	ldr	r0, [pc, #376]	; (800805c <_printf_i+0x244>)
 8007ee2:	230a      	movs	r3, #10
 8007ee4:	e019      	b.n	8007f1a <_printf_i+0x102>
 8007ee6:	680e      	ldr	r6, [r1, #0]
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007eee:	bf18      	it	ne
 8007ef0:	b236      	sxthne	r6, r6
 8007ef2:	e7ef      	b.n	8007ed4 <_printf_i+0xbc>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	6820      	ldr	r0, [r4, #0]
 8007ef8:	1d19      	adds	r1, r3, #4
 8007efa:	6029      	str	r1, [r5, #0]
 8007efc:	0601      	lsls	r1, r0, #24
 8007efe:	d501      	bpl.n	8007f04 <_printf_i+0xec>
 8007f00:	681e      	ldr	r6, [r3, #0]
 8007f02:	e002      	b.n	8007f0a <_printf_i+0xf2>
 8007f04:	0646      	lsls	r6, r0, #25
 8007f06:	d5fb      	bpl.n	8007f00 <_printf_i+0xe8>
 8007f08:	881e      	ldrh	r6, [r3, #0]
 8007f0a:	4854      	ldr	r0, [pc, #336]	; (800805c <_printf_i+0x244>)
 8007f0c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f0e:	bf0c      	ite	eq
 8007f10:	2308      	moveq	r3, #8
 8007f12:	230a      	movne	r3, #10
 8007f14:	2100      	movs	r1, #0
 8007f16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f1a:	6865      	ldr	r5, [r4, #4]
 8007f1c:	60a5      	str	r5, [r4, #8]
 8007f1e:	2d00      	cmp	r5, #0
 8007f20:	bfa2      	ittt	ge
 8007f22:	6821      	ldrge	r1, [r4, #0]
 8007f24:	f021 0104 	bicge.w	r1, r1, #4
 8007f28:	6021      	strge	r1, [r4, #0]
 8007f2a:	b90e      	cbnz	r6, 8007f30 <_printf_i+0x118>
 8007f2c:	2d00      	cmp	r5, #0
 8007f2e:	d04d      	beq.n	8007fcc <_printf_i+0x1b4>
 8007f30:	4615      	mov	r5, r2
 8007f32:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f36:	fb03 6711 	mls	r7, r3, r1, r6
 8007f3a:	5dc7      	ldrb	r7, [r0, r7]
 8007f3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f40:	4637      	mov	r7, r6
 8007f42:	42bb      	cmp	r3, r7
 8007f44:	460e      	mov	r6, r1
 8007f46:	d9f4      	bls.n	8007f32 <_printf_i+0x11a>
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d10b      	bne.n	8007f64 <_printf_i+0x14c>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	07de      	lsls	r6, r3, #31
 8007f50:	d508      	bpl.n	8007f64 <_printf_i+0x14c>
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	6861      	ldr	r1, [r4, #4]
 8007f56:	4299      	cmp	r1, r3
 8007f58:	bfde      	ittt	le
 8007f5a:	2330      	movle	r3, #48	; 0x30
 8007f5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007f64:	1b52      	subs	r2, r2, r5
 8007f66:	6122      	str	r2, [r4, #16]
 8007f68:	f8cd a000 	str.w	sl, [sp]
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	aa03      	add	r2, sp, #12
 8007f70:	4621      	mov	r1, r4
 8007f72:	4640      	mov	r0, r8
 8007f74:	f7ff fee2 	bl	8007d3c <_printf_common>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d14c      	bne.n	8008016 <_printf_i+0x1fe>
 8007f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f80:	b004      	add	sp, #16
 8007f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f86:	4835      	ldr	r0, [pc, #212]	; (800805c <_printf_i+0x244>)
 8007f88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f8c:	6829      	ldr	r1, [r5, #0]
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f94:	6029      	str	r1, [r5, #0]
 8007f96:	061d      	lsls	r5, r3, #24
 8007f98:	d514      	bpl.n	8007fc4 <_printf_i+0x1ac>
 8007f9a:	07df      	lsls	r7, r3, #31
 8007f9c:	bf44      	itt	mi
 8007f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007fa2:	6023      	strmi	r3, [r4, #0]
 8007fa4:	b91e      	cbnz	r6, 8007fae <_printf_i+0x196>
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	f023 0320 	bic.w	r3, r3, #32
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	2310      	movs	r3, #16
 8007fb0:	e7b0      	b.n	8007f14 <_printf_i+0xfc>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	f043 0320 	orr.w	r3, r3, #32
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	2378      	movs	r3, #120	; 0x78
 8007fbc:	4828      	ldr	r0, [pc, #160]	; (8008060 <_printf_i+0x248>)
 8007fbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fc2:	e7e3      	b.n	8007f8c <_printf_i+0x174>
 8007fc4:	0659      	lsls	r1, r3, #25
 8007fc6:	bf48      	it	mi
 8007fc8:	b2b6      	uxthmi	r6, r6
 8007fca:	e7e6      	b.n	8007f9a <_printf_i+0x182>
 8007fcc:	4615      	mov	r5, r2
 8007fce:	e7bb      	b.n	8007f48 <_printf_i+0x130>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	6826      	ldr	r6, [r4, #0]
 8007fd4:	6961      	ldr	r1, [r4, #20]
 8007fd6:	1d18      	adds	r0, r3, #4
 8007fd8:	6028      	str	r0, [r5, #0]
 8007fda:	0635      	lsls	r5, r6, #24
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	d501      	bpl.n	8007fe4 <_printf_i+0x1cc>
 8007fe0:	6019      	str	r1, [r3, #0]
 8007fe2:	e002      	b.n	8007fea <_printf_i+0x1d2>
 8007fe4:	0670      	lsls	r0, r6, #25
 8007fe6:	d5fb      	bpl.n	8007fe0 <_printf_i+0x1c8>
 8007fe8:	8019      	strh	r1, [r3, #0]
 8007fea:	2300      	movs	r3, #0
 8007fec:	6123      	str	r3, [r4, #16]
 8007fee:	4615      	mov	r5, r2
 8007ff0:	e7ba      	b.n	8007f68 <_printf_i+0x150>
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	1d1a      	adds	r2, r3, #4
 8007ff6:	602a      	str	r2, [r5, #0]
 8007ff8:	681d      	ldr	r5, [r3, #0]
 8007ffa:	6862      	ldr	r2, [r4, #4]
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	4628      	mov	r0, r5
 8008000:	f7f8 f8f6 	bl	80001f0 <memchr>
 8008004:	b108      	cbz	r0, 800800a <_printf_i+0x1f2>
 8008006:	1b40      	subs	r0, r0, r5
 8008008:	6060      	str	r0, [r4, #4]
 800800a:	6863      	ldr	r3, [r4, #4]
 800800c:	6123      	str	r3, [r4, #16]
 800800e:	2300      	movs	r3, #0
 8008010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008014:	e7a8      	b.n	8007f68 <_printf_i+0x150>
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	462a      	mov	r2, r5
 800801a:	4649      	mov	r1, r9
 800801c:	4640      	mov	r0, r8
 800801e:	47d0      	blx	sl
 8008020:	3001      	adds	r0, #1
 8008022:	d0ab      	beq.n	8007f7c <_printf_i+0x164>
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	079b      	lsls	r3, r3, #30
 8008028:	d413      	bmi.n	8008052 <_printf_i+0x23a>
 800802a:	68e0      	ldr	r0, [r4, #12]
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	4298      	cmp	r0, r3
 8008030:	bfb8      	it	lt
 8008032:	4618      	movlt	r0, r3
 8008034:	e7a4      	b.n	8007f80 <_printf_i+0x168>
 8008036:	2301      	movs	r3, #1
 8008038:	4632      	mov	r2, r6
 800803a:	4649      	mov	r1, r9
 800803c:	4640      	mov	r0, r8
 800803e:	47d0      	blx	sl
 8008040:	3001      	adds	r0, #1
 8008042:	d09b      	beq.n	8007f7c <_printf_i+0x164>
 8008044:	3501      	adds	r5, #1
 8008046:	68e3      	ldr	r3, [r4, #12]
 8008048:	9903      	ldr	r1, [sp, #12]
 800804a:	1a5b      	subs	r3, r3, r1
 800804c:	42ab      	cmp	r3, r5
 800804e:	dcf2      	bgt.n	8008036 <_printf_i+0x21e>
 8008050:	e7eb      	b.n	800802a <_printf_i+0x212>
 8008052:	2500      	movs	r5, #0
 8008054:	f104 0619 	add.w	r6, r4, #25
 8008058:	e7f5      	b.n	8008046 <_printf_i+0x22e>
 800805a:	bf00      	nop
 800805c:	0800930a 	.word	0x0800930a
 8008060:	0800931b 	.word	0x0800931b

08008064 <_scanf_chars>:
 8008064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008068:	4615      	mov	r5, r2
 800806a:	688a      	ldr	r2, [r1, #8]
 800806c:	4680      	mov	r8, r0
 800806e:	460c      	mov	r4, r1
 8008070:	b932      	cbnz	r2, 8008080 <_scanf_chars+0x1c>
 8008072:	698a      	ldr	r2, [r1, #24]
 8008074:	2a00      	cmp	r2, #0
 8008076:	bf0c      	ite	eq
 8008078:	2201      	moveq	r2, #1
 800807a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800807e:	608a      	str	r2, [r1, #8]
 8008080:	6822      	ldr	r2, [r4, #0]
 8008082:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008114 <_scanf_chars+0xb0>
 8008086:	06d1      	lsls	r1, r2, #27
 8008088:	bf5f      	itttt	pl
 800808a:	681a      	ldrpl	r2, [r3, #0]
 800808c:	1d11      	addpl	r1, r2, #4
 800808e:	6019      	strpl	r1, [r3, #0]
 8008090:	6816      	ldrpl	r6, [r2, #0]
 8008092:	2700      	movs	r7, #0
 8008094:	69a0      	ldr	r0, [r4, #24]
 8008096:	b188      	cbz	r0, 80080bc <_scanf_chars+0x58>
 8008098:	2801      	cmp	r0, #1
 800809a:	d107      	bne.n	80080ac <_scanf_chars+0x48>
 800809c:	682a      	ldr	r2, [r5, #0]
 800809e:	7811      	ldrb	r1, [r2, #0]
 80080a0:	6962      	ldr	r2, [r4, #20]
 80080a2:	5c52      	ldrb	r2, [r2, r1]
 80080a4:	b952      	cbnz	r2, 80080bc <_scanf_chars+0x58>
 80080a6:	2f00      	cmp	r7, #0
 80080a8:	d031      	beq.n	800810e <_scanf_chars+0xaa>
 80080aa:	e022      	b.n	80080f2 <_scanf_chars+0x8e>
 80080ac:	2802      	cmp	r0, #2
 80080ae:	d120      	bne.n	80080f2 <_scanf_chars+0x8e>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80080b8:	071b      	lsls	r3, r3, #28
 80080ba:	d41a      	bmi.n	80080f2 <_scanf_chars+0x8e>
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	06da      	lsls	r2, r3, #27
 80080c0:	bf5e      	ittt	pl
 80080c2:	682b      	ldrpl	r3, [r5, #0]
 80080c4:	781b      	ldrbpl	r3, [r3, #0]
 80080c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80080ca:	682a      	ldr	r2, [r5, #0]
 80080cc:	686b      	ldr	r3, [r5, #4]
 80080ce:	3201      	adds	r2, #1
 80080d0:	602a      	str	r2, [r5, #0]
 80080d2:	68a2      	ldr	r2, [r4, #8]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	3a01      	subs	r2, #1
 80080d8:	606b      	str	r3, [r5, #4]
 80080da:	3701      	adds	r7, #1
 80080dc:	60a2      	str	r2, [r4, #8]
 80080de:	b142      	cbz	r2, 80080f2 <_scanf_chars+0x8e>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	dcd7      	bgt.n	8008094 <_scanf_chars+0x30>
 80080e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80080e8:	4629      	mov	r1, r5
 80080ea:	4640      	mov	r0, r8
 80080ec:	4798      	blx	r3
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d0d0      	beq.n	8008094 <_scanf_chars+0x30>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	f013 0310 	ands.w	r3, r3, #16
 80080f8:	d105      	bne.n	8008106 <_scanf_chars+0xa2>
 80080fa:	68e2      	ldr	r2, [r4, #12]
 80080fc:	3201      	adds	r2, #1
 80080fe:	60e2      	str	r2, [r4, #12]
 8008100:	69a2      	ldr	r2, [r4, #24]
 8008102:	b102      	cbz	r2, 8008106 <_scanf_chars+0xa2>
 8008104:	7033      	strb	r3, [r6, #0]
 8008106:	6923      	ldr	r3, [r4, #16]
 8008108:	443b      	add	r3, r7
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	2000      	movs	r0, #0
 800810e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008112:	bf00      	nop
 8008114:	080091f9 	.word	0x080091f9

08008118 <_scanf_i>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	4698      	mov	r8, r3
 800811e:	4b76      	ldr	r3, [pc, #472]	; (80082f8 <_scanf_i+0x1e0>)
 8008120:	460c      	mov	r4, r1
 8008122:	4682      	mov	sl, r0
 8008124:	4616      	mov	r6, r2
 8008126:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800812a:	b087      	sub	sp, #28
 800812c:	ab03      	add	r3, sp, #12
 800812e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008132:	4b72      	ldr	r3, [pc, #456]	; (80082fc <_scanf_i+0x1e4>)
 8008134:	69a1      	ldr	r1, [r4, #24]
 8008136:	4a72      	ldr	r2, [pc, #456]	; (8008300 <_scanf_i+0x1e8>)
 8008138:	2903      	cmp	r1, #3
 800813a:	bf18      	it	ne
 800813c:	461a      	movne	r2, r3
 800813e:	68a3      	ldr	r3, [r4, #8]
 8008140:	9201      	str	r2, [sp, #4]
 8008142:	1e5a      	subs	r2, r3, #1
 8008144:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008148:	bf88      	it	hi
 800814a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800814e:	4627      	mov	r7, r4
 8008150:	bf82      	ittt	hi
 8008152:	eb03 0905 	addhi.w	r9, r3, r5
 8008156:	f240 135d 	movwhi	r3, #349	; 0x15d
 800815a:	60a3      	strhi	r3, [r4, #8]
 800815c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008160:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008164:	bf98      	it	ls
 8008166:	f04f 0900 	movls.w	r9, #0
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	463d      	mov	r5, r7
 800816e:	f04f 0b00 	mov.w	fp, #0
 8008172:	6831      	ldr	r1, [r6, #0]
 8008174:	ab03      	add	r3, sp, #12
 8008176:	7809      	ldrb	r1, [r1, #0]
 8008178:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800817c:	2202      	movs	r2, #2
 800817e:	f7f8 f837 	bl	80001f0 <memchr>
 8008182:	b328      	cbz	r0, 80081d0 <_scanf_i+0xb8>
 8008184:	f1bb 0f01 	cmp.w	fp, #1
 8008188:	d159      	bne.n	800823e <_scanf_i+0x126>
 800818a:	6862      	ldr	r2, [r4, #4]
 800818c:	b92a      	cbnz	r2, 800819a <_scanf_i+0x82>
 800818e:	6822      	ldr	r2, [r4, #0]
 8008190:	2308      	movs	r3, #8
 8008192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008196:	6063      	str	r3, [r4, #4]
 8008198:	6022      	str	r2, [r4, #0]
 800819a:	6822      	ldr	r2, [r4, #0]
 800819c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80081a0:	6022      	str	r2, [r4, #0]
 80081a2:	68a2      	ldr	r2, [r4, #8]
 80081a4:	1e51      	subs	r1, r2, #1
 80081a6:	60a1      	str	r1, [r4, #8]
 80081a8:	b192      	cbz	r2, 80081d0 <_scanf_i+0xb8>
 80081aa:	6832      	ldr	r2, [r6, #0]
 80081ac:	1c51      	adds	r1, r2, #1
 80081ae:	6031      	str	r1, [r6, #0]
 80081b0:	7812      	ldrb	r2, [r2, #0]
 80081b2:	f805 2b01 	strb.w	r2, [r5], #1
 80081b6:	6872      	ldr	r2, [r6, #4]
 80081b8:	3a01      	subs	r2, #1
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	6072      	str	r2, [r6, #4]
 80081be:	dc07      	bgt.n	80081d0 <_scanf_i+0xb8>
 80081c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80081c4:	4631      	mov	r1, r6
 80081c6:	4650      	mov	r0, sl
 80081c8:	4790      	blx	r2
 80081ca:	2800      	cmp	r0, #0
 80081cc:	f040 8085 	bne.w	80082da <_scanf_i+0x1c2>
 80081d0:	f10b 0b01 	add.w	fp, fp, #1
 80081d4:	f1bb 0f03 	cmp.w	fp, #3
 80081d8:	d1cb      	bne.n	8008172 <_scanf_i+0x5a>
 80081da:	6863      	ldr	r3, [r4, #4]
 80081dc:	b90b      	cbnz	r3, 80081e2 <_scanf_i+0xca>
 80081de:	230a      	movs	r3, #10
 80081e0:	6063      	str	r3, [r4, #4]
 80081e2:	6863      	ldr	r3, [r4, #4]
 80081e4:	4947      	ldr	r1, [pc, #284]	; (8008304 <_scanf_i+0x1ec>)
 80081e6:	6960      	ldr	r0, [r4, #20]
 80081e8:	1ac9      	subs	r1, r1, r3
 80081ea:	f000 f8af 	bl	800834c <__sccl>
 80081ee:	f04f 0b00 	mov.w	fp, #0
 80081f2:	68a3      	ldr	r3, [r4, #8]
 80081f4:	6822      	ldr	r2, [r4, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d03d      	beq.n	8008276 <_scanf_i+0x15e>
 80081fa:	6831      	ldr	r1, [r6, #0]
 80081fc:	6960      	ldr	r0, [r4, #20]
 80081fe:	f891 c000 	ldrb.w	ip, [r1]
 8008202:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008206:	2800      	cmp	r0, #0
 8008208:	d035      	beq.n	8008276 <_scanf_i+0x15e>
 800820a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800820e:	d124      	bne.n	800825a <_scanf_i+0x142>
 8008210:	0510      	lsls	r0, r2, #20
 8008212:	d522      	bpl.n	800825a <_scanf_i+0x142>
 8008214:	f10b 0b01 	add.w	fp, fp, #1
 8008218:	f1b9 0f00 	cmp.w	r9, #0
 800821c:	d003      	beq.n	8008226 <_scanf_i+0x10e>
 800821e:	3301      	adds	r3, #1
 8008220:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008224:	60a3      	str	r3, [r4, #8]
 8008226:	6873      	ldr	r3, [r6, #4]
 8008228:	3b01      	subs	r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	6073      	str	r3, [r6, #4]
 800822e:	dd1b      	ble.n	8008268 <_scanf_i+0x150>
 8008230:	6833      	ldr	r3, [r6, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	6033      	str	r3, [r6, #0]
 8008236:	68a3      	ldr	r3, [r4, #8]
 8008238:	3b01      	subs	r3, #1
 800823a:	60a3      	str	r3, [r4, #8]
 800823c:	e7d9      	b.n	80081f2 <_scanf_i+0xda>
 800823e:	f1bb 0f02 	cmp.w	fp, #2
 8008242:	d1ae      	bne.n	80081a2 <_scanf_i+0x8a>
 8008244:	6822      	ldr	r2, [r4, #0]
 8008246:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800824a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800824e:	d1bf      	bne.n	80081d0 <_scanf_i+0xb8>
 8008250:	2310      	movs	r3, #16
 8008252:	6063      	str	r3, [r4, #4]
 8008254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008258:	e7a2      	b.n	80081a0 <_scanf_i+0x88>
 800825a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800825e:	6022      	str	r2, [r4, #0]
 8008260:	780b      	ldrb	r3, [r1, #0]
 8008262:	f805 3b01 	strb.w	r3, [r5], #1
 8008266:	e7de      	b.n	8008226 <_scanf_i+0x10e>
 8008268:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800826c:	4631      	mov	r1, r6
 800826e:	4650      	mov	r0, sl
 8008270:	4798      	blx	r3
 8008272:	2800      	cmp	r0, #0
 8008274:	d0df      	beq.n	8008236 <_scanf_i+0x11e>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	05db      	lsls	r3, r3, #23
 800827a:	d50d      	bpl.n	8008298 <_scanf_i+0x180>
 800827c:	42bd      	cmp	r5, r7
 800827e:	d909      	bls.n	8008294 <_scanf_i+0x17c>
 8008280:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008284:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008288:	4632      	mov	r2, r6
 800828a:	4650      	mov	r0, sl
 800828c:	4798      	blx	r3
 800828e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008292:	464d      	mov	r5, r9
 8008294:	42bd      	cmp	r5, r7
 8008296:	d02d      	beq.n	80082f4 <_scanf_i+0x1dc>
 8008298:	6822      	ldr	r2, [r4, #0]
 800829a:	f012 0210 	ands.w	r2, r2, #16
 800829e:	d113      	bne.n	80082c8 <_scanf_i+0x1b0>
 80082a0:	702a      	strb	r2, [r5, #0]
 80082a2:	6863      	ldr	r3, [r4, #4]
 80082a4:	9e01      	ldr	r6, [sp, #4]
 80082a6:	4639      	mov	r1, r7
 80082a8:	4650      	mov	r0, sl
 80082aa:	47b0      	blx	r6
 80082ac:	6821      	ldr	r1, [r4, #0]
 80082ae:	f8d8 3000 	ldr.w	r3, [r8]
 80082b2:	f011 0f20 	tst.w	r1, #32
 80082b6:	d013      	beq.n	80082e0 <_scanf_i+0x1c8>
 80082b8:	1d1a      	adds	r2, r3, #4
 80082ba:	f8c8 2000 	str.w	r2, [r8]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6018      	str	r0, [r3, #0]
 80082c2:	68e3      	ldr	r3, [r4, #12]
 80082c4:	3301      	adds	r3, #1
 80082c6:	60e3      	str	r3, [r4, #12]
 80082c8:	1bed      	subs	r5, r5, r7
 80082ca:	44ab      	add	fp, r5
 80082cc:	6925      	ldr	r5, [r4, #16]
 80082ce:	445d      	add	r5, fp
 80082d0:	6125      	str	r5, [r4, #16]
 80082d2:	2000      	movs	r0, #0
 80082d4:	b007      	add	sp, #28
 80082d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082da:	f04f 0b00 	mov.w	fp, #0
 80082de:	e7ca      	b.n	8008276 <_scanf_i+0x15e>
 80082e0:	1d1a      	adds	r2, r3, #4
 80082e2:	f8c8 2000 	str.w	r2, [r8]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f011 0f01 	tst.w	r1, #1
 80082ec:	bf14      	ite	ne
 80082ee:	8018      	strhne	r0, [r3, #0]
 80082f0:	6018      	streq	r0, [r3, #0]
 80082f2:	e7e6      	b.n	80082c2 <_scanf_i+0x1aa>
 80082f4:	2001      	movs	r0, #1
 80082f6:	e7ed      	b.n	80082d4 <_scanf_i+0x1bc>
 80082f8:	08008f0c 	.word	0x08008f0c
 80082fc:	080084a1 	.word	0x080084a1
 8008300:	0800717d 	.word	0x0800717d
 8008304:	08009345 	.word	0x08009345

08008308 <_read_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d07      	ldr	r5, [pc, #28]	; (8008328 <_read_r+0x20>)
 800830c:	4604      	mov	r4, r0
 800830e:	4608      	mov	r0, r1
 8008310:	4611      	mov	r1, r2
 8008312:	2200      	movs	r2, #0
 8008314:	602a      	str	r2, [r5, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	f7fa fdaa 	bl	8002e70 <_read>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_read_r+0x1e>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_read_r+0x1e>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	200003c4 	.word	0x200003c4

0800832c <_sbrk_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d06      	ldr	r5, [pc, #24]	; (8008348 <_sbrk_r+0x1c>)
 8008330:	2300      	movs	r3, #0
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	602b      	str	r3, [r5, #0]
 8008338:	f7fa fe08 	bl	8002f4c <_sbrk>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_sbrk_r+0x1a>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b103      	cbz	r3, 8008346 <_sbrk_r+0x1a>
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	200003c4 	.word	0x200003c4

0800834c <__sccl>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	780b      	ldrb	r3, [r1, #0]
 8008350:	4604      	mov	r4, r0
 8008352:	2b5e      	cmp	r3, #94	; 0x5e
 8008354:	bf0b      	itete	eq
 8008356:	784b      	ldrbeq	r3, [r1, #1]
 8008358:	1c48      	addne	r0, r1, #1
 800835a:	1c88      	addeq	r0, r1, #2
 800835c:	2200      	movne	r2, #0
 800835e:	bf08      	it	eq
 8008360:	2201      	moveq	r2, #1
 8008362:	1e61      	subs	r1, r4, #1
 8008364:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008368:	f801 2f01 	strb.w	r2, [r1, #1]!
 800836c:	42a9      	cmp	r1, r5
 800836e:	d1fb      	bne.n	8008368 <__sccl+0x1c>
 8008370:	b90b      	cbnz	r3, 8008376 <__sccl+0x2a>
 8008372:	3801      	subs	r0, #1
 8008374:	bd70      	pop	{r4, r5, r6, pc}
 8008376:	f082 0201 	eor.w	r2, r2, #1
 800837a:	54e2      	strb	r2, [r4, r3]
 800837c:	4605      	mov	r5, r0
 800837e:	4628      	mov	r0, r5
 8008380:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008384:	292d      	cmp	r1, #45	; 0x2d
 8008386:	d006      	beq.n	8008396 <__sccl+0x4a>
 8008388:	295d      	cmp	r1, #93	; 0x5d
 800838a:	d0f3      	beq.n	8008374 <__sccl+0x28>
 800838c:	b909      	cbnz	r1, 8008392 <__sccl+0x46>
 800838e:	4628      	mov	r0, r5
 8008390:	e7f0      	b.n	8008374 <__sccl+0x28>
 8008392:	460b      	mov	r3, r1
 8008394:	e7f1      	b.n	800837a <__sccl+0x2e>
 8008396:	786e      	ldrb	r6, [r5, #1]
 8008398:	2e5d      	cmp	r6, #93	; 0x5d
 800839a:	d0fa      	beq.n	8008392 <__sccl+0x46>
 800839c:	42b3      	cmp	r3, r6
 800839e:	dcf8      	bgt.n	8008392 <__sccl+0x46>
 80083a0:	3502      	adds	r5, #2
 80083a2:	4619      	mov	r1, r3
 80083a4:	3101      	adds	r1, #1
 80083a6:	428e      	cmp	r6, r1
 80083a8:	5462      	strb	r2, [r4, r1]
 80083aa:	dcfb      	bgt.n	80083a4 <__sccl+0x58>
 80083ac:	1af1      	subs	r1, r6, r3
 80083ae:	3901      	subs	r1, #1
 80083b0:	1c58      	adds	r0, r3, #1
 80083b2:	42b3      	cmp	r3, r6
 80083b4:	bfa8      	it	ge
 80083b6:	2100      	movge	r1, #0
 80083b8:	1843      	adds	r3, r0, r1
 80083ba:	e7e0      	b.n	800837e <__sccl+0x32>

080083bc <_strtoul_l.constprop.0>:
 80083bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083c0:	4f36      	ldr	r7, [pc, #216]	; (800849c <_strtoul_l.constprop.0+0xe0>)
 80083c2:	4686      	mov	lr, r0
 80083c4:	460d      	mov	r5, r1
 80083c6:	4628      	mov	r0, r5
 80083c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083cc:	5de6      	ldrb	r6, [r4, r7]
 80083ce:	f016 0608 	ands.w	r6, r6, #8
 80083d2:	d1f8      	bne.n	80083c6 <_strtoul_l.constprop.0+0xa>
 80083d4:	2c2d      	cmp	r4, #45	; 0x2d
 80083d6:	d12f      	bne.n	8008438 <_strtoul_l.constprop.0+0x7c>
 80083d8:	782c      	ldrb	r4, [r5, #0]
 80083da:	2601      	movs	r6, #1
 80083dc:	1c85      	adds	r5, r0, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d057      	beq.n	8008492 <_strtoul_l.constprop.0+0xd6>
 80083e2:	2b10      	cmp	r3, #16
 80083e4:	d109      	bne.n	80083fa <_strtoul_l.constprop.0+0x3e>
 80083e6:	2c30      	cmp	r4, #48	; 0x30
 80083e8:	d107      	bne.n	80083fa <_strtoul_l.constprop.0+0x3e>
 80083ea:	7828      	ldrb	r0, [r5, #0]
 80083ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80083f0:	2858      	cmp	r0, #88	; 0x58
 80083f2:	d149      	bne.n	8008488 <_strtoul_l.constprop.0+0xcc>
 80083f4:	786c      	ldrb	r4, [r5, #1]
 80083f6:	2310      	movs	r3, #16
 80083f8:	3502      	adds	r5, #2
 80083fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80083fe:	2700      	movs	r7, #0
 8008400:	fbb8 f8f3 	udiv	r8, r8, r3
 8008404:	fb03 f908 	mul.w	r9, r3, r8
 8008408:	ea6f 0909 	mvn.w	r9, r9
 800840c:	4638      	mov	r0, r7
 800840e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008412:	f1bc 0f09 	cmp.w	ip, #9
 8008416:	d814      	bhi.n	8008442 <_strtoul_l.constprop.0+0x86>
 8008418:	4664      	mov	r4, ip
 800841a:	42a3      	cmp	r3, r4
 800841c:	dd22      	ble.n	8008464 <_strtoul_l.constprop.0+0xa8>
 800841e:	2f00      	cmp	r7, #0
 8008420:	db1d      	blt.n	800845e <_strtoul_l.constprop.0+0xa2>
 8008422:	4580      	cmp	r8, r0
 8008424:	d31b      	bcc.n	800845e <_strtoul_l.constprop.0+0xa2>
 8008426:	d101      	bne.n	800842c <_strtoul_l.constprop.0+0x70>
 8008428:	45a1      	cmp	r9, r4
 800842a:	db18      	blt.n	800845e <_strtoul_l.constprop.0+0xa2>
 800842c:	fb00 4003 	mla	r0, r0, r3, r4
 8008430:	2701      	movs	r7, #1
 8008432:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008436:	e7ea      	b.n	800840e <_strtoul_l.constprop.0+0x52>
 8008438:	2c2b      	cmp	r4, #43	; 0x2b
 800843a:	bf04      	itt	eq
 800843c:	782c      	ldrbeq	r4, [r5, #0]
 800843e:	1c85      	addeq	r5, r0, #2
 8008440:	e7cd      	b.n	80083de <_strtoul_l.constprop.0+0x22>
 8008442:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008446:	f1bc 0f19 	cmp.w	ip, #25
 800844a:	d801      	bhi.n	8008450 <_strtoul_l.constprop.0+0x94>
 800844c:	3c37      	subs	r4, #55	; 0x37
 800844e:	e7e4      	b.n	800841a <_strtoul_l.constprop.0+0x5e>
 8008450:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008454:	f1bc 0f19 	cmp.w	ip, #25
 8008458:	d804      	bhi.n	8008464 <_strtoul_l.constprop.0+0xa8>
 800845a:	3c57      	subs	r4, #87	; 0x57
 800845c:	e7dd      	b.n	800841a <_strtoul_l.constprop.0+0x5e>
 800845e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008462:	e7e6      	b.n	8008432 <_strtoul_l.constprop.0+0x76>
 8008464:	2f00      	cmp	r7, #0
 8008466:	da07      	bge.n	8008478 <_strtoul_l.constprop.0+0xbc>
 8008468:	2322      	movs	r3, #34	; 0x22
 800846a:	f8ce 3000 	str.w	r3, [lr]
 800846e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008472:	b932      	cbnz	r2, 8008482 <_strtoul_l.constprop.0+0xc6>
 8008474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008478:	b106      	cbz	r6, 800847c <_strtoul_l.constprop.0+0xc0>
 800847a:	4240      	negs	r0, r0
 800847c:	2a00      	cmp	r2, #0
 800847e:	d0f9      	beq.n	8008474 <_strtoul_l.constprop.0+0xb8>
 8008480:	b107      	cbz	r7, 8008484 <_strtoul_l.constprop.0+0xc8>
 8008482:	1e69      	subs	r1, r5, #1
 8008484:	6011      	str	r1, [r2, #0]
 8008486:	e7f5      	b.n	8008474 <_strtoul_l.constprop.0+0xb8>
 8008488:	2430      	movs	r4, #48	; 0x30
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1b5      	bne.n	80083fa <_strtoul_l.constprop.0+0x3e>
 800848e:	2308      	movs	r3, #8
 8008490:	e7b3      	b.n	80083fa <_strtoul_l.constprop.0+0x3e>
 8008492:	2c30      	cmp	r4, #48	; 0x30
 8008494:	d0a9      	beq.n	80083ea <_strtoul_l.constprop.0+0x2e>
 8008496:	230a      	movs	r3, #10
 8008498:	e7af      	b.n	80083fa <_strtoul_l.constprop.0+0x3e>
 800849a:	bf00      	nop
 800849c:	080091f9 	.word	0x080091f9

080084a0 <_strtoul_r>:
 80084a0:	f7ff bf8c 	b.w	80083bc <_strtoul_l.constprop.0>

080084a4 <__submore>:
 80084a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a8:	460c      	mov	r4, r1
 80084aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80084ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084b0:	4299      	cmp	r1, r3
 80084b2:	d11d      	bne.n	80084f0 <__submore+0x4c>
 80084b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80084b8:	f7fe ff44 	bl	8007344 <_malloc_r>
 80084bc:	b918      	cbnz	r0, 80084c6 <__submore+0x22>
 80084be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80084cc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80084d0:	6360      	str	r0, [r4, #52]	; 0x34
 80084d2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80084d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80084da:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80084de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80084e2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80084e6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80084ea:	6020      	str	r0, [r4, #0]
 80084ec:	2000      	movs	r0, #0
 80084ee:	e7e8      	b.n	80084c2 <__submore+0x1e>
 80084f0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80084f2:	0077      	lsls	r7, r6, #1
 80084f4:	463a      	mov	r2, r7
 80084f6:	f000 fb1d 	bl	8008b34 <_realloc_r>
 80084fa:	4605      	mov	r5, r0
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d0de      	beq.n	80084be <__submore+0x1a>
 8008500:	eb00 0806 	add.w	r8, r0, r6
 8008504:	4601      	mov	r1, r0
 8008506:	4632      	mov	r2, r6
 8008508:	4640      	mov	r0, r8
 800850a:	f7fe fc95 	bl	8006e38 <memcpy>
 800850e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008512:	f8c4 8000 	str.w	r8, [r4]
 8008516:	e7e9      	b.n	80084ec <__submore+0x48>

08008518 <__swbuf_r>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	460e      	mov	r6, r1
 800851c:	4614      	mov	r4, r2
 800851e:	4605      	mov	r5, r0
 8008520:	b118      	cbz	r0, 800852a <__swbuf_r+0x12>
 8008522:	6983      	ldr	r3, [r0, #24]
 8008524:	b90b      	cbnz	r3, 800852a <__swbuf_r+0x12>
 8008526:	f000 f9d9 	bl	80088dc <__sinit>
 800852a:	4b21      	ldr	r3, [pc, #132]	; (80085b0 <__swbuf_r+0x98>)
 800852c:	429c      	cmp	r4, r3
 800852e:	d12b      	bne.n	8008588 <__swbuf_r+0x70>
 8008530:	686c      	ldr	r4, [r5, #4]
 8008532:	69a3      	ldr	r3, [r4, #24]
 8008534:	60a3      	str	r3, [r4, #8]
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	071a      	lsls	r2, r3, #28
 800853a:	d52f      	bpl.n	800859c <__swbuf_r+0x84>
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	b36b      	cbz	r3, 800859c <__swbuf_r+0x84>
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	6820      	ldr	r0, [r4, #0]
 8008544:	1ac0      	subs	r0, r0, r3
 8008546:	6963      	ldr	r3, [r4, #20]
 8008548:	b2f6      	uxtb	r6, r6
 800854a:	4283      	cmp	r3, r0
 800854c:	4637      	mov	r7, r6
 800854e:	dc04      	bgt.n	800855a <__swbuf_r+0x42>
 8008550:	4621      	mov	r1, r4
 8008552:	4628      	mov	r0, r5
 8008554:	f000 f92e 	bl	80087b4 <_fflush_r>
 8008558:	bb30      	cbnz	r0, 80085a8 <__swbuf_r+0x90>
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	3b01      	subs	r3, #1
 800855e:	60a3      	str	r3, [r4, #8]
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	6022      	str	r2, [r4, #0]
 8008566:	701e      	strb	r6, [r3, #0]
 8008568:	6963      	ldr	r3, [r4, #20]
 800856a:	3001      	adds	r0, #1
 800856c:	4283      	cmp	r3, r0
 800856e:	d004      	beq.n	800857a <__swbuf_r+0x62>
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	07db      	lsls	r3, r3, #31
 8008574:	d506      	bpl.n	8008584 <__swbuf_r+0x6c>
 8008576:	2e0a      	cmp	r6, #10
 8008578:	d104      	bne.n	8008584 <__swbuf_r+0x6c>
 800857a:	4621      	mov	r1, r4
 800857c:	4628      	mov	r0, r5
 800857e:	f000 f919 	bl	80087b4 <_fflush_r>
 8008582:	b988      	cbnz	r0, 80085a8 <__swbuf_r+0x90>
 8008584:	4638      	mov	r0, r7
 8008586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008588:	4b0a      	ldr	r3, [pc, #40]	; (80085b4 <__swbuf_r+0x9c>)
 800858a:	429c      	cmp	r4, r3
 800858c:	d101      	bne.n	8008592 <__swbuf_r+0x7a>
 800858e:	68ac      	ldr	r4, [r5, #8]
 8008590:	e7cf      	b.n	8008532 <__swbuf_r+0x1a>
 8008592:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <__swbuf_r+0xa0>)
 8008594:	429c      	cmp	r4, r3
 8008596:	bf08      	it	eq
 8008598:	68ec      	ldreq	r4, [r5, #12]
 800859a:	e7ca      	b.n	8008532 <__swbuf_r+0x1a>
 800859c:	4621      	mov	r1, r4
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 f80c 	bl	80085bc <__swsetup_r>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d0cb      	beq.n	8008540 <__swbuf_r+0x28>
 80085a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80085ac:	e7ea      	b.n	8008584 <__swbuf_r+0x6c>
 80085ae:	bf00      	nop
 80085b0:	08009368 	.word	0x08009368
 80085b4:	08009388 	.word	0x08009388
 80085b8:	08009348 	.word	0x08009348

080085bc <__swsetup_r>:
 80085bc:	4b32      	ldr	r3, [pc, #200]	; (8008688 <__swsetup_r+0xcc>)
 80085be:	b570      	push	{r4, r5, r6, lr}
 80085c0:	681d      	ldr	r5, [r3, #0]
 80085c2:	4606      	mov	r6, r0
 80085c4:	460c      	mov	r4, r1
 80085c6:	b125      	cbz	r5, 80085d2 <__swsetup_r+0x16>
 80085c8:	69ab      	ldr	r3, [r5, #24]
 80085ca:	b913      	cbnz	r3, 80085d2 <__swsetup_r+0x16>
 80085cc:	4628      	mov	r0, r5
 80085ce:	f000 f985 	bl	80088dc <__sinit>
 80085d2:	4b2e      	ldr	r3, [pc, #184]	; (800868c <__swsetup_r+0xd0>)
 80085d4:	429c      	cmp	r4, r3
 80085d6:	d10f      	bne.n	80085f8 <__swsetup_r+0x3c>
 80085d8:	686c      	ldr	r4, [r5, #4]
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085e0:	0719      	lsls	r1, r3, #28
 80085e2:	d42c      	bmi.n	800863e <__swsetup_r+0x82>
 80085e4:	06dd      	lsls	r5, r3, #27
 80085e6:	d411      	bmi.n	800860c <__swsetup_r+0x50>
 80085e8:	2309      	movs	r3, #9
 80085ea:	6033      	str	r3, [r6, #0]
 80085ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085f0:	81a3      	strh	r3, [r4, #12]
 80085f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085f6:	e03e      	b.n	8008676 <__swsetup_r+0xba>
 80085f8:	4b25      	ldr	r3, [pc, #148]	; (8008690 <__swsetup_r+0xd4>)
 80085fa:	429c      	cmp	r4, r3
 80085fc:	d101      	bne.n	8008602 <__swsetup_r+0x46>
 80085fe:	68ac      	ldr	r4, [r5, #8]
 8008600:	e7eb      	b.n	80085da <__swsetup_r+0x1e>
 8008602:	4b24      	ldr	r3, [pc, #144]	; (8008694 <__swsetup_r+0xd8>)
 8008604:	429c      	cmp	r4, r3
 8008606:	bf08      	it	eq
 8008608:	68ec      	ldreq	r4, [r5, #12]
 800860a:	e7e6      	b.n	80085da <__swsetup_r+0x1e>
 800860c:	0758      	lsls	r0, r3, #29
 800860e:	d512      	bpl.n	8008636 <__swsetup_r+0x7a>
 8008610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008612:	b141      	cbz	r1, 8008626 <__swsetup_r+0x6a>
 8008614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008618:	4299      	cmp	r1, r3
 800861a:	d002      	beq.n	8008622 <__swsetup_r+0x66>
 800861c:	4630      	mov	r0, r6
 800861e:	f7fe fe25 	bl	800726c <_free_r>
 8008622:	2300      	movs	r3, #0
 8008624:	6363      	str	r3, [r4, #52]	; 0x34
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800862c:	81a3      	strh	r3, [r4, #12]
 800862e:	2300      	movs	r3, #0
 8008630:	6063      	str	r3, [r4, #4]
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	89a3      	ldrh	r3, [r4, #12]
 8008638:	f043 0308 	orr.w	r3, r3, #8
 800863c:	81a3      	strh	r3, [r4, #12]
 800863e:	6923      	ldr	r3, [r4, #16]
 8008640:	b94b      	cbnz	r3, 8008656 <__swsetup_r+0x9a>
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800864c:	d003      	beq.n	8008656 <__swsetup_r+0x9a>
 800864e:	4621      	mov	r1, r4
 8008650:	4630      	mov	r0, r6
 8008652:	f000 fa09 	bl	8008a68 <__smakebuf_r>
 8008656:	89a0      	ldrh	r0, [r4, #12]
 8008658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800865c:	f010 0301 	ands.w	r3, r0, #1
 8008660:	d00a      	beq.n	8008678 <__swsetup_r+0xbc>
 8008662:	2300      	movs	r3, #0
 8008664:	60a3      	str	r3, [r4, #8]
 8008666:	6963      	ldr	r3, [r4, #20]
 8008668:	425b      	negs	r3, r3
 800866a:	61a3      	str	r3, [r4, #24]
 800866c:	6923      	ldr	r3, [r4, #16]
 800866e:	b943      	cbnz	r3, 8008682 <__swsetup_r+0xc6>
 8008670:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008674:	d1ba      	bne.n	80085ec <__swsetup_r+0x30>
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	0781      	lsls	r1, r0, #30
 800867a:	bf58      	it	pl
 800867c:	6963      	ldrpl	r3, [r4, #20]
 800867e:	60a3      	str	r3, [r4, #8]
 8008680:	e7f4      	b.n	800866c <__swsetup_r+0xb0>
 8008682:	2000      	movs	r0, #0
 8008684:	e7f7      	b.n	8008676 <__swsetup_r+0xba>
 8008686:	bf00      	nop
 8008688:	20000104 	.word	0x20000104
 800868c:	08009368 	.word	0x08009368
 8008690:	08009388 	.word	0x08009388
 8008694:	08009348 	.word	0x08009348

08008698 <abort>:
 8008698:	b508      	push	{r3, lr}
 800869a:	2006      	movs	r0, #6
 800869c:	f000 faa2 	bl	8008be4 <raise>
 80086a0:	2001      	movs	r0, #1
 80086a2:	f7fa fbdb 	bl	8002e5c <_exit>
	...

080086a8 <__sflush_r>:
 80086a8:	898a      	ldrh	r2, [r1, #12]
 80086aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ae:	4605      	mov	r5, r0
 80086b0:	0710      	lsls	r0, r2, #28
 80086b2:	460c      	mov	r4, r1
 80086b4:	d458      	bmi.n	8008768 <__sflush_r+0xc0>
 80086b6:	684b      	ldr	r3, [r1, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	dc05      	bgt.n	80086c8 <__sflush_r+0x20>
 80086bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	dc02      	bgt.n	80086c8 <__sflush_r+0x20>
 80086c2:	2000      	movs	r0, #0
 80086c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	d0f9      	beq.n	80086c2 <__sflush_r+0x1a>
 80086ce:	2300      	movs	r3, #0
 80086d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086d4:	682f      	ldr	r7, [r5, #0]
 80086d6:	602b      	str	r3, [r5, #0]
 80086d8:	d032      	beq.n	8008740 <__sflush_r+0x98>
 80086da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	075a      	lsls	r2, r3, #29
 80086e0:	d505      	bpl.n	80086ee <__sflush_r+0x46>
 80086e2:	6863      	ldr	r3, [r4, #4]
 80086e4:	1ac0      	subs	r0, r0, r3
 80086e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086e8:	b10b      	cbz	r3, 80086ee <__sflush_r+0x46>
 80086ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086ec:	1ac0      	subs	r0, r0, r3
 80086ee:	2300      	movs	r3, #0
 80086f0:	4602      	mov	r2, r0
 80086f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086f4:	6a21      	ldr	r1, [r4, #32]
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b0      	blx	r6
 80086fa:	1c43      	adds	r3, r0, #1
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	d106      	bne.n	800870e <__sflush_r+0x66>
 8008700:	6829      	ldr	r1, [r5, #0]
 8008702:	291d      	cmp	r1, #29
 8008704:	d82c      	bhi.n	8008760 <__sflush_r+0xb8>
 8008706:	4a2a      	ldr	r2, [pc, #168]	; (80087b0 <__sflush_r+0x108>)
 8008708:	40ca      	lsrs	r2, r1
 800870a:	07d6      	lsls	r6, r2, #31
 800870c:	d528      	bpl.n	8008760 <__sflush_r+0xb8>
 800870e:	2200      	movs	r2, #0
 8008710:	6062      	str	r2, [r4, #4]
 8008712:	04d9      	lsls	r1, r3, #19
 8008714:	6922      	ldr	r2, [r4, #16]
 8008716:	6022      	str	r2, [r4, #0]
 8008718:	d504      	bpl.n	8008724 <__sflush_r+0x7c>
 800871a:	1c42      	adds	r2, r0, #1
 800871c:	d101      	bne.n	8008722 <__sflush_r+0x7a>
 800871e:	682b      	ldr	r3, [r5, #0]
 8008720:	b903      	cbnz	r3, 8008724 <__sflush_r+0x7c>
 8008722:	6560      	str	r0, [r4, #84]	; 0x54
 8008724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008726:	602f      	str	r7, [r5, #0]
 8008728:	2900      	cmp	r1, #0
 800872a:	d0ca      	beq.n	80086c2 <__sflush_r+0x1a>
 800872c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008730:	4299      	cmp	r1, r3
 8008732:	d002      	beq.n	800873a <__sflush_r+0x92>
 8008734:	4628      	mov	r0, r5
 8008736:	f7fe fd99 	bl	800726c <_free_r>
 800873a:	2000      	movs	r0, #0
 800873c:	6360      	str	r0, [r4, #52]	; 0x34
 800873e:	e7c1      	b.n	80086c4 <__sflush_r+0x1c>
 8008740:	6a21      	ldr	r1, [r4, #32]
 8008742:	2301      	movs	r3, #1
 8008744:	4628      	mov	r0, r5
 8008746:	47b0      	blx	r6
 8008748:	1c41      	adds	r1, r0, #1
 800874a:	d1c7      	bne.n	80086dc <__sflush_r+0x34>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0c4      	beq.n	80086dc <__sflush_r+0x34>
 8008752:	2b1d      	cmp	r3, #29
 8008754:	d001      	beq.n	800875a <__sflush_r+0xb2>
 8008756:	2b16      	cmp	r3, #22
 8008758:	d101      	bne.n	800875e <__sflush_r+0xb6>
 800875a:	602f      	str	r7, [r5, #0]
 800875c:	e7b1      	b.n	80086c2 <__sflush_r+0x1a>
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	e7ad      	b.n	80086c4 <__sflush_r+0x1c>
 8008768:	690f      	ldr	r7, [r1, #16]
 800876a:	2f00      	cmp	r7, #0
 800876c:	d0a9      	beq.n	80086c2 <__sflush_r+0x1a>
 800876e:	0793      	lsls	r3, r2, #30
 8008770:	680e      	ldr	r6, [r1, #0]
 8008772:	bf08      	it	eq
 8008774:	694b      	ldreq	r3, [r1, #20]
 8008776:	600f      	str	r7, [r1, #0]
 8008778:	bf18      	it	ne
 800877a:	2300      	movne	r3, #0
 800877c:	eba6 0807 	sub.w	r8, r6, r7
 8008780:	608b      	str	r3, [r1, #8]
 8008782:	f1b8 0f00 	cmp.w	r8, #0
 8008786:	dd9c      	ble.n	80086c2 <__sflush_r+0x1a>
 8008788:	6a21      	ldr	r1, [r4, #32]
 800878a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800878c:	4643      	mov	r3, r8
 800878e:	463a      	mov	r2, r7
 8008790:	4628      	mov	r0, r5
 8008792:	47b0      	blx	r6
 8008794:	2800      	cmp	r0, #0
 8008796:	dc06      	bgt.n	80087a6 <__sflush_r+0xfe>
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800879e:	81a3      	strh	r3, [r4, #12]
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a4:	e78e      	b.n	80086c4 <__sflush_r+0x1c>
 80087a6:	4407      	add	r7, r0
 80087a8:	eba8 0800 	sub.w	r8, r8, r0
 80087ac:	e7e9      	b.n	8008782 <__sflush_r+0xda>
 80087ae:	bf00      	nop
 80087b0:	20400001 	.word	0x20400001

080087b4 <_fflush_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	690b      	ldr	r3, [r1, #16]
 80087b8:	4605      	mov	r5, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	b913      	cbnz	r3, 80087c4 <_fflush_r+0x10>
 80087be:	2500      	movs	r5, #0
 80087c0:	4628      	mov	r0, r5
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	b118      	cbz	r0, 80087ce <_fflush_r+0x1a>
 80087c6:	6983      	ldr	r3, [r0, #24]
 80087c8:	b90b      	cbnz	r3, 80087ce <_fflush_r+0x1a>
 80087ca:	f000 f887 	bl	80088dc <__sinit>
 80087ce:	4b14      	ldr	r3, [pc, #80]	; (8008820 <_fflush_r+0x6c>)
 80087d0:	429c      	cmp	r4, r3
 80087d2:	d11b      	bne.n	800880c <_fflush_r+0x58>
 80087d4:	686c      	ldr	r4, [r5, #4]
 80087d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0ef      	beq.n	80087be <_fflush_r+0xa>
 80087de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087e0:	07d0      	lsls	r0, r2, #31
 80087e2:	d404      	bmi.n	80087ee <_fflush_r+0x3a>
 80087e4:	0599      	lsls	r1, r3, #22
 80087e6:	d402      	bmi.n	80087ee <_fflush_r+0x3a>
 80087e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ea:	f000 f915 	bl	8008a18 <__retarget_lock_acquire_recursive>
 80087ee:	4628      	mov	r0, r5
 80087f0:	4621      	mov	r1, r4
 80087f2:	f7ff ff59 	bl	80086a8 <__sflush_r>
 80087f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087f8:	07da      	lsls	r2, r3, #31
 80087fa:	4605      	mov	r5, r0
 80087fc:	d4e0      	bmi.n	80087c0 <_fflush_r+0xc>
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	059b      	lsls	r3, r3, #22
 8008802:	d4dd      	bmi.n	80087c0 <_fflush_r+0xc>
 8008804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008806:	f000 f908 	bl	8008a1a <__retarget_lock_release_recursive>
 800880a:	e7d9      	b.n	80087c0 <_fflush_r+0xc>
 800880c:	4b05      	ldr	r3, [pc, #20]	; (8008824 <_fflush_r+0x70>)
 800880e:	429c      	cmp	r4, r3
 8008810:	d101      	bne.n	8008816 <_fflush_r+0x62>
 8008812:	68ac      	ldr	r4, [r5, #8]
 8008814:	e7df      	b.n	80087d6 <_fflush_r+0x22>
 8008816:	4b04      	ldr	r3, [pc, #16]	; (8008828 <_fflush_r+0x74>)
 8008818:	429c      	cmp	r4, r3
 800881a:	bf08      	it	eq
 800881c:	68ec      	ldreq	r4, [r5, #12]
 800881e:	e7da      	b.n	80087d6 <_fflush_r+0x22>
 8008820:	08009368 	.word	0x08009368
 8008824:	08009388 	.word	0x08009388
 8008828:	08009348 	.word	0x08009348

0800882c <std>:
 800882c:	2300      	movs	r3, #0
 800882e:	b510      	push	{r4, lr}
 8008830:	4604      	mov	r4, r0
 8008832:	e9c0 3300 	strd	r3, r3, [r0]
 8008836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800883a:	6083      	str	r3, [r0, #8]
 800883c:	8181      	strh	r1, [r0, #12]
 800883e:	6643      	str	r3, [r0, #100]	; 0x64
 8008840:	81c2      	strh	r2, [r0, #14]
 8008842:	6183      	str	r3, [r0, #24]
 8008844:	4619      	mov	r1, r3
 8008846:	2208      	movs	r2, #8
 8008848:	305c      	adds	r0, #92	; 0x5c
 800884a:	f7fe fb03 	bl	8006e54 <memset>
 800884e:	4b05      	ldr	r3, [pc, #20]	; (8008864 <std+0x38>)
 8008850:	6263      	str	r3, [r4, #36]	; 0x24
 8008852:	4b05      	ldr	r3, [pc, #20]	; (8008868 <std+0x3c>)
 8008854:	62a3      	str	r3, [r4, #40]	; 0x28
 8008856:	4b05      	ldr	r3, [pc, #20]	; (800886c <std+0x40>)
 8008858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800885a:	4b05      	ldr	r3, [pc, #20]	; (8008870 <std+0x44>)
 800885c:	6224      	str	r4, [r4, #32]
 800885e:	6323      	str	r3, [r4, #48]	; 0x30
 8008860:	bd10      	pop	{r4, pc}
 8008862:	bf00      	nop
 8008864:	08006efd 	.word	0x08006efd
 8008868:	08006f23 	.word	0x08006f23
 800886c:	08006f5b 	.word	0x08006f5b
 8008870:	08006f7f 	.word	0x08006f7f

08008874 <_cleanup_r>:
 8008874:	4901      	ldr	r1, [pc, #4]	; (800887c <_cleanup_r+0x8>)
 8008876:	f000 b8af 	b.w	80089d8 <_fwalk_reent>
 800887a:	bf00      	nop
 800887c:	080087b5 	.word	0x080087b5

08008880 <__sfmoreglue>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	2268      	movs	r2, #104	; 0x68
 8008884:	1e4d      	subs	r5, r1, #1
 8008886:	4355      	muls	r5, r2
 8008888:	460e      	mov	r6, r1
 800888a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800888e:	f7fe fd59 	bl	8007344 <_malloc_r>
 8008892:	4604      	mov	r4, r0
 8008894:	b140      	cbz	r0, 80088a8 <__sfmoreglue+0x28>
 8008896:	2100      	movs	r1, #0
 8008898:	e9c0 1600 	strd	r1, r6, [r0]
 800889c:	300c      	adds	r0, #12
 800889e:	60a0      	str	r0, [r4, #8]
 80088a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088a4:	f7fe fad6 	bl	8006e54 <memset>
 80088a8:	4620      	mov	r0, r4
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__sfp_lock_acquire>:
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <__sfp_lock_acquire+0x8>)
 80088ae:	f000 b8b3 	b.w	8008a18 <__retarget_lock_acquire_recursive>
 80088b2:	bf00      	nop
 80088b4:	200003c9 	.word	0x200003c9

080088b8 <__sfp_lock_release>:
 80088b8:	4801      	ldr	r0, [pc, #4]	; (80088c0 <__sfp_lock_release+0x8>)
 80088ba:	f000 b8ae 	b.w	8008a1a <__retarget_lock_release_recursive>
 80088be:	bf00      	nop
 80088c0:	200003c9 	.word	0x200003c9

080088c4 <__sinit_lock_acquire>:
 80088c4:	4801      	ldr	r0, [pc, #4]	; (80088cc <__sinit_lock_acquire+0x8>)
 80088c6:	f000 b8a7 	b.w	8008a18 <__retarget_lock_acquire_recursive>
 80088ca:	bf00      	nop
 80088cc:	200003ca 	.word	0x200003ca

080088d0 <__sinit_lock_release>:
 80088d0:	4801      	ldr	r0, [pc, #4]	; (80088d8 <__sinit_lock_release+0x8>)
 80088d2:	f000 b8a2 	b.w	8008a1a <__retarget_lock_release_recursive>
 80088d6:	bf00      	nop
 80088d8:	200003ca 	.word	0x200003ca

080088dc <__sinit>:
 80088dc:	b510      	push	{r4, lr}
 80088de:	4604      	mov	r4, r0
 80088e0:	f7ff fff0 	bl	80088c4 <__sinit_lock_acquire>
 80088e4:	69a3      	ldr	r3, [r4, #24]
 80088e6:	b11b      	cbz	r3, 80088f0 <__sinit+0x14>
 80088e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ec:	f7ff bff0 	b.w	80088d0 <__sinit_lock_release>
 80088f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088f4:	6523      	str	r3, [r4, #80]	; 0x50
 80088f6:	4b13      	ldr	r3, [pc, #76]	; (8008944 <__sinit+0x68>)
 80088f8:	4a13      	ldr	r2, [pc, #76]	; (8008948 <__sinit+0x6c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80088fe:	42a3      	cmp	r3, r4
 8008900:	bf04      	itt	eq
 8008902:	2301      	moveq	r3, #1
 8008904:	61a3      	streq	r3, [r4, #24]
 8008906:	4620      	mov	r0, r4
 8008908:	f000 f820 	bl	800894c <__sfp>
 800890c:	6060      	str	r0, [r4, #4]
 800890e:	4620      	mov	r0, r4
 8008910:	f000 f81c 	bl	800894c <__sfp>
 8008914:	60a0      	str	r0, [r4, #8]
 8008916:	4620      	mov	r0, r4
 8008918:	f000 f818 	bl	800894c <__sfp>
 800891c:	2200      	movs	r2, #0
 800891e:	60e0      	str	r0, [r4, #12]
 8008920:	2104      	movs	r1, #4
 8008922:	6860      	ldr	r0, [r4, #4]
 8008924:	f7ff ff82 	bl	800882c <std>
 8008928:	68a0      	ldr	r0, [r4, #8]
 800892a:	2201      	movs	r2, #1
 800892c:	2109      	movs	r1, #9
 800892e:	f7ff ff7d 	bl	800882c <std>
 8008932:	68e0      	ldr	r0, [r4, #12]
 8008934:	2202      	movs	r2, #2
 8008936:	2112      	movs	r1, #18
 8008938:	f7ff ff78 	bl	800882c <std>
 800893c:	2301      	movs	r3, #1
 800893e:	61a3      	str	r3, [r4, #24]
 8008940:	e7d2      	b.n	80088e8 <__sinit+0xc>
 8008942:	bf00      	nop
 8008944:	08009144 	.word	0x08009144
 8008948:	08008875 	.word	0x08008875

0800894c <__sfp>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	4607      	mov	r7, r0
 8008950:	f7ff ffac 	bl	80088ac <__sfp_lock_acquire>
 8008954:	4b1e      	ldr	r3, [pc, #120]	; (80089d0 <__sfp+0x84>)
 8008956:	681e      	ldr	r6, [r3, #0]
 8008958:	69b3      	ldr	r3, [r6, #24]
 800895a:	b913      	cbnz	r3, 8008962 <__sfp+0x16>
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff ffbd 	bl	80088dc <__sinit>
 8008962:	3648      	adds	r6, #72	; 0x48
 8008964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008968:	3b01      	subs	r3, #1
 800896a:	d503      	bpl.n	8008974 <__sfp+0x28>
 800896c:	6833      	ldr	r3, [r6, #0]
 800896e:	b30b      	cbz	r3, 80089b4 <__sfp+0x68>
 8008970:	6836      	ldr	r6, [r6, #0]
 8008972:	e7f7      	b.n	8008964 <__sfp+0x18>
 8008974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008978:	b9d5      	cbnz	r5, 80089b0 <__sfp+0x64>
 800897a:	4b16      	ldr	r3, [pc, #88]	; (80089d4 <__sfp+0x88>)
 800897c:	60e3      	str	r3, [r4, #12]
 800897e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008982:	6665      	str	r5, [r4, #100]	; 0x64
 8008984:	f000 f847 	bl	8008a16 <__retarget_lock_init_recursive>
 8008988:	f7ff ff96 	bl	80088b8 <__sfp_lock_release>
 800898c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008994:	6025      	str	r5, [r4, #0]
 8008996:	61a5      	str	r5, [r4, #24]
 8008998:	2208      	movs	r2, #8
 800899a:	4629      	mov	r1, r5
 800899c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089a0:	f7fe fa58 	bl	8006e54 <memset>
 80089a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089ac:	4620      	mov	r0, r4
 80089ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b0:	3468      	adds	r4, #104	; 0x68
 80089b2:	e7d9      	b.n	8008968 <__sfp+0x1c>
 80089b4:	2104      	movs	r1, #4
 80089b6:	4638      	mov	r0, r7
 80089b8:	f7ff ff62 	bl	8008880 <__sfmoreglue>
 80089bc:	4604      	mov	r4, r0
 80089be:	6030      	str	r0, [r6, #0]
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d1d5      	bne.n	8008970 <__sfp+0x24>
 80089c4:	f7ff ff78 	bl	80088b8 <__sfp_lock_release>
 80089c8:	230c      	movs	r3, #12
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	e7ee      	b.n	80089ac <__sfp+0x60>
 80089ce:	bf00      	nop
 80089d0:	08009144 	.word	0x08009144
 80089d4:	ffff0001 	.word	0xffff0001

080089d8 <_fwalk_reent>:
 80089d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089dc:	4606      	mov	r6, r0
 80089de:	4688      	mov	r8, r1
 80089e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089e4:	2700      	movs	r7, #0
 80089e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089ea:	f1b9 0901 	subs.w	r9, r9, #1
 80089ee:	d505      	bpl.n	80089fc <_fwalk_reent+0x24>
 80089f0:	6824      	ldr	r4, [r4, #0]
 80089f2:	2c00      	cmp	r4, #0
 80089f4:	d1f7      	bne.n	80089e6 <_fwalk_reent+0xe>
 80089f6:	4638      	mov	r0, r7
 80089f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fc:	89ab      	ldrh	r3, [r5, #12]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d907      	bls.n	8008a12 <_fwalk_reent+0x3a>
 8008a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a06:	3301      	adds	r3, #1
 8008a08:	d003      	beq.n	8008a12 <_fwalk_reent+0x3a>
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	47c0      	blx	r8
 8008a10:	4307      	orrs	r7, r0
 8008a12:	3568      	adds	r5, #104	; 0x68
 8008a14:	e7e9      	b.n	80089ea <_fwalk_reent+0x12>

08008a16 <__retarget_lock_init_recursive>:
 8008a16:	4770      	bx	lr

08008a18 <__retarget_lock_acquire_recursive>:
 8008a18:	4770      	bx	lr

08008a1a <__retarget_lock_release_recursive>:
 8008a1a:	4770      	bx	lr

08008a1c <__swhatbuf_r>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	460e      	mov	r6, r1
 8008a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a24:	2900      	cmp	r1, #0
 8008a26:	b096      	sub	sp, #88	; 0x58
 8008a28:	4614      	mov	r4, r2
 8008a2a:	461d      	mov	r5, r3
 8008a2c:	da08      	bge.n	8008a40 <__swhatbuf_r+0x24>
 8008a2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	602a      	str	r2, [r5, #0]
 8008a36:	061a      	lsls	r2, r3, #24
 8008a38:	d410      	bmi.n	8008a5c <__swhatbuf_r+0x40>
 8008a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a3e:	e00e      	b.n	8008a5e <__swhatbuf_r+0x42>
 8008a40:	466a      	mov	r2, sp
 8008a42:	f000 f8eb 	bl	8008c1c <_fstat_r>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	dbf1      	blt.n	8008a2e <__swhatbuf_r+0x12>
 8008a4a:	9a01      	ldr	r2, [sp, #4]
 8008a4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a54:	425a      	negs	r2, r3
 8008a56:	415a      	adcs	r2, r3
 8008a58:	602a      	str	r2, [r5, #0]
 8008a5a:	e7ee      	b.n	8008a3a <__swhatbuf_r+0x1e>
 8008a5c:	2340      	movs	r3, #64	; 0x40
 8008a5e:	2000      	movs	r0, #0
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	b016      	add	sp, #88	; 0x58
 8008a64:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a68 <__smakebuf_r>:
 8008a68:	898b      	ldrh	r3, [r1, #12]
 8008a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a6c:	079d      	lsls	r5, r3, #30
 8008a6e:	4606      	mov	r6, r0
 8008a70:	460c      	mov	r4, r1
 8008a72:	d507      	bpl.n	8008a84 <__smakebuf_r+0x1c>
 8008a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	6123      	str	r3, [r4, #16]
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	6163      	str	r3, [r4, #20]
 8008a80:	b002      	add	sp, #8
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	ab01      	add	r3, sp, #4
 8008a86:	466a      	mov	r2, sp
 8008a88:	f7ff ffc8 	bl	8008a1c <__swhatbuf_r>
 8008a8c:	9900      	ldr	r1, [sp, #0]
 8008a8e:	4605      	mov	r5, r0
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7fe fc57 	bl	8007344 <_malloc_r>
 8008a96:	b948      	cbnz	r0, 8008aac <__smakebuf_r+0x44>
 8008a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9c:	059a      	lsls	r2, r3, #22
 8008a9e:	d4ef      	bmi.n	8008a80 <__smakebuf_r+0x18>
 8008aa0:	f023 0303 	bic.w	r3, r3, #3
 8008aa4:	f043 0302 	orr.w	r3, r3, #2
 8008aa8:	81a3      	strh	r3, [r4, #12]
 8008aaa:	e7e3      	b.n	8008a74 <__smakebuf_r+0xc>
 8008aac:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <__smakebuf_r+0x7c>)
 8008aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	6020      	str	r0, [r4, #0]
 8008ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	9b00      	ldr	r3, [sp, #0]
 8008abc:	6163      	str	r3, [r4, #20]
 8008abe:	9b01      	ldr	r3, [sp, #4]
 8008ac0:	6120      	str	r0, [r4, #16]
 8008ac2:	b15b      	cbz	r3, 8008adc <__smakebuf_r+0x74>
 8008ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f000 f8b9 	bl	8008c40 <_isatty_r>
 8008ace:	b128      	cbz	r0, 8008adc <__smakebuf_r+0x74>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f023 0303 	bic.w	r3, r3, #3
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	89a0      	ldrh	r0, [r4, #12]
 8008ade:	4305      	orrs	r5, r0
 8008ae0:	81a5      	strh	r5, [r4, #12]
 8008ae2:	e7cd      	b.n	8008a80 <__smakebuf_r+0x18>
 8008ae4:	08008875 	.word	0x08008875

08008ae8 <memmove>:
 8008ae8:	4288      	cmp	r0, r1
 8008aea:	b510      	push	{r4, lr}
 8008aec:	eb01 0402 	add.w	r4, r1, r2
 8008af0:	d902      	bls.n	8008af8 <memmove+0x10>
 8008af2:	4284      	cmp	r4, r0
 8008af4:	4623      	mov	r3, r4
 8008af6:	d807      	bhi.n	8008b08 <memmove+0x20>
 8008af8:	1e43      	subs	r3, r0, #1
 8008afa:	42a1      	cmp	r1, r4
 8008afc:	d008      	beq.n	8008b10 <memmove+0x28>
 8008afe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b06:	e7f8      	b.n	8008afa <memmove+0x12>
 8008b08:	4402      	add	r2, r0
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	428a      	cmp	r2, r1
 8008b0e:	d100      	bne.n	8008b12 <memmove+0x2a>
 8008b10:	bd10      	pop	{r4, pc}
 8008b12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b1a:	e7f7      	b.n	8008b0c <memmove+0x24>

08008b1c <__malloc_lock>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	; (8008b24 <__malloc_lock+0x8>)
 8008b1e:	f7ff bf7b 	b.w	8008a18 <__retarget_lock_acquire_recursive>
 8008b22:	bf00      	nop
 8008b24:	200003c8 	.word	0x200003c8

08008b28 <__malloc_unlock>:
 8008b28:	4801      	ldr	r0, [pc, #4]	; (8008b30 <__malloc_unlock+0x8>)
 8008b2a:	f7ff bf76 	b.w	8008a1a <__retarget_lock_release_recursive>
 8008b2e:	bf00      	nop
 8008b30:	200003c8 	.word	0x200003c8

08008b34 <_realloc_r>:
 8008b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b38:	4680      	mov	r8, r0
 8008b3a:	4614      	mov	r4, r2
 8008b3c:	460e      	mov	r6, r1
 8008b3e:	b921      	cbnz	r1, 8008b4a <_realloc_r+0x16>
 8008b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b44:	4611      	mov	r1, r2
 8008b46:	f7fe bbfd 	b.w	8007344 <_malloc_r>
 8008b4a:	b92a      	cbnz	r2, 8008b58 <_realloc_r+0x24>
 8008b4c:	f7fe fb8e 	bl	800726c <_free_r>
 8008b50:	4625      	mov	r5, r4
 8008b52:	4628      	mov	r0, r5
 8008b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b58:	f000 f882 	bl	8008c60 <_malloc_usable_size_r>
 8008b5c:	4284      	cmp	r4, r0
 8008b5e:	4607      	mov	r7, r0
 8008b60:	d802      	bhi.n	8008b68 <_realloc_r+0x34>
 8008b62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b66:	d812      	bhi.n	8008b8e <_realloc_r+0x5a>
 8008b68:	4621      	mov	r1, r4
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	f7fe fbea 	bl	8007344 <_malloc_r>
 8008b70:	4605      	mov	r5, r0
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d0ed      	beq.n	8008b52 <_realloc_r+0x1e>
 8008b76:	42bc      	cmp	r4, r7
 8008b78:	4622      	mov	r2, r4
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	bf28      	it	cs
 8008b7e:	463a      	movcs	r2, r7
 8008b80:	f7fe f95a 	bl	8006e38 <memcpy>
 8008b84:	4631      	mov	r1, r6
 8008b86:	4640      	mov	r0, r8
 8008b88:	f7fe fb70 	bl	800726c <_free_r>
 8008b8c:	e7e1      	b.n	8008b52 <_realloc_r+0x1e>
 8008b8e:	4635      	mov	r5, r6
 8008b90:	e7df      	b.n	8008b52 <_realloc_r+0x1e>

08008b92 <_raise_r>:
 8008b92:	291f      	cmp	r1, #31
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4604      	mov	r4, r0
 8008b98:	460d      	mov	r5, r1
 8008b9a:	d904      	bls.n	8008ba6 <_raise_r+0x14>
 8008b9c:	2316      	movs	r3, #22
 8008b9e:	6003      	str	r3, [r0, #0]
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ba4:	bd38      	pop	{r3, r4, r5, pc}
 8008ba6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ba8:	b112      	cbz	r2, 8008bb0 <_raise_r+0x1e>
 8008baa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bae:	b94b      	cbnz	r3, 8008bc4 <_raise_r+0x32>
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 f831 	bl	8008c18 <_getpid_r>
 8008bb6:	462a      	mov	r2, r5
 8008bb8:	4601      	mov	r1, r0
 8008bba:	4620      	mov	r0, r4
 8008bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bc0:	f000 b818 	b.w	8008bf4 <_kill_r>
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d00a      	beq.n	8008bde <_raise_r+0x4c>
 8008bc8:	1c59      	adds	r1, r3, #1
 8008bca:	d103      	bne.n	8008bd4 <_raise_r+0x42>
 8008bcc:	2316      	movs	r3, #22
 8008bce:	6003      	str	r3, [r0, #0]
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	e7e7      	b.n	8008ba4 <_raise_r+0x12>
 8008bd4:	2400      	movs	r4, #0
 8008bd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bda:	4628      	mov	r0, r5
 8008bdc:	4798      	blx	r3
 8008bde:	2000      	movs	r0, #0
 8008be0:	e7e0      	b.n	8008ba4 <_raise_r+0x12>
	...

08008be4 <raise>:
 8008be4:	4b02      	ldr	r3, [pc, #8]	; (8008bf0 <raise+0xc>)
 8008be6:	4601      	mov	r1, r0
 8008be8:	6818      	ldr	r0, [r3, #0]
 8008bea:	f7ff bfd2 	b.w	8008b92 <_raise_r>
 8008bee:	bf00      	nop
 8008bf0:	20000104 	.word	0x20000104

08008bf4 <_kill_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	4d07      	ldr	r5, [pc, #28]	; (8008c14 <_kill_r+0x20>)
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	4608      	mov	r0, r1
 8008bfe:	4611      	mov	r1, r2
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	f7fa f91b 	bl	8002e3c <_kill>
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	d102      	bne.n	8008c10 <_kill_r+0x1c>
 8008c0a:	682b      	ldr	r3, [r5, #0]
 8008c0c:	b103      	cbz	r3, 8008c10 <_kill_r+0x1c>
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	bd38      	pop	{r3, r4, r5, pc}
 8008c12:	bf00      	nop
 8008c14:	200003c4 	.word	0x200003c4

08008c18 <_getpid_r>:
 8008c18:	f7fa b908 	b.w	8002e2c <_getpid>

08008c1c <_fstat_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d07      	ldr	r5, [pc, #28]	; (8008c3c <_fstat_r+0x20>)
 8008c20:	2300      	movs	r3, #0
 8008c22:	4604      	mov	r4, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	4611      	mov	r1, r2
 8008c28:	602b      	str	r3, [r5, #0]
 8008c2a:	f7fa f966 	bl	8002efa <_fstat>
 8008c2e:	1c43      	adds	r3, r0, #1
 8008c30:	d102      	bne.n	8008c38 <_fstat_r+0x1c>
 8008c32:	682b      	ldr	r3, [r5, #0]
 8008c34:	b103      	cbz	r3, 8008c38 <_fstat_r+0x1c>
 8008c36:	6023      	str	r3, [r4, #0]
 8008c38:	bd38      	pop	{r3, r4, r5, pc}
 8008c3a:	bf00      	nop
 8008c3c:	200003c4 	.word	0x200003c4

08008c40 <_isatty_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4d06      	ldr	r5, [pc, #24]	; (8008c5c <_isatty_r+0x1c>)
 8008c44:	2300      	movs	r3, #0
 8008c46:	4604      	mov	r4, r0
 8008c48:	4608      	mov	r0, r1
 8008c4a:	602b      	str	r3, [r5, #0]
 8008c4c:	f7fa f965 	bl	8002f1a <_isatty>
 8008c50:	1c43      	adds	r3, r0, #1
 8008c52:	d102      	bne.n	8008c5a <_isatty_r+0x1a>
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	b103      	cbz	r3, 8008c5a <_isatty_r+0x1a>
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	bd38      	pop	{r3, r4, r5, pc}
 8008c5c:	200003c4 	.word	0x200003c4

08008c60 <_malloc_usable_size_r>:
 8008c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c64:	1f18      	subs	r0, r3, #4
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	bfbc      	itt	lt
 8008c6a:	580b      	ldrlt	r3, [r1, r0]
 8008c6c:	18c0      	addlt	r0, r0, r3
 8008c6e:	4770      	bx	lr

08008c70 <_init>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr

08008c7c <_fini>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr
